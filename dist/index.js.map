{
  "version": 3,
  "sources": ["../node_modules/papaparse/papaparse.min.js", "../src/handlers.ts", "../src/utils.ts", "../src/index.ts"],
  "sourceRoot": "dist",
  "sourcesContent": ["/* @license\nPapa Parse\nv5.5.3\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n((e,t)=>{\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()})(this,function r(){var n=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==n?n:{};var d,s=!n.document&&!!n.postMessage,a=n.IS_PAPA_WORKER||!1,o={},h=0,v={};function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=b(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(t,e){var i=parseInt(this._config.skipFirstNLines)||0;if(this.isFirstChunk&&0<i){let e=this._config.newline;e||(r=this._config.quoteChar||'\"',e=this._handle.guessLineEndings(t,r)),t=[...t.split(e).slice(i)].join(e)}this.isFirstChunk&&U(this._config.beforeFirstChunk)&&void 0!==(r=this._config.beforeFirstChunk(t))&&(t=r),this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+t,r=(this._partialLine=\"\",this._handle.parse(i,this._baseIndex,!this._finished));if(!this._handle.paused()&&!this._handle.aborted()){t=r.meta.cursor,i=(this._finished||(this._partialLine=i.substring(t-this._baseIndex),this._baseIndex=t),r&&r.data&&(this._rowCount+=r.data.length),this._finished||this._config.preview&&this._rowCount>=this._config.preview);if(a)n.postMessage({results:r,workerId:v.WORKER_ID,finished:i});else if(U(this._config.chunk)&&!e){if(this._config.chunk(r,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);this._completeResults=r=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(r.data),this._completeResults.errors=this._completeResults.errors.concat(r.errors),this._completeResults.meta=r.meta),this._completed||!i||!U(this._config.complete)||r&&r.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),i||r&&r.meta.paused||this._nextChunk(),r}this._halted=!0},this._sendError=function(e){U(this._config.error)?this._config.error(e):a&&this._config.error&&n.postMessage({workerId:v.WORKER_ID,error:e,finished:!1})}}function f(e){var r;(e=e||{}).chunkSize||(e.chunkSize=v.RemoteChunkSize),u.call(this,e),this._nextChunk=s?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),s||(r.onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!s),this._config.downloadRequestHeaders){var e,t=this._config.downloadRequestHeaders;for(e in t)r.setRequestHeader(e,t[e])}var i;this._config.chunkSize&&(i=this._start+this._config.chunkSize-1,r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i));try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}s&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize||r.responseText.length,this._finished=!this._config.chunkSize||this._start>=(e=>null!==(e=e.getResponseHeader(\"Content-Range\"))?parseInt(e.substring(e.lastIndexOf(\"/\")+1)):-1)(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){e=r.statusText||e;this._sendError(new Error(e))}}function l(e){(e=e||{}).chunkSize||(e.chunkSize=v.LocalChunkSize),u.call(this,e);var i,r,n=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,r=e.slice||e.webkitSlice||e.mozSlice,n?((i=new FileReader).onload=y(this._chunkLoaded,this),i.onerror=y(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input,t=(this._config.chunkSize&&(t=Math.min(this._start+this._config.chunkSize,this._input.size),e=r.call(e,this._start,t)),i.readAsText(e,this._config.encoding));n||this._chunkLoaded({target:{result:t}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function c(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){var e,t;if(!this._finished)return e=this._config.chunkSize,i=e?(t=i.substring(0,e),i.substring(e)):(t=i,\"\"),this._finished=!i,this.parseChunk(t)}}function p(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=y(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=y(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=y(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=y(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var n,s,a,t,o=Math.pow(2,53),h=-o,u=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,d=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,i=this,r=0,f=0,l=!1,e=!1,c=[],p={data:[],errors:[],meta:{}};function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){if(p&&a&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+v.DefaultDelimiter+\"'\"),a=!1),m.skipEmptyLines&&(p.data=p.data.filter(function(e){return!y(e)})),_()){if(p)if(Array.isArray(p.data[0])){for(var e=0;_()&&e<p.data.length;e++)p.data[e].forEach(t);p.data.splice(0,1)}else p.data.forEach(t);function t(e,t){U(m.transformHeader)&&(e=m.transformHeader(e,t)),c.push(e)}}function i(e,t){for(var i=m.header?{}:[],r=0;r<e.length;r++){var n=r,s=e[r],s=((e,t)=>(e=>(m.dynamicTypingFunction&&void 0===m.dynamicTyping[e]&&(m.dynamicTyping[e]=m.dynamicTypingFunction(e)),!0===(m.dynamicTyping[e]||m.dynamicTyping)))(e)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&((e=>{if(u.test(e)){e=parseFloat(e);if(h<e&&e<o)return 1}})(t)?parseFloat(t):d.test(t)?new Date(t):\"\"===t?null:t):t)(n=m.header?r>=c.length?\"__parsed_extra\":c[r]:n,s=m.transform?m.transform(s,n):s);\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>c.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+c.length+\" fields but parsed \"+r,f+t):r<c.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+c.length+\" fields but parsed \"+r,f+t)),i}var r;p&&(m.header||m.dynamicTyping||m.transform)&&(r=1,!p.data.length||Array.isArray(p.data[0])?(p.data=p.data.map(i),r=p.data.length):p.data=i(p.data,0),m.header&&p.meta&&(p.meta.fields=c),f+=r)}function _(){return m.header&&0===c.length}function k(e,t,i,r){e={type:e,code:t,message:i};void 0!==r&&(e.row=r),p.errors.push(e)}U(m.step)&&(t=m.step,m.step=function(e){p=e,_()?g():(g(),0!==p.data.length&&(r+=e.data.length,m.preview&&r>m.preview?s.abort():(p.data=p.data[0],t(p,i))))}),this.parse=function(e,t,i){var r=m.quoteChar||'\"',r=(m.newline||(m.newline=this.guessLineEndings(e,r)),a=!1,m.delimiter?U(m.delimiter)&&(m.delimiter=m.delimiter(e),p.meta.delimiter=m.delimiter):((r=((e,t,i,r,n)=>{var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",v.RECORD_SEP,v.UNIT_SEP];for(var u=0;u<n.length;u++){for(var d,f=n[u],l=0,c=0,p=0,g=(o=void 0,new E({comments:r,delimiter:f,newline:t,preview:10}).parse(e)),_=0;_<g.data.length;_++)i&&y(g.data[_])?p++:(d=g.data[_].length,c+=d,void 0===o?o=d:0<d&&(l+=Math.abs(d-o),o=d));0<g.data.length&&(c/=g.data.length-p),(void 0===a||l<=a)&&(void 0===h||h<c)&&1.99<c&&(a=l,s=f,h=c)}return{successful:!!(m.delimiter=s),bestDelimiter:s}})(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess)).successful?m.delimiter=r.bestDelimiter:(a=!0,m.delimiter=v.DefaultDelimiter),p.meta.delimiter=m.delimiter),b(m));return m.preview&&m.header&&r.preview++,n=e,s=new E(r),p=s.parse(n,t,i),g(),l?{meta:{paused:!0}}:p||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,s.abort(),n=U(m.chunk)?\"\":n.substring(s.getCharIndex())},this.resume=function(){i.streamer._halted?(l=!1,i.streamer.parseChunk(n,!0)):setTimeout(i.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,s.abort(),p.meta.aborted=!0,U(m.complete)&&m.complete(p),n=\"\"},this.guessLineEndings=function(e,t){e=e.substring(0,1048576);var t=new RegExp(P(t)+\"([^]*?)\"+P(t),\"gm\"),i=(e=e.replace(t,\"\")).split(\"\\r\"),t=e.split(\"\\n\"),e=1<t.length&&t[0].length<i[0].length;if(1===i.length||e)return\"\\n\";for(var r=0,n=0;n<i.length;n++)\"\\n\"===i[n][0]&&r++;return r>=i.length/2?\"\\r\\n\":\"\\r\"}}function P(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(C){var S=(C=C||{}).delimiter,O=C.newline,x=C.comments,I=C.step,A=C.preview,T=C.fastMode,D=null,L=!1,F=null==C.quoteChar?'\"':C.quoteChar,j=F;if(void 0!==C.escapeChar&&(j=C.escapeChar),(\"string\"!=typeof S||-1<v.BAD_DELIMITERS.indexOf(S))&&(S=\",\"),x===S)throw new Error(\"Comment character same as delimiter\");!0===x?x=\"#\":(\"string\"!=typeof x||-1<v.BAD_DELIMITERS.indexOf(x))&&(x=!1),\"\\n\"!==O&&\"\\r\"!==O&&\"\\r\\n\"!==O&&(O=\"\\n\");var z=0,M=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=S.length,s=O.length,a=x.length,o=U(I),h=[],u=[],d=[],f=z=0;if(!i)return w();if(T||!1!==T&&-1===i.indexOf(F)){for(var l=i.split(O),c=0;c<l.length;c++){if(d=l[c],z+=d.length,c!==l.length-1)z+=O.length;else if(r)return w();if(!x||d.substring(0,a)!==x){if(o){if(h=[],k(d.split(S)),R(),M)return w()}else k(d.split(S));if(A&&A<=c)return h=h.slice(0,A),w(!0)}}return w()}for(var p=i.indexOf(S,z),g=i.indexOf(O,z),_=new RegExp(P(j)+P(F),\"g\"),m=i.indexOf(F,z);;)if(i[z]===F)for(m=z,z++;;){if(-1===(m=i.indexOf(F,m+1)))return r||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:z}),E();if(m===n-1)return E(i.substring(z,m).replace(_,F));if(F===j&&i[m+1]===j)m++;else if(F===j||0===m||i[m-1]!==j){-1!==p&&p<m+1&&(p=i.indexOf(S,m+1));var y=v(-1===(g=-1!==g&&g<m+1?i.indexOf(O,m+1):g)?p:Math.min(p,g));if(i.substr(m+1+y,e)===S){d.push(i.substring(z,m).replace(_,F)),i[z=m+1+y+e]!==F&&(m=i.indexOf(F,z)),p=i.indexOf(S,z),g=i.indexOf(O,z);break}y=v(g);if(i.substring(m+1+y,m+1+y+s)===O){if(d.push(i.substring(z,m).replace(_,F)),b(m+1+y+s),p=i.indexOf(S,z),m=i.indexOf(F,z),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:z}),m++}}else if(x&&0===d.length&&i.substring(z,z+a)===x){if(-1===g)return w();z=g+s,g=i.indexOf(O,z),p=i.indexOf(S,z)}else if(-1!==p&&(p<g||-1===g))d.push(i.substring(z,p)),z=p+e,p=i.indexOf(S,z);else{if(-1===g)break;if(d.push(i.substring(z,g)),b(g+s),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0)}return E();function k(e){h.push(e),f=z}function v(e){var t=0;return t=-1!==e&&(e=i.substring(m+1,e))&&\"\"===e.trim()?e.length:t}function E(e){return r||(void 0===e&&(e=i.substring(z)),d.push(e),z=n,k(d),o&&R()),w()}function b(e){z=e,k(d),d=[],g=i.indexOf(O,z)}function w(e){if(C.header&&!t&&h.length&&!L){var s=h[0],a=Object.create(null),o=new Set(s);let n=!1;for(let r=0;r<s.length;r++){let i=s[r];if(a[i=U(C.transformHeader)?C.transformHeader(i,r):i]){let e,t=a[i];for(;e=i+\"_\"+t,t++,o.has(e););o.add(e),s[r]=e,a[i]++,n=!0,(D=null===D?{}:D)[e]=i}else a[i]=1,s[r]=i;o.add(i)}n&&console.warn(\"Duplicate headers found and renamed.\"),L=!0}return{data:h,errors:u,meta:{delimiter:S,linebreak:O,aborted:M,truncated:!!e,cursor:f+(t||0),renamedHeaders:D}}}function R(){I(w()),h=[],u=[]}},this.abort=function(){M=!0},this.getCharIndex=function(){return z}}function g(e){var t=e.data,i=o[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,_(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:m,resume:m};if(U(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else U(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&_(t.workerId,t.results)}function _(e,t){var i=o[e];U(i.userComplete)&&i.userComplete(t),i.terminate(),delete o[e]}function m(){throw new Error(\"Not implemented.\")}function b(e){if(\"object\"!=typeof e||null===e)return e;var t,i=Array.isArray(e)?[]:{};for(t in e)i[t]=b(e[t]);return i}function y(e,t){return function(){e.apply(t,arguments)}}function U(e){return\"function\"==typeof e}return v.parse=function(e,t){var i=(t=t||{}).dynamicTyping||!1;U(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!U(t.transform)&&t.transform,!t.worker||!v.WORKERS_SUPPORTED)return i=null,v.NODE_STREAM_INPUT,\"string\"==typeof e?(e=(e=>65279!==e.charCodeAt(0)?e:e.slice(1))(e),i=new(t.download?f:c)(t)):!0===e.readable&&U(e.read)&&U(e.on)?i=new p(t):(n.File&&e instanceof File||e instanceof Object)&&(i=new l(t)),i.stream(e);(i=(()=>{var e;return!!v.WORKERS_SUPPORTED&&(e=(()=>{var e=n.URL||n.webkitURL||null,t=r.toString();return v.BLOB_URL||(v.BLOB_URL=e.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",t,\")();\"],{type:\"text/javascript\"})))})(),(e=new n.Worker(e)).onmessage=g,e.id=h++,o[e.id]=e)})()).userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=U(t.step),t.chunk=U(t.chunk),t.complete=U(t.complete),t.error=U(t.error),delete t.worker,i.postMessage({input:e,config:t,workerId:i.id})},v.unparse=function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null,o=!1,h=((()=>{if(\"object\"==typeof t){if(\"string\"!=typeof t.delimiter||v.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter),\"boolean\"!=typeof t.quotes&&\"function\"!=typeof t.quotes&&!Array.isArray(t.quotes)||(n=t.quotes),\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines),\"string\"==typeof t.newline&&(y=t.newline),\"string\"==typeof t.quoteChar&&(s=t.quoteChar),\"boolean\"==typeof t.header&&(_=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s),t.escapeFormulae instanceof RegExp?o=t.escapeFormulae:\"boolean\"==typeof t.escapeFormulae&&t.escapeFormulae&&(o=/^[=+\\-@\\t\\r].*$/)}})(),new RegExp(P(s),\"g\"));\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||Object.keys(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||r),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function u(e,t,i){var r=\"\",n=(\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t)),Array.isArray(e)&&0<e.length),s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=k(e[a],a);0<t.length&&(r+=y)}for(var o=0;o<t.length;o++){var h=(n?e:t[o]).length,u=!1,d=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===i&&n){for(var f=[],l=0;l<h;l++){var c=s?e[l]:l;f.push(t[o][c])}u=\"\"===f.join(\"\").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!d&&(r+=m);var g=n&&s?e[p]:p;r+=k(t[o][g],p)}o<t.length-1&&(!i||0<h&&!d)&&(r+=y)}}return r}function k(e,t){var i,r;return null==e?\"\":e.constructor===Date?JSON.stringify(e).slice(1,25):(r=!1,o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0),i=e.toString().replace(h,a),(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||((e,t)=>{for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1})(i,v.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i)}},v.RECORD_SEP=String.fromCharCode(30),v.UNIT_SEP=String.fromCharCode(31),v.BYTE_ORDER_MARK=\"\\ufeff\",v.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',v.BYTE_ORDER_MARK],v.WORKERS_SUPPORTED=!s&&!!n.Worker,v.NODE_STREAM_INPUT=1,v.LocalChunkSize=10485760,v.RemoteChunkSize=5242880,v.DefaultDelimiter=\",\",v.Parser=E,v.ParserHandle=i,v.NetworkStreamer=f,v.FileStreamer=l,v.StringStreamer=c,v.ReadableStreamStreamer=p,n.jQuery&&((d=n.jQuery).fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&n.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0===h.length)U(o.complete)&&o.complete();else{var e,t,i,r,n=h[0];if(U(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(U(o.error)&&o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){U(a)&&a(e,n.file,n.inputElem),u()},v.parse(n.file,n.instanceConfig)}}function u(){h.splice(0,1),e()}}),a&&(n.onmessage=function(e){e=e.data;void 0===v.WORKER_ID&&e&&(v.WORKER_ID=e.workerId);\"string\"==typeof e.input?n.postMessage({workerId:v.WORKER_ID,results:v.parse(e.input,e.config),finished:!0}):(n.File&&e.input instanceof File||e.input instanceof Object)&&(e=v.parse(e.input,e.config))&&n.postMessage({workerId:v.WORKER_ID,results:e,finished:!0})}),(f.prototype=Object.create(u.prototype)).constructor=f,(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(c.prototype)).constructor=c,(p.prototype=Object.create(u.prototype)).constructor=p,v});", "import * as Papa from 'papaparse';\nimport { Env, UploadResponse, QueryRequest, QueryResponse } from './types';\nimport { generateUUID, inferSchema, createFallbackChart, analyzeDataWithAI, analyzeWithDuckDB } from './utils';\n\n// ===== SYSTEM PROMPTS FOR AI INTERACTIONS =====\n\nconst SYSTEM_PROMPTS = {\n  REASONING_ANALYSIS: `You are an Expert Data Visualization Strategist and UX Designer specializing in choosing optimal chart types for data storytelling.\n\nROLE & CONTEXT:\n- You analyze user requests and dataset characteristics to recommend the best visualization approach\n- Your goal is to maximize data clarity, insight discovery, and visual impact\n- You consider both technical data properties and human perception principles\n\nINPUT FORMAT:\n- User's natural language request for a visualization\n- Complete dataset schema with column types and statistics\n- Sample data showing actual values and patterns\n- Existing statistical insights and patterns from previous analysis\n\nREASONING PROCESS:\n1. Parse user intent - what story are they trying to tell?\n2. Assess data suitability - which columns best answer their question?\n3. Consider visualization best practices - what chart type reveals patterns most clearly?\n4. Evaluate alternatives - what other approaches might work?\n5. Predict outcome - what insights will this visualization provide?\n\nOUTPUT REQUIREMENTS:\n- Return ONLY valid JSON with the exact structure specified\n- Provide detailed reasoning that shows your thought process\n- Recommend the single best chart type for the user's goal\n- Identify 2-3 primary variables that should be visualized\n- List key considerations that influenced your decision\n- Suggest 2+ alternative approaches for comparison\n- Explain what insights the user should expect to gain\n\nCHART TYPE SELECTION CRITERIA:\n- Bar charts: Comparing categories, rankings, discrete values\n- Line charts: Time series, trends, continuous progression\n- Scatter plots: Correlations, relationships between 2+ variables\n- Pie charts: Parts of a whole, percentage distributions (max 8 categories)\n- Histograms: Distribution analysis, frequency patterns\n- Heatmaps: Correlation matrices, intensity patterns\n- Box plots: Distribution comparison, outlier analysis\n\nCRITICAL: Always return valid JSON. Focus on the \"why\" behind your recommendations.`,\n\n  CHART_GENERATION: `You are a Senior Data Visualization Engineer specializing in Plotly.js chart specifications with expertise in creating professional, interactive visualizations.\n\nROLE & CONTEXT:\n- You create production-ready Plotly.js chart specifications based on analysis and reasoning\n- Your charts must be visually appealing, technically accurate, and optimally configured\n- You follow modern visualization design principles and accessibility standards\n\nINPUT FORMAT:\n- Previous AI reasoning analysis with recommended chart type and variables\n- Complete dataset schema with statistical context\n- Sample data rows with actual values\n- User's original visualization request\n\nIMPLEMENTATION REQUIREMENTS:\n- Generate ONLY valid Plotly.js JSON specification\n- Use the exact chart type recommended in the reasoning analysis\n- Populate x/y arrays with actual data from the sample provided\n- Apply professional styling with appropriate colors and fonts\n- Include meaningful titles, axis labels, and formatting\n\nTECHNICAL SPECIFICATIONS:\n- Colors: Use professional palette starting with #667eea\n- Fonts: Size 16 for titles, 12-14 for labels, color #333\n- Margins: Standard t:60, b:60, l:60, r:40 unless chart needs more space\n- Responsiveness: Charts must work on mobile and desktop\n- Accessibility: Include proper titles and labels for screen readers\n\nCHART-SPECIFIC GUIDELINES:\n- Bar charts: Sort by value when logical, limit to top 10-15 categories\n- Line charts: Sort by x-axis chronologically, smooth lines for trends\n- Scatter plots: Include proper axis scaling, consider trend lines\n- Pie charts: Limit to 8 segments, combine small segments into \"Others\"\n- Heatmaps: Use diverging color scales, include color bar legends\n- Histograms: Choose appropriate bin sizes, show distribution shape clearly\n\nQUALITY STANDARDS:\n- Charts must accurately represent the data without distortion\n- Visual hierarchy should guide the viewer's attention appropriately\n- Interactive features should enhance, not overwhelm the experience\n- Performance: Charts should render quickly with sample data sizes\n\nCRITICAL: Return ONLY the Plotly.js JSON specification. No markdown, no explanations, no additional text.`\n};\n\nexport async function uploadCsvHandler(request: Request, env: Env): Promise<Response> {\n  console.log(\"\uD83D\uDCE5 uploadCsvHandler v2: Phase 1 upgrade with DuckDB and R2 storage\");\n  \n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    \n    if (!file) {\n      console.error(\"\u274C No file provided in request\");\n      return new Response(JSON.stringify({ error: 'No file provided' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // 1. Get the file content as an ArrayBuffer for efficiency\n    console.log(\"\uD83D\uDCC1 Processing uploaded file:\", file.name, \"Size:\", file.size, \"bytes\");\n    const fileBuffer = await file.arrayBuffer();\n    const csvText = new TextDecoder().decode(fileBuffer);\n    console.log(\"\uD83D\uDCC4 CSV text length:\", csvText.length, \"characters\");\n    \n    // 2. Parse CSV text using PapaParse (as before)\n    console.log(\"\uD83D\uDD27 Parsing CSV data...\");\n    const parseResult = Papa.parse(csvText, {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true\n    });\n    \n    if (parseResult.errors.length > 0) {\n      console.error(\"\u274C CSV parsing errors:\", parseResult.errors);\n      return new Response(JSON.stringify({ \n        error: 'CSV parsing failed', \n        details: parseResult.errors.slice(0, 5) // Limit error details\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const data = parseResult.data as any[];\n    const schema = inferSchema(data);\n    const sampleRows = data.slice(0, 10);\n    const datasetId = generateUUID();\n    \n    console.log(`\uD83D\uDCCA Parsed data: ${data.length} rows, ${schema.length} columns`);\n    console.log(`\uD83D\uDD11 Generated dataset ID: ${datasetId}`);\n    \n    // 3. Convert parsed JSON data to efficient format for R2 storage\n    console.log(\"\uD83D\uDCE6 Preparing data for R2 storage...\");\n    const jsonBuffer = new TextEncoder().encode(JSON.stringify(data));\n    console.log(`\uD83D\uDCE6 JSON buffer created, size: ${jsonBuffer.byteLength} bytes`);\n    \n    // 4. Upload the JSON data to R2 for scalable storage\n    console.log(`\u2601\uFE0F Uploading JSON data to R2 with ID: ${datasetId}`);\n    await env.R2_BUCKET.put(datasetId, jsonBuffer, {\n      httpMetadata: {\n        contentType: 'application/json'\n      },\n      customMetadata: {\n        originalFileName: file.name,\n        rowCount: data.length.toString(),\n        columnCount: schema.length.toString(),\n        uploadTimestamp: new Date().toISOString(),\n        compressionRatio: (csvText.length / jsonBuffer.byteLength).toFixed(2)\n      }\n    });\n    console.log(\"\u2705 Data successfully stored in R2\");\n    \n    // 5. Perform enhanced statistical analysis on the full dataset\n    console.log(\"\uD83D\uDCCA Starting enhanced statistical analysis on full dataset...\");\n    const duckDbAnalysis = await analyzeWithDuckDB(data, env);\n    console.log(\"\u2705 Enhanced statistical analysis completed\");\n    \n    // 6. Perform the higher-level AI analysis (as before)\n    // The AI now gets a much richer context from the enhanced statistical analysis!\n    console.log(\"\uD83D\uDD0D Starting AI analysis with enhanced statistical context...\");\n    const analysis = await analyzeDataWithAI(schema, sampleRows, env);\n    analysis.duckDbAnalysis = duckDbAnalysis; // Attach enhanced statistical results\n    console.log(\"\u2705 AI analysis completed with enhanced context\");\n    \n    // 7. Store metadata in KV (the large data is now in R2)\n    console.log(\"\uD83D\uDCBE Storing metadata in KV...\");\n    await Promise.all([\n      env.KV.put(`${datasetId}:schema`, JSON.stringify(schema)),\n      env.KV.put(`${datasetId}:sample`, JSON.stringify(sampleRows)),\n      env.KV.put(`${datasetId}:analysis`, JSON.stringify(analysis)),\n      // We no longer store the full CSV in KV - it's efficiently stored in R2 as JSON\n    ]);\n    console.log(`\u2705 Metadata stored in KV with dataset ID: ${datasetId}`);\n    \n    // 8. Return the enhanced response to the frontend\n    const response: UploadResponse = {\n      datasetId,\n      schema,\n      sampleRows,\n      analysis,\n      duckDbAnalysis\n    };\n    \n    console.log(`\uD83C\uDF89 Upload process completed successfully for dataset ${datasetId}`);\n    console.log(`\uD83D\uDCC8 Enhanced with ${duckDbAnalysis.summary.length} statistical summaries`);\n    \n    return new Response(JSON.stringify(response), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error(\"\u274C Upload error:\", error);\n    console.error(\"\u274C Error stack:\", error.stack);\n    \n    return new Response(JSON.stringify({ \n      error: 'Internal server error',\n      details: error.message,\n      timestamp: new Date().toISOString()\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\nasync function performAIReasoning(prompt: string, schema: any[], sampleRows: any[], analysis: any, env: any): Promise<any> {\n  const reasoningPrompt = `${SYSTEM_PROMPTS.REASONING_ANALYSIS}\n\nVISUALIZATION REASONING REQUEST:\n\nUSER'S REQUEST: \"${prompt}\"\n\nDATASET SCHEMA & CONTEXT:\n${JSON.stringify(schema.map(col => ({name: col.name, type: col.type, stats: col.stats})), null, 2)}\n\nSAMPLE DATA FOR REFERENCE:\n${JSON.stringify(sampleRows.slice(0, 8), null, 2)}\n\n${analysis ? `EXISTING ANALYSIS INSIGHTS:\nSummary: ${analysis.summary}\nKey Patterns: ${analysis.insights.slice(0, 3).join(' | ')}\nData Quality: ${analysis.dataQuality.completeness}% complete\n${analysis.patterns ? `Detected Patterns: ${analysis.patterns.trends.concat(analysis.patterns.distributions.map(d => `${d.column} distribution`)).join(', ')}` : ''}\n${analysis.businessInsights ? `Business Context: ${analysis.businessInsights.slice(0, 2).join(' | ')}` : ''}\n` : ''}\n\nREQUIRED JSON OUTPUT FORMAT:\n{\n  \"reasoning\": \"Step-by-step analysis of user intent, data characteristics, and optimal visualization strategy\",\n  \"recommendedChartType\": \"single_best_chart_type\",\n  \"primaryVariables\": [\"most_relevant_column1\", \"most_relevant_column2\"],\n  \"considerations\": [\"data_suitability_factor\", \"visualization_best_practice\", \"user_intent_factor\"],\n  \"dataInsights\": \"how the data characteristics inform this visualization choice\",\n  \"alternativeApproaches\": [\"alternative_chart_type_1\", \"alternative_chart_type_2\"],\n  \"expectedOutcome\": \"specific insights the user will gain from this visualization\"\n}\n\nANALYSIS FRAMEWORK:\n1. Parse user intent - what specific question are they trying to answer?\n2. Evaluate data fitness - which columns best support this analysis?\n3. Apply visualization principles - what chart type maximizes clarity and insight?\n4. Consider data limitations - any quality issues or constraints?\n5. Predict value - what actionable insights will this reveal?`;\n\n  try {\n    const response = await env.AI.run('@cf/qwen/qwq-32b', {\n      prompt: reasoningPrompt,\n      max_tokens: 800\n    });\n    \n    let responseText = response.response || response.choices?.[0]?.text || response;\n    if (typeof responseText === 'string') {\n      responseText = responseText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '').trim();\n      \n      // Handle QwQ model's thinking process output\n      const thinkEndIndex = responseText.lastIndexOf('</think>');\n      if (thinkEndIndex !== -1) {\n        responseText = responseText.substring(thinkEndIndex + 8).trim();\n      }\n      \n      // Extract JSON object if there's extra text\n      const jsonStart = responseText.indexOf('{');\n      const jsonEnd = responseText.lastIndexOf('}');\n      if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n        responseText = responseText.substring(jsonStart, jsonEnd + 1);\n      }\n    }\n    \n    const reasoning = JSON.parse(responseText);\n    console.log(\"\uD83E\uDDE0 AI Reasoning:\", reasoning.reasoning);\n    return reasoning;\n    \n  } catch (error) {\n    console.error('AI reasoning failed:', error);\n    return {\n      reasoning: \"Analyzing user request for appropriate visualization approach\",\n      recommendedChartType: \"bar\",\n      primaryVariables: schema.filter(col => col.type === 'number').slice(0, 2).map(col => col.name),\n      considerations: [\"Data availability\", \"Chart readability\", \"User intent\"],\n      dataInsights: \"Basic data overview needed\",\n      alternativeApproaches: [\"histogram\", \"scatter\"],\n      expectedOutcome: \"Visual representation of the requested data pattern\"\n    };\n  }\n}\n\nexport async function queryHandler(request: Request, env: Env): Promise<Response> {\n  console.log(\"\uD83D\uDD0D queryHandler: request:\", request.url);\n  \n  try {\n    const { datasetId, prompt }: QueryRequest = await request.json();\n    console.log(\"Using dataset:\", datasetId, \"prompt:\", prompt);\n    \n    const [schemaStr, sampleRowsStr, analysisStr] = await Promise.all([\n      env.KV.get(`${datasetId}:schema`),\n      env.KV.get(`${datasetId}:sample`),\n      env.KV.get(`${datasetId}:analysis`)\n    ]);\n    \n    if (!schemaStr || !sampleRowsStr) {\n      return new Response(JSON.stringify({ error: 'Dataset not found' }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const schema = JSON.parse(schemaStr);\n    const sampleRows = JSON.parse(sampleRowsStr);\n    const analysis = analysisStr ? JSON.parse(analysisStr) : null;\n    \n    // Step 1: AI Reasoning/Thinking Phase\n    console.log(\"\uD83E\uDD14 AI is analyzing the request and data context...\");\n    const reasoningResponse = await performAIReasoning(prompt, schema, sampleRows, analysis, env);\n    console.log(\"\u2705 AI reasoning completed:\", reasoningResponse.reasoning);\n    \n    // Step 2: Chart Generation with Reasoning Context\n    console.log(\"\uD83C\uDFA8 Generating chart based on AI reasoning...\");\n    const structuredPrompt = `${SYSTEM_PROMPTS.CHART_GENERATION}\n\nCHART IMPLEMENTATION REQUEST:\n\nUSER'S ORIGINAL REQUEST: \"${prompt}\"\n\nPREVIOUS AI REASONING ANALYSIS:\nReasoning: ${reasoningResponse.reasoning}\nRecommended Chart Type: ${reasoningResponse.recommendedChartType}\nPrimary Variables: ${reasoningResponse.primaryVariables.join(', ')}\nKey Considerations: ${reasoningResponse.considerations.join(', ')}\nExpected Outcome: ${reasoningResponse.expectedOutcome}\n\nDATASET SCHEMA WITH STATISTICS:\n${JSON.stringify(schema.map(col => ({name: col.name, type: col.type, stats: col.stats})), null, 2)}\n\nSAMPLE DATA FOR IMPLEMENTATION:\n${JSON.stringify(sampleRows.slice(0, 10), null, 2)}\n\n${analysis ? `STATISTICAL CONTEXT TO INCORPORATE:\nBusiness Insights: ${analysis.insights.slice(0, 3).join(' | ')}\n${analysis.patterns ? `\nKey Patterns:\n- Trends: ${analysis.patterns.trends.join(', ')}\n- Distributions: ${analysis.patterns.distributions.map(d => `${d.column} (${d.type})`).join(', ')}\n` : ''}` : ''}\n\nIMPLEMENTATION REQUIREMENTS:\n- Chart Type: ${reasoningResponse.recommendedChartType}\n- Primary Variables: ${reasoningResponse.primaryVariables.join(' and ')}\n- Use actual sample data values to populate x/y arrays\n- Apply professional styling with gradient colors starting with #667eea\n- Include meaningful titles and axis labels based on the analysis context\n- Ensure chart tells the story identified in the reasoning phase\n\nRETURN ONLY PLOTLY.JS JSON SPECIFICATION - NO MARKDOWN, NO EXPLANATIONS:`;\n\n    const aiResponse = await env.AI.run('@cf/qwen/qwq-32b', {\n      prompt: structuredPrompt,\n      max_tokens: 1024\n    });\n    \n    console.log(\"LLM response received\");\n    \n    let chartSpec;\n    try {\n      let responseText = aiResponse.response || aiResponse.choices?.[0]?.text || aiResponse;\n      \n      // Clean up the response - remove markdown code blocks, thinking tags, and extra text\n      if (typeof responseText === 'string') {\n        responseText = responseText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '').trim();\n        \n        // Handle QwQ model's thinking process output\n        const thinkEndIndex = responseText.lastIndexOf('</think>');\n        if (thinkEndIndex !== -1) {\n          responseText = responseText.substring(thinkEndIndex + 8).trim();\n        }\n        \n        // Extract JSON object if there's extra text\n        const jsonStart = responseText.indexOf('{');\n        const jsonEnd = responseText.lastIndexOf('}');\n        if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n          responseText = responseText.substring(jsonStart, jsonEnd + 1);\n        }\n      }\n      \n      console.debug(\"Cleaned AI response:\", responseText);\n      chartSpec = JSON.parse(responseText);\n    } catch (parseError) {\n      console.error(\"Failed to parse AI response:\", parseError);\n      console.error(\"Raw AI response:\", aiResponse);\n      \n      // Use fallback chart when AI response parsing fails\n      console.log(\"Using fallback chart generation\");\n      chartSpec = createFallbackChart(schema, sampleRows);\n    }\n    \n    console.debug(\"Parsed chart spec:\", chartSpec);\n    \n    const response: QueryResponse = {\n      chartSpec,\n      reasoning: reasoningResponse,\n      logs: ['AI reasoning completed', 'Chart specification generated successfully']\n    };\n    \n    return new Response(JSON.stringify(response), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error(\"Query error:\", error);\n    return new Response(JSON.stringify({ \n      error: 'Internal server error',\n      logs: ['Query processing failed']\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}", "import { ColumnSchema, ColumnStats, DataAnalysis, DuckDBAnalysis } from './types';\n\n// ===== SYSTEM PROMPTS FOR AI INTERACTIONS =====\n\nconst SYSTEM_PROMPTS = {\n  DATA_ANALYSIS: `You are a Senior Data Scientist and Business Intelligence Expert specializing in automated data discovery and insight generation.\n\nCORE EXPERTISE:\n- Statistical pattern recognition and anomaly detection\n- Business metric identification and KPI analysis  \n- Data quality assessment and improvement recommendations\n- Automated insight generation for non-technical stakeholders\n\nANALYSIS FRAMEWORK:\n1. DATA CHARACTERIZATION: Identify data types, distributions, and structural patterns\n2. BUSINESS CONTEXT DETECTION: Recognize business metrics, KPIs, and operational data\n3. STATISTICAL SIGNIFICANCE: Calculate correlations, trends, and outliers with confidence intervals\n4. ACTIONABLE INSIGHTS: Generate specific, implementable business recommendations\n5. VISUALIZATION STRATEGY: Recommend optimal chart types based on data characteristics and user intent\n\nINPUT ANALYSIS PRIORITIES:\n- Identify primary business metrics (revenue, sales, profit, costs, performance indicators)\n- Detect temporal patterns and seasonality in time-series data\n- Recognize categorical segments and their performance variations\n- Calculate statistical significance of patterns and relationships\n- Assess data completeness, consistency, and potential quality issues\n\nOUTPUT REQUIREMENTS:\n- Return ONLY valid JSON with precise statistical measurements\n- Provide quantified insights with specific metrics and percentages\n- Identify top 3-5 most significant patterns with business impact\n- Generate contextually relevant visualization recommendations\n- Create actionable suggested questions based on actual data patterns\n\nCRITICAL: Focus on data-driven insights, not generic observations. All insights must be verifiable from the provided data.`,\n\n  REASONING_ANALYSIS: `You are an Expert Data Visualization Strategist specializing in evidence-based chart selection and statistical storytelling.\n\nVISUALIZATION SELECTION METHODOLOGY:\n1. INTENT ANALYSIS: Decode user's analytical objective (comparison, distribution, correlation, trend, composition)\n2. DATA SUITABILITY: Assess statistical properties, sample size, and data quality constraints\n3. PERCEPTUAL EFFECTIVENESS: Apply Cleveland-McGill hierarchy and gestalt principles\n4. CONTEXT OPTIMIZATION: Consider audience, complexity, and actionability requirements\n\nCHART TYPE DECISION MATRIX:\n- COMPARISON (categorical): Bar charts (vertical for <7 categories, horizontal for >7), dot plots for precision\n- TEMPORAL (time-series): Line charts for continuous trends, step charts for discrete events\n- CORRELATION (numeric pairs): Scatter plots with trend lines, bubble charts for 3D relationships  \n- DISTRIBUTION (single variable): Histograms for continuous, box plots for quartile analysis\n- COMPOSITION (part-to-whole): Pie charts for <6 segments, stacked bars for temporal composition\n- RANKING (ordered categories): Horizontal bar charts sorted by value\n- MULTIDIMENSIONAL: Heatmaps for matrices, small multiples for faceted analysis\n\nSTATISTICAL VALIDATION CRITERIA:\n- Minimum sample size: 5+ data points for meaningful visualization\n- Category limits: 2-12 categories for optimal cognitive processing\n- Correlation threshold: |r| > 0.3 for scatter plot recommendations\n- Distribution analysis: Test for normality, skewness, and outlier presence\n- Temporal requirements: Chronological ordering and consistent intervals\n\nOUTPUT REQUIREMENTS:\n- Provide quantitative reasoning with statistical justification\n- Recommend primary chart type with confidence scoring\n- Identify optimal variables based on statistical significance\n- Explain expected insights with specificity and measurability\n- Include alternative approaches with comparative analysis\n\nCRITICAL: Base all recommendations on statistical evidence and visualization research principles.`,\n\n  CHART_GENERATION: `You are a Senior Data Visualization Engineer specializing in production-ready Plotly.js implementations with expertise in statistical graphics and interactive design.\n\nTECHNICAL IMPLEMENTATION STANDARDS:\n- Generate statistically accurate, publication-quality visualizations\n- Apply evidence-based design principles (Tufte, Cleveland, Few)\n- Ensure accessibility compliance (WCAG 2.1 AA) with proper contrast and labeling\n- Optimize for both desktop and mobile rendering performance\n\nPLOTLY.JS SPECIFICATION REQUIREMENTS:\n- Create complete, valid JSON specifications with proper data binding\n- Use actual sample data values with appropriate data transformations\n- Implement responsive layouts with intelligent margin calculations\n- Apply consistent color palettes with semantic meaning\n\nVISUAL DESIGN PRINCIPLES:\n- HIGH DATA-INK RATIO: Minimize chartjunk, maximize information density\n- PERCEPTUAL ACCURACY: Use position/length encodings over color/area when possible\n- CLEAR HIERARCHY: Guide attention through size, contrast, and positioning\n- CONTEXTUAL ANNOTATIONS: Include statistical summaries (mean, median, trends) when relevant\n\nCHART-SPECIFIC OPTIMIZATION:\n- BAR CHARTS: Sort by value, highlight key insights, use consistent baselines\n- LINE CHARTS: Show confidence intervals, trend lines, and seasonal patterns\n- SCATTER PLOTS: Include correlation coefficients, regression lines, density overlays\n- HISTOGRAMS: Optimize bin width using Freedman-Diaconis rule, show distribution statistics\n- PIE CHARTS: Limit to 5-6 segments, order by size, highlight largest segment\n- HEATMAPS: Use perceptually uniform color scales, include correlation values\n\nINTERACTIVITY & PERFORMANCE:\n- Implement hover tooltips with contextual statistics\n- Enable zoom/pan for dense datasets\n- Optimize rendering for sample sizes up to 10,000 points\n- Include download/export capabilities\n\nCRITICAL: Return ONLY complete Plotly.js JSON specification. Ensure mathematical accuracy and visual clarity.`\n};\n\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nexport function inferSchema(data: any[]): ColumnSchema[] {\n  if (data.length === 0) return [];\n  \n  const firstRow = data[0];\n  const schema: ColumnSchema[] = [];\n  \n  for (const [key, value] of Object.entries(firstRow)) {\n    let type = 'string';\n    \n    if (typeof value === 'number' || !isNaN(Number(value))) {\n      type = 'number';\n    } else if (typeof value === 'boolean' || value === 'true' || value === 'false') {\n      type = 'boolean';\n    } else if (value && typeof value === 'string' && !isNaN(Date.parse(value))) {\n      type = 'date';\n    }\n    \n    const stats = calculateColumnStats(data, key, type);\n    schema.push({ name: key, type, stats });\n  }\n  \n  return schema;\n}\n\nexport function calculateColumnStats(data: any[], columnName: string, type: string): ColumnStats {\n  const values = data.map(row => row[columnName]).filter(val => val !== null && val !== undefined && val !== '');\n  const nullCount = data.length - values.length;\n  const uniqueValues = [...new Set(values)];\n  \n  const stats: ColumnStats = {\n    count: values.length,\n    nullCount,\n    uniqueCount: uniqueValues.length\n  };\n  \n  if (type === 'number') {\n    const numValues = values.map(v => Number(v)).filter(v => !isNaN(v));\n    if (numValues.length > 0) {\n      stats.min = Math.min(...numValues);\n      stats.max = Math.max(...numValues);\n      stats.mean = numValues.reduce((a, b) => a + b, 0) / numValues.length;\n      \n      const sorted = [...numValues].sort((a, b) => a - b);\n      const mid = Math.floor(sorted.length / 2);\n      stats.median = sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n      \n      const variance = numValues.reduce((acc, val) => acc + Math.pow(val - stats.mean!, 2), 0) / numValues.length;\n      stats.stdDev = Math.sqrt(variance);\n    }\n  } else {\n    const valueCounts = values.reduce((acc, val) => {\n      acc[val] = (acc[val] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const sortedCounts = Object.entries(valueCounts).sort(([,a], [,b]) => b - a);\n    if (sortedCounts.length > 0) {\n      stats.mode = sortedCounts[0][0];\n      stats.distribution = sortedCounts.slice(0, 10).map(([value, count]) => ({ value, count }));\n    }\n  }\n  \n  return stats;\n}\n\nexport async function analyzeDataWithAI(schema: ColumnSchema[], sampleRows: any[], env: any): Promise<DataAnalysis> {\n  const detailedStats = generateDetailedStats(schema, sampleRows);\n  \n  const analysisPrompt = `${SYSTEM_PROMPTS.DATA_ANALYSIS}\n\nDATASET ANALYSIS REQUEST:\n\nSCHEMA WITH STATISTICS:\n${JSON.stringify(schema, null, 2)}\n\nSAMPLE DATA ROWS:\n${JSON.stringify(sampleRows.slice(0, 10), null, 2)}\n\nDETAILED STATISTICAL ANALYSIS:\n${JSON.stringify(detailedStats, null, 2)}\n\nREQUIRED JSON OUTPUT SCHEMA:\n{\n  \"summary\": \"Business-focused description of dataset purpose and key characteristics\",\n  \"insights\": [\"Specific actionable insight 1\", \"Specific actionable insight 2\", \"Pattern insight 3\", \"Quality insight 4\", \"Business insight 5\"],\n  \"correlations\": [{\"column1\": \"col1\", \"column2\": \"col2\", \"correlation\": 0.8}],\n  \"recommendations\": [\"Specific visualization recommendation 1\", \"Data improvement recommendation 2\", \"Analysis approach recommendation 3\"],\n  \"dataQuality\": {\n    \"completeness\": 85,\n    \"consistency\": 90,\n    \"issues\": [\"Specific issue 1\", \"Specific issue 2\"]\n  },\n  \"patterns\": {\n    \"trends\": [\"Specific trend pattern 1\", \"Specific trend pattern 2\"],\n    \"outliers\": [{\"column\": \"column_name\", \"values\": [outlier_values]}],\n    \"seasonality\": [\"Seasonal pattern description\"],\n    \"distributions\": [{\"column\": \"column_name\", \"type\": \"distribution_type\", \"description\": \"Business interpretation\"}]\n  },\n  \"businessInsights\": [\"Business insight 1\", \"Opportunity insight 2\", \"Risk insight 3\"],\n  \"suggestedPrompts\": [\n    {\"prompt\": \"Specific question based on your data\", \"category\": \"Analysis_Type\", \"description\": \"What this reveals\", \"chartType\": \"optimal_chart_type\"},\n    {\"prompt\": \"Another specific question\", \"category\": \"Analysis_Type\", \"description\": \"What this reveals\", \"chartType\": \"optimal_chart_type\"},\n    {\"prompt\": \"Third specific question\", \"category\": \"Analysis_Type\", \"description\": \"What this reveals\", \"chartType\": \"optimal_chart_type\"}\n  ]\n}\n\nANALYSIS FOCUS AREAS:\n- Identify specific business opportunities and risks in the data\n- Detect unusual patterns, outliers, and correlations with business implications\n- Assess data quality issues that could impact decision-making\n- Generate visualization suggestions tailored to the actual data patterns\n- Create specific, answerable questions based on the dataset's unique characteristics`;\n\n  try {\n    const aiResponse = await env.AI.run('@cf/qwen/qwq-32b', {\n      prompt: analysisPrompt,\n      max_tokens: 1536\n    });\n    \n    let responseText = aiResponse.response || aiResponse.choices?.[0]?.text || aiResponse;\n    if (typeof responseText === 'string') {\n      responseText = responseText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '').trim();\n      \n      // Handle QwQ model's thinking process output\n      const thinkEndIndex = responseText.lastIndexOf('</think>');\n      if (thinkEndIndex !== -1) {\n        responseText = responseText.substring(thinkEndIndex + 8).trim();\n      }\n      \n      // Extract JSON object if there's extra text\n      const jsonStart = responseText.indexOf('{');\n      const jsonEnd = responseText.lastIndexOf('}');\n      if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n        responseText = responseText.substring(jsonStart, jsonEnd + 1);\n      }\n    }\n    \n    const aiAnalysis = JSON.parse(responseText);\n    \n    // Generate automatic charts\n    const autoCharts = await generateAutoCharts(schema, sampleRows, aiAnalysis, env);\n    aiAnalysis.autoCharts = autoCharts;\n    \n    return aiAnalysis;\n  } catch (error) {\n    console.error('AI analysis failed:', error);\n    return await createFallbackAnalysis(schema, sampleRows);\n  }\n}\n\nfunction generateDetailedStats(schema: ColumnSchema[], sampleRows: any[]): any {\n  const stats: any = {\n    overview: {\n      totalRows: sampleRows.length,\n      totalColumns: schema.length,\n      numericColumns: schema.filter(col => col.type === 'number').length,\n      categoricalColumns: schema.filter(col => col.type === 'string').length,\n      dateColumns: schema.filter(col => col.type === 'date').length,\n      memoryFootprint: JSON.stringify(sampleRows).length\n    },\n    columnDetails: {},\n    dataQuality: {\n      overallCompleteness: 0,\n      duplicateRows: 0,\n      emptyRows: 0\n    },\n    advancedAnalytics: {\n      outlierColumns: [],\n      skewedDistributions: [],\n      possibleCategoricalEncoding: [],\n      timeSeriesColumns: []\n    }\n  };\n  \n  let totalCells = 0;\n  let emptyCells = 0;\n  \n  // Analyze each column in detail\n  for (const col of schema) {\n    const values = sampleRows.map(row => row[col.name]);\n    const nonEmptyValues = values.filter(v => v !== null && v !== undefined && v !== '');\n    const emptyCount = values.length - nonEmptyValues.length;\n    \n    totalCells += values.length;\n    emptyCells += emptyCount;\n    \n    stats.columnDetails[col.name] = {\n      type: col.type,\n      sampleSize: nonEmptyValues.length,\n      uniqueValues: [...new Set(nonEmptyValues)].length,\n      uniquenessRatio: nonEmptyValues.length > 0 ? [...new Set(nonEmptyValues)].length / nonEmptyValues.length : 0,\n      missingCount: emptyCount,\n      missingPercentage: (emptyCount / values.length) * 100,\n      ...col.stats\n    };\n    \n    // Advanced numeric analysis\n    if (col.type === 'number') {\n      const nums = nonEmptyValues.map(v => Number(v)).filter(v => !isNaN(v));\n      if (nums.length > 0) {\n        const mean = nums.reduce((a, b) => a + b, 0) / nums.length;\n        const variance = nums.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / nums.length;\n        const skewness = calculateSkewness(nums, mean, Math.sqrt(variance));\n        const kurtosis = calculateKurtosis(nums, mean, Math.sqrt(variance));\n        const outliers = detectOutliers(nums);\n        \n        stats.columnDetails[col.name] = {\n          ...stats.columnDetails[col.name],\n          range: Math.max(...nums) - Math.min(...nums),\n          variance,\n          standardDeviation: Math.sqrt(variance),\n          skewness,\n          kurtosis,\n          outlierCount: outliers.length,\n          outlierPercentage: (outliers.length / nums.length) * 100,\n          quartiles: calculateQuartiles(nums),\n          coefficientOfVariation: mean !== 0 ? Math.sqrt(variance) / mean : 0\n        };\n        \n        if (Math.abs(skewness) > 1) {\n          stats.advancedAnalytics.skewedDistributions.push({\n            column: col.name,\n            skewness: skewness.toFixed(3),\n            direction: skewness > 0 ? 'right' : 'left'\n          });\n        }\n        \n        if (outliers.length > nums.length * 0.05) {\n          stats.advancedAnalytics.outlierColumns.push({\n            column: col.name,\n            outlierCount: outliers.length,\n            percentage: ((outliers.length / nums.length) * 100).toFixed(1)\n          });\n        }\n      }\n    }\n    \n    // Advanced categorical analysis\n    if (col.type === 'string') {\n      const valueCounts = nonEmptyValues.reduce((acc, val) => {\n        acc[val] = (acc[val] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n      \n      const sortedCounts = Object.entries(valueCounts).sort(([,a], [,b]) => b - a);\n      const entropy = calculateEntropy(Object.values(valueCounts));\n      \n      stats.columnDetails[col.name] = {\n        ...stats.columnDetails[col.name],\n        topValues: sortedCounts.slice(0, 5),\n        entropy: entropy,\n        concentrationRatio: sortedCounts.length > 0 ? sortedCounts[0][1] / nonEmptyValues.length : 0,\n        averageLength: nonEmptyValues.reduce((acc, val) => acc + val.toString().length, 0) / nonEmptyValues.length\n      };\n      \n      // Check if might be encoded categorical\n      if (nonEmptyValues.every(val => !isNaN(Number(val))) && [...new Set(nonEmptyValues)].length < 20) {\n        stats.advancedAnalytics.possibleCategoricalEncoding.push({\n          column: col.name,\n          uniqueValues: [...new Set(nonEmptyValues)].length,\n          suggestion: 'This numeric column might represent categories'\n        });\n      }\n    }\n    \n    // Date column analysis\n    if (col.type === 'date') {\n      const dates = nonEmptyValues.map(v => new Date(v)).filter(d => !isNaN(d.getTime()));\n      if (dates.length > 0) {\n        const sortedDates = dates.sort((a, b) => a.getTime() - b.getTime());\n        const dateRange = sortedDates[sortedDates.length - 1].getTime() - sortedDates[0].getTime();\n        const daysDifference = dateRange / (1000 * 60 * 60 * 24);\n        \n        stats.columnDetails[col.name] = {\n          ...stats.columnDetails[col.name],\n          earliestDate: sortedDates[0].toISOString().split('T')[0],\n          latestDate: sortedDates[sortedDates.length - 1].toISOString().split('T')[0],\n          dateRange: `${Math.round(daysDifference)} days`,\n          frequency: analyzeDateFrequency(dates)\n        };\n        \n        stats.advancedAnalytics.timeSeriesColumns.push({\n          column: col.name,\n          range: `${Math.round(daysDifference)} days`,\n          frequency: analyzeDateFrequency(dates)\n        });\n      }\n    }\n  }\n  \n  // Overall data quality metrics\n  stats.dataQuality.overallCompleteness = ((totalCells - emptyCells) / totalCells) * 100;\n  stats.dataQuality.duplicateRows = countDuplicateRows(sampleRows);\n  stats.dataQuality.emptyRows = sampleRows.filter(row => \n    Object.values(row).every(val => val === null || val === undefined || val === '')\n  ).length;\n  \n  return stats;\n}\n\nfunction calculateSkewness(numbers: number[], mean: number, stdDev: number): number {\n  if (stdDev === 0) return 0;\n  const n = numbers.length;\n  const skewSum = numbers.reduce((acc, val) => acc + Math.pow((val - mean) / stdDev, 3), 0);\n  return (n / ((n - 1) * (n - 2))) * skewSum;\n}\n\nfunction calculateKurtosis(numbers: number[], mean: number, stdDev: number): number {\n  if (stdDev === 0) return 0;\n  const n = numbers.length;\n  const kurtSum = numbers.reduce((acc, val) => acc + Math.pow((val - mean) / stdDev, 4), 0);\n  return (n * (n + 1) / ((n - 1) * (n - 2) * (n - 3))) * kurtSum - (3 * (n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n}\n\nfunction detectOutliers(numbers: number[]): number[] {\n  const q1 = calculatePercentile(numbers, 25);\n  const q3 = calculatePercentile(numbers, 75);\n  const iqr = q3 - q1;\n  const lowerBound = q1 - 1.5 * iqr;\n  const upperBound = q3 + 1.5 * iqr;\n  \n  return numbers.filter(num => num < lowerBound || num > upperBound);\n}\n\nfunction calculateQuartiles(numbers: number[]): { q1: number; q2: number; q3: number } {\n  return {\n    q1: calculatePercentile(numbers, 25),\n    q2: calculatePercentile(numbers, 50),\n    q3: calculatePercentile(numbers, 75)\n  };\n}\n\nfunction calculatePercentile(numbers: number[], percentile: number): number {\n  const sorted = [...numbers].sort((a, b) => a - b);\n  const index = (percentile / 100) * (sorted.length - 1);\n  const lower = Math.floor(index);\n  const upper = Math.ceil(index);\n  const weight = index % 1;\n  \n  if (upper >= sorted.length) return sorted[sorted.length - 1];\n  return sorted[lower] * (1 - weight) + sorted[upper] * weight;\n}\n\nfunction calculateEntropy(counts: number[]): number {\n  const total = counts.reduce((a, b) => a + b, 0);\n  const probabilities = counts.map(count => count / total);\n  return -probabilities.reduce((acc, p) => acc + (p > 0 ? p * Math.log2(p) : 0), 0);\n}\n\nfunction analyzeDateFrequency(dates: Date[]): string {\n  if (dates.length < 2) return 'insufficient data';\n  \n  const sortedDates = dates.sort((a, b) => a.getTime() - b.getTime());\n  const intervals = [];\n  \n  for (let i = 1; i < sortedDates.length; i++) {\n    const diff = sortedDates[i].getTime() - sortedDates[i - 1].getTime();\n    intervals.push(diff / (1000 * 60 * 60 * 24)); // Convert to days\n  }\n  \n  const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;\n  \n  if (avgInterval < 2) return 'daily';\n  if (avgInterval < 8) return 'weekly';\n  if (avgInterval < 32) return 'monthly';\n  if (avgInterval < 95) return 'quarterly';\n  return 'yearly';\n}\n\nfunction countDuplicateRows(rows: any[]): number {\n  const stringified = rows.map(row => JSON.stringify(row));\n  const uniqueRows = new Set(stringified);\n  return rows.length - uniqueRows.size;\n}\n\nasync function generateAutoCharts(schema: ColumnSchema[], sampleRows: any[], analysis: any, env: any): Promise<any[]> {\n  const charts = [];\n  const numericCols = schema.filter(col => col.type === 'number');\n  const categoricalCols = schema.filter(col => col.type === 'string');\n  const dateCols = schema.filter(col => col.type === 'date');\n  \n  console.log('\uD83C\uDFA8 Generating intelligent automatic charts...', { numericCols: numericCols.length, categoricalCols: categoricalCols.length, dateCols: dateCols.length });\n  \n  try {\n    // Smart Chart Selection based on data characteristics\n    const chartRecommendations = generateSmartChartRecommendations(schema, sampleRows, analysis);\n    \n    for (const recommendation of chartRecommendations) {\n      const chart = await generateOptimalChart(recommendation, schema, sampleRows, analysis);\n      if (chart) {\n        charts.push(chart);\n      }\n    }\n    \n    console.log(`\u2705 Generated ${charts.length} intelligent automatic charts`);\n    \n  } catch (error) {\n    console.error('\u274C Auto chart generation failed:', error);\n    // Add fallback chart\n    charts.push({\n      title: \"\uD83D\uDCCA Basic Data Summary\",\n      description: \"Basic overview of your dataset\",\n      chartSpec: createFallbackChart(schema, sampleRows),\n      priority: 1\n    });\n  }\n  \n  return charts;\n}\n\nfunction generateSmartChartRecommendations(schema: ColumnSchema[], sampleRows: any[], analysis: any): any[] {\n  const recommendations = [];\n  const numericCols = schema.filter(col => col.type === 'number');\n  const categoricalCols = schema.filter(col => col.type === 'string');\n  const dateCols = schema.filter(col => col.type === 'date');\n  \n  // Priority 1: Time Series for temporal data with clear trends\n  if (dateCols.length > 0 && numericCols.length > 0) {\n    const timeCol = dateCols[0];\n    const valueCol = findMostVariableNumericColumn(numericCols, sampleRows);\n    if (valueCol && hasTemporalTrend(timeCol, valueCol, sampleRows)) {\n      recommendations.push({\n        type: 'timeseries',\n        priority: 1,\n        title: `\uD83D\uDCC8 ${valueCol.name} Trends Over Time`,\n        description: `Temporal analysis showing how ${valueCol.name} changes over ${timeCol.name}`,\n        columns: [timeCol, valueCol],\n        reason: 'Strong temporal patterns detected'\n      });\n    }\n  }\n  \n  // Priority 2: Performance Comparison for business metrics\n  if (categoricalCols.length > 0 && numericCols.length > 0) {\n    const categoryCol = findMostBalancedCategoricalColumn(categoricalCols, sampleRows);\n    const metricCol = findBusinessMetricColumn(numericCols, sampleRows);\n    if (categoryCol && metricCol && hasSignificantVariation(categoryCol, metricCol, sampleRows)) {\n      recommendations.push({\n        type: 'comparison',\n        priority: 2,\n        title: `\uD83D\uDCCA ${metricCol.name} Performance by ${categoryCol.name}`,\n        description: `Compare ${metricCol.name} across different ${categoryCol.name} segments`,\n        columns: [categoryCol, metricCol],\n        reason: 'Significant performance variations detected'\n      });\n    }\n  }\n  \n  // Priority 3: Distribution Analysis for key metrics\n  if (numericCols.length > 0) {\n    const keyMetric = findKeyMetricColumn(numericCols, sampleRows);\n    if (keyMetric && hasInterestingDistribution(keyMetric, sampleRows)) {\n      recommendations.push({\n        type: 'distribution',\n        priority: 3,\n        title: `\uD83D\uDCCB ${keyMetric.name} Distribution Analysis`,\n        description: `Statistical distribution showing the spread and frequency of ${keyMetric.name} values`,\n        columns: [keyMetric],\n        reason: 'Interesting distribution patterns detected'\n      });\n    }\n  }\n  \n  // Priority 4: Correlation Analysis (only if meaningful relationships exist)\n  if (numericCols.length >= 2) {\n    const correlationPairs = findStrongCorrelations(numericCols, sampleRows);\n    if (correlationPairs.length > 0) {\n      const topPair = correlationPairs[0];\n      recommendations.push({\n        type: 'correlation',\n        priority: 4,\n        title: `\uD83D\uDD17 ${topPair.col1.name} vs ${topPair.col2.name} Relationship`,\n        description: `Scatter plot showing correlation between ${topPair.col1.name} and ${topPair.col2.name}`,\n        columns: [topPair.col1, topPair.col2],\n        reason: `Strong correlation detected (${topPair.correlation.toFixed(2)})`\n      });\n    }\n  }\n  \n  // Priority 5: Category Composition (only if meaningful segments)\n  if (categoricalCols.length > 0) {\n    const meaningfulCategory = findMeaningfulCategoryColumn(categoricalCols, sampleRows);\n    if (meaningfulCategory && hasBalancedDistribution(meaningfulCategory, sampleRows)) {\n      recommendations.push({\n        type: 'composition',\n        priority: 5,\n        title: `\uD83E\uDD67 ${meaningfulCategory.name} Composition`,\n        description: `Breakdown showing the proportion of each ${meaningfulCategory.name} category`,\n        columns: [meaningfulCategory],\n        reason: 'Balanced category distribution suitable for comparison'\n      });\n    }\n  }\n  \n  return recommendations.sort((a, b) => a.priority - b.priority).slice(0, 4); // Top 4 recommendations\n}\n\n// Helper functions for intelligent chart selection\nfunction findMostVariableNumericColumn(numericCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  if (numericCols.length === 0) return null;\n  \n  return numericCols.reduce((prev, curr) => {\n    const prevVariation = curr.stats?.stdDev || 0;\n    const currVariation = prev.stats?.stdDev || 0;\n    return prevVariation > currVariation ? curr : prev;\n  });\n}\n\nfunction findBusinessMetricColumn(numericCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  // Look for business-relevant column names\n  const businessKeywords = ['revenue', 'sales', 'profit', 'cost', 'price', 'amount', 'value', 'total', 'count'];\n  const businessCol = numericCols.find(col => \n    businessKeywords.some(keyword => col.name.toLowerCase().includes(keyword))\n  );\n  \n  return businessCol || findMostVariableNumericColumn(numericCols, sampleRows);\n}\n\nfunction findMostBalancedCategoricalColumn(categoricalCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  if (categoricalCols.length === 0) return null;\n  \n  return categoricalCols.reduce((prev, curr) => {\n    const prevBalance = calculateCategoryBalance(prev, sampleRows);\n    const currBalance = calculateCategoryBalance(curr, sampleRows);\n    return currBalance > prevBalance ? curr : prev;\n  });\n}\n\nfunction calculateCategoryBalance(col: ColumnSchema, sampleRows: any[]): number {\n  const values = sampleRows.map(row => row[col.name]).filter(v => v != null);\n  const uniqueValues = [...new Set(values)];\n  \n  if (uniqueValues.length < 2 || uniqueValues.length > 8) return 0; // Too few or too many categories\n  \n  const counts = uniqueValues.map(val => values.filter(v => v === val).length);\n  const mean = counts.reduce((a, b) => a + b, 0) / counts.length;\n  const variance = counts.reduce((acc, count) => acc + Math.pow(count - mean, 2), 0) / counts.length;\n  \n  // Return balance score (lower variance = more balanced)\n  return mean > 0 ? 1 / (1 + variance / mean) : 0;\n}\n\nfunction hasTemporalTrend(dateCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): boolean {\n  const sortedData = sampleRows\n    .filter(row => row[dateCol.name] && row[numericCol.name])\n    .sort((a, b) => new Date(a[dateCol.name]).getTime() - new Date(b[dateCol.name]).getTime());\n  \n  if (sortedData.length < 3) return false;\n  \n  // Check for trend using simple slope analysis\n  const values = sortedData.map(row => Number(row[numericCol.name]));\n  const n = values.length;\n  const slope = (n * values.reduce((acc, val, i) => acc + i * val, 0) - \n                 (n * (n - 1) / 2) * values.reduce((a, b) => a + b, 0)) / \n                (n * (n * (n - 1) * (2 * n - 1) / 6) - Math.pow(n * (n - 1) / 2, 2));\n  \n  return Math.abs(slope) > 0.1; // Significant trend\n}\n\nfunction hasSignificantVariation(categoryCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): boolean {\n  const groups = sampleRows.reduce((acc, row) => {\n    const category = row[categoryCol.name];\n    const value = Number(row[numericCol.name]);\n    if (category && !isNaN(value)) {\n      if (!acc[category]) acc[category] = [];\n      acc[category].push(value);\n    }\n    return acc;\n  }, {} as Record<string, number[]>);\n  \n  const groupMeans = Object.values(groups).map(values => \n    values.reduce((a, b) => a + b, 0) / values.length\n  );\n  \n  if (groupMeans.length < 2) return false;\n  \n  const overallMean = groupMeans.reduce((a, b) => a + b, 0) / groupMeans.length;\n  const variance = groupMeans.reduce((acc, mean) => acc + Math.pow(mean - overallMean, 2), 0) / groupMeans.length;\n  \n  return variance > Math.pow(overallMean * 0.1, 2); // At least 10% variation\n}\n\nfunction hasInterestingDistribution(numericCol: ColumnSchema, sampleRows: any[]): boolean {\n  const values = sampleRows.map(row => Number(row[numericCol.name])).filter(v => !isNaN(v));\n  if (values.length < 5) return false;\n  \n  const mean = values.reduce((a, b) => a + b, 0) / values.length;\n  const variance = values.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / values.length;\n  const skewness = Math.abs(numericCol.stats?.stdDev || 0) > mean * 0.1;\n  \n  return skewness || variance > Math.pow(mean * 0.2, 2);\n}\n\nfunction findStrongCorrelations(numericCols: ColumnSchema[], sampleRows: any[]): any[] {\n  const correlations = [];\n  \n  for (let i = 0; i < numericCols.length; i++) {\n    for (let j = i + 1; j < numericCols.length; j++) {\n      const col1 = numericCols[i];\n      const col2 = numericCols[j];\n      \n      const values1 = sampleRows.map(row => Number(row[col1.name])).filter(v => !isNaN(v));\n      const values2 = sampleRows.map(row => Number(row[col2.name])).filter(v => !isNaN(v));\n      \n      const correlation = calculateCorrelation(values1, values2);\n      \n      if (Math.abs(correlation) > 0.5) { // Strong correlation threshold\n        correlations.push({ col1, col2, correlation });\n      }\n    }\n  }\n  \n  return correlations.sort((a, b) => Math.abs(b.correlation) - Math.abs(a.correlation));\n}\n\nfunction findKeyMetricColumn(numericCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  // Priority: business metrics > high variance > first numeric\n  return findBusinessMetricColumn(numericCols, sampleRows) || \n         findMostVariableNumericColumn(numericCols, sampleRows);\n}\n\nfunction findMeaningfulCategoryColumn(categoricalCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  return categoricalCols.find(col => {\n    const values = sampleRows.map(row => row[col.name]).filter(v => v != null);\n    const uniqueValues = [...new Set(values)];\n    return uniqueValues.length >= 2 && uniqueValues.length <= 8;\n  }) || null;\n}\n\nfunction hasBalancedDistribution(categoryCol: ColumnSchema, sampleRows: any[]): boolean {\n  return calculateCategoryBalance(categoryCol, sampleRows) > 0.5;\n}\n\nasync function generateOptimalChart(recommendation: any, schema: ColumnSchema[], sampleRows: any[], analysis: any): Promise<any | null> {\n  try {\n    switch (recommendation.type) {\n      case 'timeseries':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedTimeSeriesChart(recommendation.columns[0], recommendation.columns[1], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'comparison':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedComparisonChart(recommendation.columns[0], recommendation.columns[1], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'distribution':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedDistributionChart(recommendation.columns[0], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'correlation':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedCorrelationChart(recommendation.columns[0], recommendation.columns[1], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'composition':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedCompositionChart(recommendation.columns[0], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      default:\n        return null;\n    }\n  } catch (error) {\n    console.error(`Failed to generate ${recommendation.type} chart:`, error);\n    return null;\n  }\n}\n\nfunction generateNumericOverviewChart(numericCols: ColumnSchema[], sampleRows: any[]): any {\n  const means = numericCols.map(col => ({\n    name: col.name,\n    value: col.stats?.mean || 0\n  }));\n  \n  return {\n    data: [{\n      x: means.map(m => m.name),\n      y: means.map(m => m.value),\n      type: 'bar',\n      marker: {\n        color: ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe'],\n        opacity: 0.8\n      },\n      name: 'Average Values'\n    }],\n    layout: {\n      title: {\n        text: 'Numeric Columns Overview',\n        font: { size: 16, color: '#333' }\n      },\n      xaxis: { title: 'Columns' },\n      yaxis: { title: 'Average Values' },\n      showlegend: false,\n      margin: { t: 50, b: 50, l: 50, r: 20 }\n    }\n  };\n}\n\nfunction generateCategoryDistributionChart(categoricalCol: ColumnSchema, sampleRows: any[]): any {\n  const counts = sampleRows.reduce((acc, row) => {\n    const value = row[categoricalCol.name];\n    acc[value] = (acc[value] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  const sortedCounts = Object.entries(counts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 8); // Top 8 categories\n  \n  return {\n    data: [{\n      labels: sortedCounts.map(([label]) => label),\n      values: sortedCounts.map(([,value]) => value),\n      type: 'pie',\n      marker: {\n        colors: ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe', '#43e97b', '#38f9d7']\n      },\n      textinfo: 'label+percent',\n      textposition: 'outside'\n    }],\n    layout: {\n      title: {\n        text: `${categoricalCol.name} Distribution`,\n        font: { size: 16, color: '#333' }\n      },\n      margin: { t: 50, b: 50, l: 50, r: 50 }\n    }\n  };\n}\n\nfunction generateCorrelationMatrix(numericCols: ColumnSchema[], sampleRows: any[]): any {\n  const correlations = calculateCorrelationMatrix(numericCols, sampleRows);\n  \n  return {\n    data: [{\n      z: correlations.matrix,\n      x: correlations.labels,\n      y: correlations.labels,\n      type: 'heatmap',\n      colorscale: 'RdBu',\n      zmid: 0,\n      colorbar: {\n        title: 'Correlation',\n        thickness: 15\n      }\n    }],\n    layout: {\n      title: {\n        text: 'Correlation Matrix',\n        font: { size: 16, color: '#333' }\n      },\n      xaxis: { title: 'Variables' },\n      yaxis: { title: 'Variables' },\n      margin: { t: 80, b: 80, l: 80, r: 80 }\n    }\n  };\n}\n\nfunction generateTimeSeriesChart(dateCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): any {\n  const sortedData = sampleRows\n    .filter(row => row[dateCol.name] && row[numericCol.name])\n    .sort((a, b) => new Date(a[dateCol.name]).getTime() - new Date(b[dateCol.name]).getTime());\n  \n  return {\n    data: [{\n      x: sortedData.map(row => row[dateCol.name]),\n      y: sortedData.map(row => row[numericCol.name]),\n      type: 'scatter',\n      mode: 'lines+markers',\n      line: { color: '#667eea', width: 3 },\n      marker: { color: '#764ba2', size: 6 },\n      name: numericCol.name\n    }],\n    layout: {\n      title: {\n        text: `${numericCol.name} Over Time`,\n        font: { size: 16, color: '#333' }\n      },\n      xaxis: { title: dateCol.name },\n      yaxis: { title: numericCol.name },\n      margin: { t: 50, b: 50, l: 60, r: 20 }\n    }\n  };\n}\n\nfunction generateDistributionChart(numericCol: ColumnSchema, sampleRows: any[]): any {\n  const values = sampleRows\n    .map(row => row[numericCol.name])\n    .filter(val => val != null && !isNaN(Number(val)))\n    .map(val => Number(val));\n  \n  return {\n    data: [{\n      x: values,\n      type: 'histogram',\n      marker: {\n        color: '#667eea',\n        opacity: 0.7,\n        line: { color: '#764ba2', width: 1 }\n      },\n      name: 'Distribution'\n    }],\n    layout: {\n      title: {\n        text: `${numericCol.name} Distribution`,\n        font: { size: 16, color: '#333' }\n      },\n      xaxis: { title: numericCol.name },\n      yaxis: { title: 'Frequency' },\n      margin: { t: 50, b: 50, l: 50, r: 20 }\n    }\n  };\n}\n\nfunction calculateCorrelationMatrix(numericCols: ColumnSchema[], sampleRows: any[]): { matrix: number[][], labels: string[] } {\n  const labels = numericCols.map(col => col.name);\n  const matrix: number[][] = [];\n  \n  for (let i = 0; i < numericCols.length; i++) {\n    matrix[i] = [];\n    for (let j = 0; j < numericCols.length; j++) {\n      if (i === j) {\n        matrix[i][j] = 1;\n      } else {\n        const corr = calculateCorrelation(\n          sampleRows.map(row => Number(row[numericCols[i].name])).filter(v => !isNaN(v)),\n          sampleRows.map(row => Number(row[numericCols[j].name])).filter(v => !isNaN(v))\n        );\n        matrix[i][j] = corr;\n      }\n    }\n  }\n  \n  return { matrix, labels };\n}\n\nfunction calculateCorrelation(x: number[], y: number[]): number {\n  const n = Math.min(x.length, y.length);\n  if (n < 2) return 0;\n  \n  const meanX = x.slice(0, n).reduce((a, b) => a + b, 0) / n;\n  const meanY = y.slice(0, n).reduce((a, b) => a + b, 0) / n;\n  \n  let numerator = 0;\n  let sumXSquared = 0;\n  let sumYSquared = 0;\n  \n  for (let i = 0; i < n; i++) {\n    const dx = x[i] - meanX;\n    const dy = y[i] - meanY;\n    numerator += dx * dy;\n    sumXSquared += dx * dx;\n    sumYSquared += dy * dy;\n  }\n  \n  const denominator = Math.sqrt(sumXSquared * sumYSquared);\n  return denominator === 0 ? 0 : numerator / denominator;\n}\n\n// Advanced chart generation functions\nfunction generateAdvancedTimeSeriesChart(dateCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): any {\n  const sortedData = sampleRows\n    .filter(row => row[dateCol.name] && row[numericCol.name] != null)\n    .sort((a, b) => new Date(a[dateCol.name]).getTime() - new Date(b[dateCol.name]).getTime());\n  \n  const dates = sortedData.map(row => row[dateCol.name]);\n  const values = sortedData.map(row => Number(row[numericCol.name]));\n  \n  // Calculate trend line\n  const trendLine = calculateTrendLine(dates, values);\n  \n  return {\n    data: [\n      {\n        x: dates,\n        y: values,\n        type: 'scatter',\n        mode: 'lines+markers',\n        line: { \n          color: '#667eea', \n          width: 3,\n          shape: 'spline' \n        },\n        marker: { \n          color: '#764ba2', \n          size: 8,\n          symbol: 'circle'\n        },\n        name: numericCol.name,\n        hovertemplate: `<b>${dateCol.name}</b>: %{x}<br><b>${numericCol.name}</b>: %{y:,.0f}<extra></extra>`\n      },\n      {\n        x: dates,\n        y: trendLine,\n        type: 'scatter',\n        mode: 'lines',\n        line: { \n          color: '#ff7b7b', \n          width: 2,\n          dash: 'dot'\n        },\n        name: 'Trend',\n        hovertemplate: `<b>Trend</b>: %{y:,.0f}<extra></extra>`\n      }\n    ],\n    layout: {\n      title: {\n        text: `${numericCol.name} Trends Over Time`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: dateCol.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      yaxis: { \n        title: { text: numericCol.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 60, l: 80, r: 40 },\n      hovermode: 'x unified',\n      legend: {\n        orientation: 'h',\n        yanchor: 'bottom',\n        y: 1.02,\n        xanchor: 'right',\n        x: 1\n      }\n    }\n  };\n}\n\nfunction generateAdvancedComparisonChart(categoryCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): any {\n  const groupedData = sampleRows.reduce((acc, row) => {\n    const category = row[categoryCol.name];\n    const value = Number(row[numericCol.name]);\n    if (category && !isNaN(value)) {\n      if (!acc[category]) acc[category] = [];\n      acc[category].push(value);\n    }\n    return acc;\n  }, {} as Record<string, number[]>);\n  \n  // Calculate statistics for each group\n  const chartData = Object.entries(groupedData)\n    .map(([category, values]) => ({\n      category,\n      mean: values.reduce((a, b) => a + b, 0) / values.length,\n      count: values.length,\n      values\n    }))\n    .sort((a, b) => b.mean - a.mean)\n    .slice(0, 10); // Top 10 categories\n  \n  return {\n    data: [{\n      x: chartData.map(d => d.category),\n      y: chartData.map(d => d.mean),\n      type: 'bar',\n      marker: {\n        color: chartData.map((_, i) => `hsl(${220 + i * 25}, 70%, ${60 + (i % 3) * 10}%)`),\n        opacity: 0.8,\n        line: { color: '#2d3748', width: 1 }\n      },\n      text: chartData.map(d => `${d.mean.toLocaleString()}`),\n      textposition: 'outside',\n      hovertemplate: `<b>%{x}</b><br>${numericCol.name}: %{y:,.0f}<br>Sample Count: %{customdata}<extra></extra>`,\n      customdata: chartData.map(d => d.count)\n    }],\n    layout: {\n      title: {\n        text: `${numericCol.name} Performance by ${categoryCol.name}`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: categoryCol.name, font: { size: 14, color: '#4a5568' } },\n        tickangle: -45\n      },\n      yaxis: { \n        title: { text: `Average ${numericCol.name}`, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 100, l: 80, r: 40 },\n      showlegend: false\n    }\n  };\n}\n\nfunction generateAdvancedDistributionChart(numericCol: ColumnSchema, sampleRows: any[]): any {\n  const values = sampleRows\n    .map(row => Number(row[numericCol.name]))\n    .filter(val => !isNaN(val));\n  \n  if (values.length === 0) return createFallbackChart([], []);\n  \n  // Calculate statistics\n  const mean = values.reduce((a, b) => a + b, 0) / values.length;\n  const sorted = [...values].sort((a, b) => a - b);\n  const q1 = sorted[Math.floor(sorted.length * 0.25)];\n  const median = sorted[Math.floor(sorted.length * 0.5)];\n  const q3 = sorted[Math.floor(sorted.length * 0.75)];\n  \n  return {\n    data: [\n      {\n        x: values,\n        type: 'histogram',\n        nbinsx: Math.min(30, Math.max(10, Math.floor(Math.sqrt(values.length)))),\n        marker: {\n          color: '#667eea',\n          opacity: 0.7,\n          line: { color: '#2d3748', width: 1 }\n        },\n        name: 'Distribution',\n        hovertemplate: `Range: %{x}<br>Count: %{y}<extra></extra>`\n      }\n    ],\n    layout: {\n      title: {\n        text: `${numericCol.name} Distribution Analysis`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: numericCol.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      yaxis: { \n        title: { text: 'Frequency', font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 60, l: 60, r: 40 },\n      shapes: [\n        // Mean line\n        {\n          type: 'line',\n          x0: mean,\n          y0: 0,\n          x1: mean,\n          y1: 1,\n          yref: 'paper',\n          line: { color: '#e53e3e', width: 2, dash: 'dash' }\n        },\n        // Median line\n        {\n          type: 'line',\n          x0: median,\n          y0: 0,\n          x1: median,\n          y1: 1,\n          yref: 'paper',\n          line: { color: '#38a169', width: 2, dash: 'dot' }\n        }\n      ],\n      annotations: [\n        {\n          x: mean,\n          y: 0.9,\n          yref: 'paper',\n          text: `Mean: ${mean.toFixed(1)}`,\n          showarrow: true,\n          arrowhead: 2,\n          arrowcolor: '#e53e3e',\n          font: { color: '#e53e3e', size: 12 }\n        },\n        {\n          x: median,\n          y: 0.8,\n          yref: 'paper',\n          text: `Median: ${median.toFixed(1)}`,\n          showarrow: true,\n          arrowhead: 2,\n          arrowcolor: '#38a169',\n          font: { color: '#38a169', size: 12 }\n        }\n      ]\n    }\n  };\n}\n\nfunction generateAdvancedCorrelationChart(col1: ColumnSchema, col2: ColumnSchema, sampleRows: any[]): any {\n  const data = sampleRows\n    .filter(row => row[col1.name] != null && row[col2.name] != null)\n    .map(row => ({\n      x: Number(row[col1.name]),\n      y: Number(row[col2.name])\n    }))\n    .filter(point => !isNaN(point.x) && !isNaN(point.y));\n  \n  if (data.length === 0) return createFallbackChart([], []);\n  \n  // Calculate correlation coefficient\n  const correlation = calculateCorrelation(\n    data.map(d => d.x),\n    data.map(d => d.y)\n  );\n  \n  // Calculate trend line\n  const xValues = data.map(d => d.x);\n  const yValues = data.map(d => d.y);\n  const trendLine = calculateLinearTrendLine(xValues, yValues);\n  \n  return {\n    data: [\n      {\n        x: data.map(d => d.x),\n        y: data.map(d => d.y),\n        type: 'scatter',\n        mode: 'markers',\n        marker: {\n          color: '#667eea',\n          size: 10,\n          opacity: 0.7,\n          line: { color: '#2d3748', width: 1 }\n        },\n        name: 'Data Points',\n        hovertemplate: `<b>${col1.name}</b>: %{x:,.1f}<br><b>${col2.name}</b>: %{y:,.1f}<extra></extra>`\n      },\n      {\n        x: [Math.min(...xValues), Math.max(...xValues)],\n        y: trendLine,\n        type: 'scatter',\n        mode: 'lines',\n        line: { color: '#e53e3e', width: 3 },\n        name: `Trend (r=${correlation.toFixed(3)})`,\n        hovertemplate: `<b>Correlation</b>: ${correlation.toFixed(3)}<extra></extra>`\n      }\n    ],\n    layout: {\n      title: {\n        text: `${col1.name} vs ${col2.name} Relationship`,  \n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: col1.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      yaxis: { \n        title: { text: col2.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 80, b: 60, l: 80, r: 40 },\n      annotations: [{\n        x: 0.02,\n        y: 0.98,\n        xref: 'paper',\n        yref: 'paper',\n        text: `Correlation: ${correlation.toFixed(3)}<br>Strength: ${getCorrelationStrength(correlation)}`,\n        showarrow: false,\n        bgcolor: 'rgba(255,255,255,0.8)',\n        bordercolor: '#e2e8f0',\n        borderwidth: 1,\n        font: { size: 12, color: '#2d3748' }\n      }]\n    }\n  };\n}\n\nfunction generateAdvancedCompositionChart(categoryCol: ColumnSchema, sampleRows: any[]): any {\n  const counts = sampleRows.reduce((acc, row) => {\n    const value = row[categoryCol.name];\n    if (value != null) {\n      acc[value] = (acc[value] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n  \n  const sortedCounts = Object.entries(counts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 8); // Top 8 categories\n  \n  const total = sortedCounts.reduce((sum, [, count]) => sum + count, 0);\n  const colors = [\n    '#667eea', '#764ba2', '#f093fb', '#f5576c', \n    '#4facfe', '#00f2fe', '#43e97b', '#38f9d7'\n  ];\n  \n  return {\n    data: [{\n      labels: sortedCounts.map(([label]) => label),\n      values: sortedCounts.map(([,value]) => value),\n      type: 'pie',\n      marker: {\n        colors: colors.slice(0, sortedCounts.length),\n        line: { color: '#ffffff', width: 2 }\n      },\n      textinfo: 'label+percent+value',\n      textposition: 'auto',\n      textfont: { size: 12, color: '#2d3748' },\n      hovertemplate: `<b>%{label}</b><br>Count: %{value}<br>Percentage: %{percent}<extra></extra>`,\n      pull: sortedCounts.map((_, i) => i === 0 ? 0.1 : 0) // Highlight largest segment\n    }],\n    layout: {\n      title: {\n        text: `${categoryCol.name} Distribution`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 60, l: 60, r: 60 },\n      showlegend: true,\n      legend: {\n        orientation: 'v',\n        yanchor: 'middle',\n        y: 0.5,\n        x: 1.05\n      },\n      annotations: [{\n        text: `Total: ${total}`,\n        x: 0.5,\n        y: 0.5,\n        xref: 'paper',\n        yref: 'paper',\n        showarrow: false,\n        font: { size: 16, color: '#2d3748', weight: 600 }\n      }]\n    }\n  };\n}\n\n// Helper functions for advanced charts\nfunction calculateTrendLine(dates: string[], values: number[]): number[] {\n  const n = dates.length;\n  if (n < 2) return values;\n  \n  const timeValues = dates.map(date => new Date(date).getTime());\n  const meanTime = timeValues.reduce((a, b) => a + b, 0) / n;\n  const meanValue = values.reduce((a, b) => a + b, 0) / n;\n  \n  const numerator = timeValues.reduce((acc, time, i) => acc + (time - meanTime) * (values[i] - meanValue), 0);\n  const denominator = timeValues.reduce((acc, time) => acc + Math.pow(time - meanTime, 2), 0);\n  \n  const slope = denominator !== 0 ? numerator / denominator : 0;\n  const intercept = meanValue - slope * meanTime;\n  \n  return timeValues.map(time => slope * time + intercept);\n}\n\nfunction calculateLinearTrendLine(xValues: number[], yValues: number[]): number[] {\n  const n = xValues.length;\n  if (n < 2) return yValues;\n  \n  const meanX = xValues.reduce((a, b) => a + b, 0) / n;\n  const meanY = yValues.reduce((a, b) => a + b, 0) / n;\n  \n  const numerator = xValues.reduce((acc, x, i) => acc + (x - meanX) * (yValues[i] - meanY), 0);\n  const denominator = xValues.reduce((acc, x) => acc + Math.pow(x - meanX, 2), 0);\n  \n  const slope = denominator !== 0 ? numerator / denominator : 0;\n  const intercept = meanY - slope * meanX;\n  \n  const minX = Math.min(...xValues);\n  const maxX = Math.max(...xValues);\n  \n  return [slope * minX + intercept, slope * maxX + intercept];\n}\n\nfunction getCorrelationStrength(correlation: number): string {\n  const abs = Math.abs(correlation);\n  if (abs >= 0.9) return 'Very Strong';\n  if (abs >= 0.7) return 'Strong';\n  if (abs >= 0.5) return 'Moderate';\n  if (abs >= 0.3) return 'Weak';\n  return 'Very Weak';\n}\n\n// Enhanced Statistical Analysis (Phase 1 - without DuckDB for now)\nexport async function analyzeWithDuckDB(\n  jsonData: any[],\n  env: any\n): Promise<DuckDBAnalysis> {\n  console.log('\uD83D\uDCCA Starting enhanced statistical analysis...');\n  const start = Date.now();\n\n  try {\n    const schema = inferSchema(jsonData);\n    const rowCount = jsonData.length;\n    const columnCount = schema.length;\n    \n    // Generate comprehensive summary statistics for each column\n    const summary = schema.map(col => {\n      const values = jsonData.map(row => row[col.name]).filter(v => v != null);\n      const nonNullCount = values.length;\n      const nullCount = rowCount - nonNullCount;\n      \n      let stats: any = {\n        column_name: col.name,\n        column_type: col.type,\n        count: nonNullCount,\n        nulls: nullCount,\n        unique: [...new Set(values)].length\n      };\n      \n      if (col.type === 'number') {\n        const numValues = values.map(v => Number(v)).filter(v => !isNaN(v));\n        if (numValues.length > 0) {\n          const sorted = [...numValues].sort((a, b) => a - b);\n          const mean = numValues.reduce((a, b) => a + b, 0) / numValues.length;\n          const variance = numValues.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / numValues.length;\n          \n          stats.min = Math.min(...numValues);\n          stats.max = Math.max(...numValues);\n          stats.mean = mean;\n          stats.std = Math.sqrt(variance);\n          stats.q25 = sorted[Math.floor(sorted.length * 0.25)];\n          stats.q50 = sorted[Math.floor(sorted.length * 0.5)];\n          stats.q75 = sorted[Math.floor(sorted.length * 0.75)];\n        }\n      } else if (col.type === 'string') {\n        // Get frequency distribution for categorical data\n        const frequencies = values.reduce((acc, val) => {\n          acc[val] = (acc[val] || 0) + 1;\n          return acc;\n        }, {} as Record<string, number>);\n        \n        const topCategories = Object.entries(frequencies)\n          .sort(([,a], [,b]) => b - a)\n          .slice(0, 10);\n        \n        stats.top_categories = topCategories;\n        stats.category_count = Object.keys(frequencies).length;\n      }\n      \n      return stats;\n    });\n    \n    // Calculate correlations between numeric columns\n    const numericColumns = schema.filter(col => col.type === 'number');\n    const correlations: any = {};\n    \n    for (let i = 0; i < numericColumns.length; i++) {\n      for (let j = i + 1; j < numericColumns.length; j++) {\n        const col1 = numericColumns[i];\n        const col2 = numericColumns[j];\n        \n        const values1 = jsonData.map(row => Number(row[col1.name])).filter(v => !isNaN(v));\n        const values2 = jsonData.map(row => Number(row[col2.name])).filter(v => !isNaN(v));\n        \n        const correlation = calculateCorrelation(values1, values2);\n        if (Math.abs(correlation) > 0.1) { // Only store meaningful correlations\n          correlations[`${col1.name}_${col2.name}`] = correlation;\n        }\n      }\n    }\n    \n    // Identify data patterns and anomalies\n    const patterns = {\n      strongCorrelations: Object.entries(correlations).filter(([,corr]) => Math.abs(corr as number) > 0.7),\n      highVariability: numericColumns\n        .map(col => ({\n          column: col.name,\n          cv: (col.stats?.stdDev || 0) / (col.stats?.mean || 1)\n        }))\n        .filter(item => item.cv > 0.5)\n        .sort((a, b) => b.cv - a.cv)\n        .slice(0, 5),\n      categoricalDominance: schema\n        .filter(col => col.type === 'string')\n        .map(col => {\n          const values = jsonData.map(row => row[col.name]).filter(v => v != null);\n          const frequencies = values.reduce((acc, val) => {\n            acc[val] = (acc[val] || 0) + 1;\n            return acc;\n          }, {} as Record<string, number>);\n          const maxFreq = Math.max(...Object.values(frequencies));\n          return {\n            column: col.name,\n            dominance: maxFreq / values.length,\n            topValue: Object.entries(frequencies).find(([,freq]) => freq === maxFreq)?.[0]\n          };\n        })\n        .filter(item => item.dominance > 0.7)\n        .sort((a, b) => b.dominance - a.dominance)\n    };\n    \n    const duration = Date.now() - start;\n    console.log(`\u2705 Enhanced statistical analysis completed in ${duration}ms`);\n    console.log(`\uD83D\uDCCA Processed ${rowCount} rows, ${columnCount} columns`);\n    console.log(`\uD83D\uDD0D Found ${Object.keys(correlations).length} correlations, ${patterns.highVariability.length} high-variability columns`);\n    \n    return {\n      summary,\n      rowCount,\n      columnCount,\n      dataTypes: schema.reduce((acc, col) => {\n        acc[col.name] = col.type;\n        return acc;\n      }, {} as Record<string, string>),\n      correlations,\n      patterns,\n      processingTime: duration\n    };\n    \n  } catch (error) {\n    const duration = Date.now() - start;\n    console.error(`\u274C Enhanced analysis failed after ${duration}ms:`, error);\n    \n    return {\n      summary: [],\n      rowCount: jsonData.length,\n      columnCount: 0,\n      dataTypes: {},\n      error: error.message\n    };\n  }\n}\n\nasync function generateSingleChart(prompt: string, schema: ColumnSchema[], sampleRows: any[], env: any): Promise<any> {\n  const chartPrompt = `${SYSTEM_PROMPTS.CHART_GENERATION}\n\nDIRECT CHART GENERATION REQUEST:\n\nUSER'S VISUALIZATION REQUEST: \"${prompt}\"\n\nDATASET SCHEMA & STATISTICS:\n${JSON.stringify(schema.map(col => ({name: col.name, type: col.type, stats: col.stats})), null, 2)}\n\nSAMPLE DATA FOR CHART CREATION:\n${JSON.stringify(sampleRows.slice(0, 8), null, 2)}\n\nIMPLEMENTATION REQUIREMENTS:\n- Analyze the user request to determine optimal chart type and variables\n- Use actual sample data values to populate the chart arrays\n- Apply professional styling with gradient color palette starting with #667eea\n- Create descriptive titles and axis labels that tell the data story\n- Ensure chart maximizes insight discovery and visual clarity\n- Follow modern visualization best practices for the chosen chart type\n\nCRITICAL: Return ONLY the complete Plotly.js JSON specification. No explanations, no markdown, no additional text.`;\n\n  try {\n    const response = await env.AI.run('@cf/qwen/qwq-32b', {\n      prompt: chartPrompt,\n      max_tokens: 512\n    });\n    \n    let responseText = response.response || response.choices?.[0]?.text || response;\n    if (typeof responseText === 'string') {\n      responseText = responseText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '').trim();\n      \n      // Handle QwQ model's thinking process output\n      const thinkEndIndex = responseText.lastIndexOf('</think>');\n      if (thinkEndIndex !== -1) {\n        responseText = responseText.substring(thinkEndIndex + 8).trim();\n      }\n      \n      // Extract JSON object if there's extra text\n      const jsonStart = responseText.indexOf('{');\n      const jsonEnd = responseText.lastIndexOf('}');\n      if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n        responseText = responseText.substring(jsonStart, jsonEnd + 1);\n      }\n    }\n    \n    return JSON.parse(responseText);\n  } catch (error) {\n    console.error('Single chart generation failed:', error);\n    return createFallbackChart(schema, sampleRows);\n  }\n}\n\nasync function createFallbackAnalysis(schema: ColumnSchema[], sampleRows: any[]): Promise<DataAnalysis> {\n  const numericColumns = schema.filter(col => col.type === 'number');\n  const categoricalColumns = schema.filter(col => col.type === 'string');\n  const dateColumns = schema.filter(col => col.type === 'date');\n  \n  return {\n    summary: `Dataset contains ${schema.length} columns with ${sampleRows.length} sample rows. Includes ${numericColumns.length} numeric, ${categoricalColumns.length} categorical, and ${dateColumns.length} date columns.`,\n    insights: [\n      `Dataset has ${schema.length} total columns`,\n      `${numericColumns.length} numeric columns available for quantitative analysis`,\n      `${categoricalColumns.length} categorical columns for grouping and segmentation`,\n      dateColumns.length > 0 ? `${dateColumns.length} date columns for temporal analysis` : 'No date columns detected',\n      `Data completeness appears to be ${Math.round((1 - schema.reduce((acc, col) => acc + (col.stats?.nullCount || 0), 0) / (schema.length * sampleRows.length)) * 100)}%`\n    ],\n    correlations: [],\n    recommendations: [\n      numericColumns.length > 0 ? `Create bar charts with ${numericColumns[0].name}` : 'Create count charts for categorical data',\n      categoricalColumns.length > 0 ? `Group data by ${categoricalColumns[0].name}` : 'Analyze numeric distributions',\n      dateColumns.length > 0 ? 'Consider time series analysis with date columns' : 'Add date columns for temporal analysis'\n    ],\n    dataQuality: {\n      completeness: Math.round((1 - schema.reduce((acc, col) => acc + (col.stats?.nullCount || 0), 0) / (schema.length * sampleRows.length)) * 100),\n      consistency: 85,\n      issues: schema.filter(col => (col.stats?.nullCount || 0) > 0).map(col => `${col.name} has missing values`)\n    },\n    patterns: {\n      trends: numericColumns.length > 1 ? [`Potential trends between ${numericColumns[0].name} and ${numericColumns[1].name}`] : [],\n      outliers: [],\n      seasonality: dateColumns.length > 0 ? ['Potential seasonal patterns in time-based data'] : [],\n      distributions: numericColumns.map(col => ({\n        column: col.name,\n        type: 'unknown',\n        description: `${col.name} distribution needs analysis`\n      }))\n    },\n    businessInsights: [\n      'Upload complete dataset for deeper business insights',\n      'Consider data validation and cleaning procedures',\n      'Identify key performance indicators in your data'\n    ],\n    suggestedPrompts: [\n      {\n        prompt: numericColumns.length > 0 ? `Show me a bar chart of ${numericColumns[0].name}` : 'Show me the data distribution',\n        category: 'Overview',\n        description: 'Basic data overview',\n        chartType: 'bar'\n      },\n      {\n        prompt: categoricalColumns.length > 0 ? `Display a pie chart of ${categoricalColumns[0].name} distribution` : 'Show me category counts',\n        category: 'Distribution',\n        description: 'Category distribution analysis',\n        chartType: 'pie'\n      },\n      {\n        prompt: numericColumns.length > 1 ? `Compare ${numericColumns[0].name} vs ${numericColumns[1].name}` : 'Show me correlations',\n        category: 'Comparison',\n        description: 'Compare different metrics',\n        chartType: 'scatter'\n      }\n    ],\n    autoCharts: await generateAutoCharts(schema, sampleRows, null, null)\n  };\n}\n\nexport function createFallbackChart(schema: ColumnSchema[], sampleRows: any[]): any {\n  if (schema.length === 0 || sampleRows.length === 0) {\n    return {\n      data: [{\n        x: ['No Data'],\n        y: [0],\n        type: 'bar'\n      }],\n      layout: {\n        title: 'No Data Available',\n        xaxis: { title: 'Categories' },\n        yaxis: { title: 'Values' }\n      }\n    };\n  }\n\n  // Find first numeric column for y-axis\n  const numericColumn = schema.find(col => col.type === 'number');\n  // Find first string column for x-axis  \n  const stringColumn = schema.find(col => col.type === 'string');\n  \n  if (!numericColumn) {\n    // If no numeric data, create a simple count chart\n    const categories = [...new Set(sampleRows.map(row => row[schema[0].name]))];\n    const counts = categories.map(cat => \n      sampleRows.filter(row => row[schema[0].name] === cat).length\n    );\n    \n    return {\n      data: [{\n        x: categories,\n        y: counts,\n        type: 'bar'\n      }],\n      layout: {\n        title: `Count by ${schema[0].name}`,\n        xaxis: { title: schema[0].name },\n        yaxis: { title: 'Count' }\n      }\n    };\n  }\n  \n  const xColumn = stringColumn || schema[0];\n  const yColumn = numericColumn;\n  \n  return {\n    data: [{\n      x: sampleRows.map(row => row[xColumn.name]),\n      y: sampleRows.map(row => row[yColumn.name]),\n      type: 'bar'\n    }],\n    layout: {\n      title: `${yColumn.name} by ${xColumn.name}`,\n      xaxis: { title: xColumn.name },\n      yaxis: { title: yColumn.name }\n    }\n  };\n}", "import { Env } from './types';\nimport { uploadCsvHandler, queryHandler } from './handlers';\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: any): Promise<Response> {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type',\n        },\n      });\n    }\n\n    if (path === '/upload' && request.method === 'POST') {\n      return uploadCsvHandler(request, env);\n    }\n\n    if (path === '/query' && request.method === 'POST') {\n      return queryHandler(request, env);\n    }\n\n    if (path === '/' && request.method === 'GET') {\n      return new Response(getIndexHtml(), {\n        headers: { 'Content-Type': 'text/html' }\n      });\n    }\n\n    return new Response('Not Found', { status: 404 });\n  },\n};\n\nfunction getIndexHtml(): string {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSV AI Agent - Professional Data Analytics Platform</title>\n    <script src=\"https://cdn.plot.ly/plotly-2.32.0.min.js\"></script>\n    <script src=\"https://unpkg.com/lucide@latest/dist/umd/lucide.js\"></script>\n    <style>\n        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n        \n        * { \n            margin: 0; \n            padding: 0; \n            box-sizing: border-box; \n        }\n        \n        :root {\n            --primary-50: #f0f9ff;\n            --primary-100: #e0f2fe;\n            --primary-200: #bae6fd;\n            --primary-300: #7dd3fc;\n            --primary-400: #38bdf8;\n            --primary-500: #0ea5e9;\n            --primary-600: #0284c7;\n            --primary-700: #0369a1;\n            --primary-800: #075985;\n            --primary-900: #0c4a6e;\n            \n            --gray-50: #f8fafc;\n            --gray-100: #f1f5f9;\n            --gray-200: #e2e8f0;\n            --gray-300: #cbd5e1;\n            --gray-400: #94a3b8;\n            --gray-500: #64748b;\n            --gray-600: #475569;\n            --gray-700: #334155;\n            --gray-800: #1e293b;\n            --gray-900: #0f172a;\n            \n            --success-50: #f0fdf4;\n            --success-200: #bbf7d0;\n            --success-500: #22c55e;\n            --success-600: #16a34a;\n            \n            --error-50: #fef2f2;\n            --error-200: #fecaca;\n            --error-500: #ef4444;\n            --error-600: #dc2626;\n            \n            --warning-50: #fffbeb;\n            --warning-200: #fed7aa;\n            --warning-500: #f59e0b;\n            --warning-600: #d97706;\n            \n            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n            \n            --border-radius-sm: 0.375rem;\n            --border-radius-md: 0.5rem;\n            --border-radius-lg: 0.75rem;\n            --border-radius-xl: 1rem;\n        }\n        \n        body { \n            font-family: 'Inter', system-ui, -apple-system, sans-serif; \n            background: var(--gray-50);\n            color: var(--gray-900);\n            line-height: 1.6;\n        }\n        \n        .header {\n            background: white;\n            border-bottom: 1px solid var(--gray-200);\n            padding: 1.5rem 0;\n            position: sticky;\n            top: 0;\n            z-index: 50;\n            box-shadow: var(--shadow-sm);\n        }\n        \n        .header-content {\n            max-width: 1280px;\n            margin: 0 auto;\n            padding: 0 2rem;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n        \n        .logo {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n        \n        .logo-icon {\n            width: 2rem;\n            height: 2rem;\n            background: var(--primary-500);\n            border-radius: var(--border-radius-md);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n        }\n        \n        .logo h1 {\n            font-size: 1.5rem;\n            font-weight: 700;\n            color: var(--gray-900);\n        }\n        \n        .subtitle {\n            font-size: 0.875rem;\n            color: var(--gray-600);\n            margin-top: 0.25rem;\n        }\n        \n        .main-container {\n            max-width: 1280px;\n            margin: 0 auto;\n            padding: 2rem;\n        }\n        \n        .grid-layout {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 2rem;\n            margin-bottom: 2rem;\n        }\n        \n        .full-width {\n            grid-column: 1 / -1;\n        }\n        \n        .card { \n            background: white;\n            border: 1px solid var(--gray-200);\n            border-radius: var(--border-radius-xl);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n            transition: all 0.2s ease-in-out;\n        }\n        \n        .card:hover {\n            box-shadow: var(--shadow-md);\n            border-color: var(--gray-300);\n        }\n        \n        .card-header {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            margin-bottom: 1.5rem;\n        }\n        \n        .card-icon {\n            width: 1.25rem;\n            height: 1.25rem;\n            color: var(--primary-500);\n        }\n        \n        .card-title {\n            font-size: 1.125rem;\n            font-weight: 600;\n            color: var(--gray-900);\n        }\n        \n        .file-upload-area {\n            border: 2px dashed var(--gray-300);\n            border-radius: var(--border-radius-lg);\n            padding: 2rem;\n            text-align: center;\n            transition: all 0.2s ease-in-out;\n            cursor: pointer;\n            background: var(--gray-50);\n        }\n        \n        .file-upload-area:hover {\n            border-color: var(--primary-400);\n            background: var(--primary-50);\n        }\n        \n        .file-upload-area.dragover {\n            border-color: var(--primary-500);\n            background: var(--primary-100);\n        }\n        \n        .file-upload-area.has-file {\n            border-color: var(--success-500);\n            background: var(--success-50);\n        }\n        \n        .file-selected {\n            margin-top: 1rem;\n            padding: 0.75rem;\n            background: var(--primary-50);\n            border: 1px solid var(--primary-200);\n            border-radius: var(--border-radius-md);\n            color: var(--primary-700);\n            font-size: 0.875rem;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .upload-progress {\n            margin-top: 1rem;\n            padding: 1rem;\n            background: var(--primary-50);\n            border: 1px solid var(--primary-200);\n            border-radius: var(--border-radius-md);\n            display: none;\n        }\n        \n        .upload-progress.show {\n            display: block;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 8px;\n            background: var(--gray-200);\n            border-radius: 4px;\n            overflow: hidden;\n            margin-top: 0.5rem;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: var(--primary-500);\n            border-radius: 4px;\n            transition: width 0.3s ease;\n            animation: pulse 2s infinite;\n        }\n        \n        .upload-icon {\n            width: 3rem;\n            height: 3rem;\n            color: var(--gray-400);\n            margin: 0 auto 1rem;\n        }\n        \n        .upload-text {\n            font-weight: 500;\n            color: var(--gray-700);\n            margin-bottom: 0.5rem;\n        }\n        \n        .upload-subtext {\n            font-size: 0.875rem;\n            color: var(--gray-500);\n        }\n        \n        .file-input {\n            display: none;\n        }\n        \n        .prompt-input {\n            width: 100%;\n            min-height: 120px;\n            padding: 1rem;\n            border: 1px solid var(--gray-300);\n            border-radius: var(--border-radius-lg);\n            font-family: inherit;\n            font-size: 0.875rem;\n            resize: vertical;\n            transition: all 0.2s ease-in-out;\n            background: white;\n        }\n        \n        .prompt-input:focus {\n            outline: none;\n            border-color: var(--primary-500);\n            box-shadow: 0 0 0 3px var(--primary-100);\n        }\n        \n        .prompt-input::placeholder {\n            color: var(--gray-400);\n        }\n        \n        .btn {\n            display: inline-flex;\n            align-items: center;\n            gap: 0.5rem;\n            padding: 0.75rem 1.5rem;\n            border: none;\n            border-radius: var(--border-radius-md);\n            font-family: inherit;\n            font-size: 0.875rem;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.2s ease-in-out;\n            text-decoration: none;\n        }\n        \n        .btn-primary {\n            background: var(--primary-500);\n            color: white;\n            box-shadow: var(--shadow-sm);\n        }\n        \n        .btn-primary:hover {\n            background: var(--primary-600);\n            box-shadow: var(--shadow-md);\n            transform: translateY(-1px);\n        }\n        \n        .btn-primary:active {\n            transform: translateY(0);\n        }\n        \n        .btn-primary:disabled {\n            background: var(--gray-300);\n            color: var(--gray-500);\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n        }\n        \n        .btn-primary:disabled:hover {\n            background: var(--gray-300);\n            transform: none;\n            box-shadow: none;\n        }\n        \n        .btn-secondary {\n            background: var(--gray-100);\n            color: var(--gray-700);\n            border: 1px solid var(--gray-300);\n        }\n        \n        .btn-secondary:hover {\n            background: var(--gray-200);\n            border-color: var(--gray-400);\n        }\n        \n        .btn-icon {\n            width: 1rem;\n            height: 1rem;\n        }\n        \n        .status {\n            padding: 1rem;\n            border-radius: var(--border-radius-md);\n            margin: 1rem 0;\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            font-size: 0.875rem;\n            font-weight: 500;\n        }\n        \n        .status.success {\n            background: var(--success-50);\n            color: var(--success-600);\n            border: 1px solid var(--success-200);\n        }\n        \n        .status.error {\n            background: var(--error-50);\n            color: var(--error-600);\n            border: 1px solid var(--error-200);\n        }\n        \n        .status.info {\n            background: var(--primary-50);\n            color: var(--primary-600);\n            border: 1px solid var(--primary-200);\n        }\n        \n        .status.warning {\n            background: var(--warning-50);\n            color: var(--warning-600);\n            border: 1px solid var(--warning-200);\n        }\n        \n        .loading-spinner {\n            width: 1rem;\n            height: 1rem;\n            border: 2px solid transparent;\n            border-top: 2px solid currentColor;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n        \n        @keyframes spin {\n            to { transform: rotate(360deg); }\n        }\n        \n        .metrics-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n            gap: 1rem;\n            margin: 1.5rem 0;\n        }\n        \n        .metric-card {\n            background: var(--gray-50);\n            border: 1px solid var(--gray-200);\n            border-radius: var(--border-radius-md);\n            padding: 1rem;\n            text-align: center;\n        }\n        \n        .metric-value {\n            font-size: 1.5rem;\n            font-weight: 700;\n            color: var(--primary-600);\n            margin-bottom: 0.25rem;\n        }\n        \n        .metric-label {\n            font-size: 0.75rem;\n            font-weight: 500;\n            color: var(--gray-600);\n            text-transform: uppercase;\n            letter-spacing: 0.05em;\n        }\n        \n        .insights-list {\n            list-style: none;\n            margin: 1rem 0;\n        }\n        \n        .insights-list li {\n            background: var(--gray-50);\n            border: 1px solid var(--gray-200);\n            border-radius: var(--border-radius-md);\n            padding: 1rem;\n            margin-bottom: 0.75rem;\n            font-size: 0.875rem;\n            line-height: 1.5;\n            position: relative;\n            padding-left: 2.5rem;\n        }\n        \n        .insights-list li::before {\n            content: '';\n            position: absolute;\n            left: 1rem;\n            top: 1.25rem;\n            width: 0.25rem;\n            height: 0.25rem;\n            background: var(--primary-500);\n            border-radius: 50%;\n        }\n        \n        .charts-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n            gap: 2rem;\n            margin-top: 2rem;\n        }\n        \n        .chart-container {\n            background: white;\n            border: 1px solid var(--gray-200);\n            border-radius: var(--border-radius-xl);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n        \n        .chart-title {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--gray-900);\n            margin-bottom: 0.5rem;\n        }\n        \n        .chart-description {\n            font-size: 0.875rem;\n            color: var(--gray-600);\n            margin-bottom: 1.5rem;\n        }\n        \n        .suggestions-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n            gap: 1rem;\n            margin-top: 1.5rem;\n        }\n        \n        .suggestion-card {\n            background: white;\n            border: 1px solid var(--gray-200);\n            border-radius: var(--border-radius-lg);\n            padding: 1rem;\n            cursor: pointer;\n            transition: all 0.2s ease-in-out;\n        }\n        \n        .suggestion-card:hover {\n            border-color: var(--primary-300);\n            box-shadow: var(--shadow-md);\n            transform: translateY(-1px);\n        }\n        \n        .suggestion-title {\n            font-weight: 600;\n            color: var(--gray-900);\n            margin-bottom: 0.5rem;\n            font-size: 0.875rem;\n        }\n        \n        .suggestion-description {\n            font-size: 0.75rem;\n            color: var(--gray-600);\n            line-height: 1.4;\n            margin-bottom: 0.75rem;\n        }\n        \n        .suggestion-category {\n            display: inline-block;\n            background: var(--primary-100);\n            color: var(--primary-700);\n            padding: 0.25rem 0.5rem;\n            border-radius: var(--border-radius-sm);\n            font-size: 0.625rem;\n            font-weight: 500;\n            text-transform: uppercase;\n            letter-spacing: 0.05em;\n        }\n        \n        .reasoning-section {\n            background: var(--primary-50);\n            border: 1px solid var(--primary-200);\n            border-radius: var(--border-radius-lg);\n            padding: 1.5rem;\n            margin: 1.5rem 0;\n        }\n        \n        .reasoning-title {\n            font-weight: 600;\n            color: var(--primary-700);\n            margin-bottom: 1rem;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .reasoning-content {\n            font-size: 0.875rem;\n            color: var(--gray-700);\n            line-height: 1.5;\n        }\n        \n        .section-title {\n            font-size: 1.25rem;\n            font-weight: 600;\n            color: var(--gray-900);\n            margin-bottom: 1rem;\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n        \n        /* Responsive Design */\n        @media (max-width: 768px) {\n            .grid-layout {\n                grid-template-columns: 1fr;\n                gap: 1rem;\n            }\n            \n            .main-container {\n                padding: 1rem;\n            }\n            \n            .header-content {\n                padding: 0 1rem;\n            }\n            \n            .charts-grid {\n                grid-template-columns: 1fr;\n                gap: 1rem;\n            }\n            \n            .suggestions-grid {\n                grid-template-columns: 1fr;\n            }\n            \n            .metrics-grid {\n                grid-template-columns: repeat(2, 1fr);\n            }\n        }\n        \n        /* Animations */\n        .fade-in {\n            animation: fadeIn 0.5s ease-out;\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        \n        /* Scrollbar */\n        ::-webkit-scrollbar {\n            width: 6px;\n        }\n        \n        ::-webkit-scrollbar-track {\n            background: var(--gray-100);\n        }\n        \n        ::-webkit-scrollbar-thumb {\n            background: var(--gray-400);\n            border-radius: 3px;\n        }\n        \n        ::-webkit-scrollbar-thumb:hover {\n            background: var(--gray-500);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <div class=\"header-content\">\n            <div class=\"logo\">\n                <div class=\"logo-icon\">\n                    <i data-lucide=\"bar-chart-3\"></i>\n                </div>\n                <div>\n                    <h1>CSV AI Agent</h1>\n                    <p class=\"subtitle\">Professional Data Analytics Platform</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"main-container\">\n        <div class=\"grid-layout\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"upload\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Upload Dataset</h2>\n                </div>\n                <div class=\"file-upload-area\" id=\"uploadArea\" onclick=\"document.getElementById('csvFile').click()\">\n                    <i data-lucide=\"file-plus\" class=\"upload-icon\"></i>\n                    <div class=\"upload-text\">Click to upload or drag and drop</div>\n                    <div class=\"upload-subtext\">CSV files only \u2022 Max 10MB</div>\n                </div>\n                <div id=\"fileSelected\" class=\"file-selected\" style=\"display: none;\">\n                    <i data-lucide=\"file-check\"></i>\n                    <span id=\"fileName\"></span>\n                    <button onclick=\"clearFile()\" style=\"margin-left: auto; background: none; border: none; color: var(--gray-500); cursor: pointer;\">\n                        <i data-lucide=\"x\"></i>\n                    </button>\n                </div>\n                <div id=\"uploadProgress\" class=\"upload-progress\">\n                    <div style=\"display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;\">\n                        <div class=\"loading-spinner\"></div>\n                        <span>Uploading and analyzing your data...</span>\n                    </div>\n                    <div class=\"progress-bar\">\n                        <div class=\"progress-fill\" style=\"width: 100%;\"></div>\n                    </div>\n                </div>\n                <input type=\"file\" id=\"csvFile\" accept=\".csv\" class=\"file-input\">\n                <button id=\"uploadBtn\" onclick=\"uploadFile()\" class=\"btn btn-primary\" style=\"margin-top: 1rem; width: 100%;\" disabled>\n                    <i data-lucide=\"zap\" class=\"btn-icon\"></i>\n                    Analyze Dataset\n                </button>\n                <div id=\"uploadStatus\"></div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"message-circle\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Query Interface</h2>\n                </div>\n                <textarea id=\"promptInput\" class=\"prompt-input\" placeholder=\"Ask questions about your data...\n\nExamples:\n\u2022 Show revenue trends over time\n\u2022 Compare performance by category  \n\u2022 Display top 10 products by sales\n\u2022 Create a correlation analysis\"></textarea>\n                <button onclick=\"generateChart()\" class=\"btn btn-primary\" style=\"margin-top: 1rem; width: 100%;\">\n                    <i data-lucide=\"sparkles\" class=\"btn-icon\"></i>\n                    Generate Visualization\n                </button>\n                <div id=\"queryStatus\"></div>\n            </div>\n        </div>\n\n        <div id=\"analysisResults\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"brain\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">AI Analysis Results</h2>\n                </div>\n                <div id=\"analysisContent\"></div>\n            </div>\n        </div>\n\n        <div id=\"autoChartsSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"bar-chart\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Automatic Dashboard</h2>\n                </div>\n                <p style=\"color: var(--gray-600); margin-bottom: 1.5rem;\">AI-generated visualizations based on your data characteristics</p>\n                <div id=\"autoCharts\" class=\"charts-grid\"></div>\n            </div>\n        </div>\n\n        <div id=\"reasoningSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"lightbulb\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">AI Reasoning Process</h2>\n                </div>\n                <div id=\"reasoningContent\" class=\"reasoning-section\"></div>\n            </div>\n        </div>\n\n        <div id=\"chartSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"trending-up\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Custom Visualization</h2>\n                </div>\n                <div id=\"chartContainer\" class=\"chart-container\"></div>\n            </div>\n        </div>\n\n        <div id=\"suggestionsSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"compass\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Suggested Explorations</h2>\n                </div>\n                <p style=\"color: var(--gray-600); margin-bottom: 1.5rem;\">AI-generated questions tailored to your specific dataset</p>\n                <div id=\"suggestions\" class=\"suggestions-grid\"></div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Initialize Lucide icons\n        lucide.createIcons();\n        \n        let currentDatasetId = null;\n        let currentAnalysis = null;\n\n        // Upload and analyze CSV file\n        async function uploadFile() {\n            const fileInput = document.getElementById('csvFile');\n            const statusDiv = document.getElementById('uploadStatus');\n            const uploadProgress = document.getElementById('uploadProgress');\n            const uploadBtn = document.getElementById('uploadBtn');\n\n            if (!fileInput.files || fileInput.files.length === 0) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"alert-circle\"></i>Please select a CSV file first.</div>';\n                lucide.createIcons();\n                return;\n            }\n\n            // Show upload progress\n            uploadProgress.classList.add('show');\n            uploadBtn.disabled = true;\n            uploadBtn.innerHTML = '<div class=\"loading-spinner\"></div>Processing...';\n            statusDiv.innerHTML = '';\n\n            const formData = new FormData();\n            formData.append('file', fileInput.files[0]);\n\n            try {\n                const response = await fetch('/upload', {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const result = await response.json();\n\n                // Hide upload progress\n                uploadProgress.classList.remove('show');\n\n                if (response.ok) {\n                    currentDatasetId = result.datasetId;\n                    currentAnalysis = result.analysis;\n                    \n                    // Show success with prominent styling\n                    statusDiv.innerHTML = '<div class=\"status success\" style=\"font-size: 1rem; padding: 1.5rem; margin: 1.5rem 0; background: var(--success-50); border: 2px solid var(--success-500);\"><i data-lucide=\"check-circle\"></i><strong>Success!</strong> Dataset uploaded and analyzed successfully! Scroll down to see your insights.</div>';\n                    lucide.createIcons();\n                    \n                    // Update button state\n                    uploadBtn.disabled = false;\n                    uploadBtn.innerHTML = '<i data-lucide=\"refresh-cw\" class=\"btn-icon\"></i>Upload New Dataset';\n                    \n                    // Show analysis results with animation\n                    setTimeout(() => {\n                        showAnalysisResults(result.analysis, result.schema, result.sampleRows);\n                        \n                        // Show auto-generated charts  \n                        if (result.analysis.autoCharts && result.analysis.autoCharts.length > 0) {\n                            setTimeout(() => showAutoCharts(result.analysis.autoCharts), 300);\n                        }\n                        \n                        // Show suggested prompts\n                        if (result.analysis.suggestedPrompts) {\n                            setTimeout(() => showSuggestedPrompts(result.analysis.suggestedPrompts), 600);\n                        }\n                        \n                        // Scroll to results\n                        setTimeout(() => {\n                            document.getElementById('analysisResults').scrollIntoView({ \n                                behavior: 'smooth', \n                                block: 'start' \n                            });\n                        }, 800);\n                    }, 500);\n                    \n                } else {\n                    statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i><strong>Upload Failed:</strong> ' + result.error + '</div>';\n                    lucide.createIcons();\n                    \n                    // Reset button\n                    uploadBtn.disabled = false;\n                    uploadBtn.innerHTML = '<i data-lucide=\"zap\" class=\"btn-icon\"></i>Analyze Dataset';\n                }\n            } catch (error) {\n                uploadProgress.classList.remove('show');\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i><strong>Network Error:</strong> ' + error.message + '</div>';\n                lucide.createIcons();\n                \n                // Reset button\n                uploadBtn.disabled = false;\n                uploadBtn.innerHTML = '<i data-lucide=\"zap\" class=\"btn-icon\"></i>Analyze Dataset';\n            }\n        }\n        \n        // Handle file selection\n        function handleFileSelect() {\n            const fileInput = document.getElementById('csvFile');\n            const uploadArea = document.getElementById('uploadArea');\n            const fileSelected = document.getElementById('fileSelected');\n            const fileName = document.getElementById('fileName');\n            const uploadBtn = document.getElementById('uploadBtn');\n            \n            if (fileInput.files && fileInput.files.length > 0) {\n                const file = fileInput.files[0];\n                uploadArea.classList.add('has-file');\n                fileSelected.style.display = 'flex';\n                fileName.textContent = file.name + ' (' + (file.size / 1024 / 1024).toFixed(2) + ' MB)';\n                uploadBtn.disabled = false;\n                lucide.createIcons();\n            }\n        }\n        \n        // Clear file selection\n        function clearFile() {\n            const fileInput = document.getElementById('csvFile');\n            const uploadArea = document.getElementById('uploadArea');\n            const fileSelected = document.getElementById('fileSelected');\n            const uploadBtn = document.getElementById('uploadBtn');\n            const statusDiv = document.getElementById('uploadStatus');\n            \n            fileInput.value = '';\n            uploadArea.classList.remove('has-file');\n            fileSelected.style.display = 'none';\n            uploadBtn.disabled = true;\n            uploadBtn.innerHTML = '<i data-lucide=\"zap\" class=\"btn-icon\"></i>Analyze Dataset';\n            statusDiv.innerHTML = '';\n            \n            // Hide all results sections\n            document.getElementById('analysisResults').style.display = 'none';\n            document.getElementById('autoChartsSection').style.display = 'none';\n            document.getElementById('suggestionsSection').style.display = 'none';\n            document.getElementById('reasoningSection').style.display = 'none';\n            document.getElementById('chartSection').style.display = 'none';\n            \n            lucide.createIcons();\n        }\n\n        // Generate custom chart from user query\n        async function generateChart() {\n            const promptInput = document.getElementById('promptInput');\n            const statusDiv = document.getElementById('queryStatus');\n\n            if (!currentDatasetId) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"alert-circle\"></i>Please upload a CSV file first.</div>';\n                lucide.createIcons();\n                return;\n            }\n\n            if (!promptInput.value.trim()) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"alert-circle\"></i>Please enter a question about your data.</div>';\n                lucide.createIcons();\n                return;\n            }\n\n            statusDiv.innerHTML = '<div class=\"status info\"><div class=\"loading-spinner\"></div>AI is analyzing your request...</div>';\n\n            try {\n                const response = await fetch('/query', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        datasetId: currentDatasetId,\n                        prompt: promptInput.value\n                    })\n                });\n\n                const result = await response.json();\n\n                if (response.ok) {\n                    statusDiv.innerHTML = '<div class=\"status success\"><i data-lucide=\"check-circle\"></i>AI analysis complete! Chart generated successfully!</div>';\n                    lucide.createIcons();\n                    \n                    // Show AI reasoning if available\n                    if (result.reasoning) {\n                        showReasoning(result.reasoning);\n                    }\n                    \n                    // Show the generated chart\n                    showChart(result.chartSpec);\n                    \n                } else {\n                    statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i>Query failed: ' + result.error + '</div>';\n                    lucide.createIcons();\n                }\n            } catch (error) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i>Query error: ' + error.message + '</div>';\n                lucide.createIcons();\n            }\n        }\n\n        // Display analysis results\n        function showAnalysisResults(analysis, schema, sampleRows) {\n            const analysisSection = document.getElementById('analysisResults');\n            const analysisContent = document.getElementById('analysisContent');\n            \n            let metricsHtml = '<div class=\"metrics-grid\">';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + schema.length + '</div><div class=\"metric-label\">Total Columns</div></div>';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + sampleRows.length + '</div><div class=\"metric-label\">Sample Rows</div></div>';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + analysis.dataQuality.completeness + '%</div><div class=\"metric-label\">Data Quality</div></div>';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + schema.filter(col => col.type === 'number').length + '</div><div class=\"metric-label\">Numeric Columns</div></div>';\n            metricsHtml += '</div>';\n            \n            let contentHtml = metricsHtml;\n            contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"file-text\"></i>Dataset Summary</h3>';\n            contentHtml += '<p style=\"color: var(--gray-700); line-height: 1.6; margin-bottom: 1.5rem;\">' + analysis.summary + '</p>';\n            \n            contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"eye\"></i>Key Insights</h3>';\n            contentHtml += '<ul class=\"insights-list\">';\n            analysis.insights.forEach(insight => {\n                contentHtml += '<li>' + insight + '</li>';\n            });\n            contentHtml += '</ul>';\n            \n            if (analysis.businessInsights) {\n                contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"target\"></i>Business Insights</h3>';\n                contentHtml += '<ul class=\"insights-list\">';\n                analysis.businessInsights.forEach(insight => {\n                    contentHtml += '<li>' + insight + '</li>';\n                });\n                contentHtml += '</ul>';\n            }\n            \n            if (analysis.dataQuality.issues.length > 0) {\n                contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"alert-triangle\"></i>Data Quality Issues</h3>';\n                contentHtml += '<ul class=\"insights-list\">';\n                analysis.dataQuality.issues.forEach(issue => {\n                    contentHtml += '<li>' + issue + '</li>';\n                });\n                contentHtml += '</ul>';\n            }\n            \n            analysisContent.innerHTML = contentHtml;\n            analysisSection.style.display = 'block';\n            lucide.createIcons();\n        }\n\n        // Display auto-generated charts\n        function showAutoCharts(autoCharts) {\n            const autoChartsSection = document.getElementById('autoChartsSection');\n            const autoChartsContainer = document.getElementById('autoCharts');\n            \n            autoChartsContainer.innerHTML = '';\n            \n            autoCharts.forEach((chart, index) => {\n                const chartDiv = document.createElement('div');\n                chartDiv.className = 'chart-container';\n                chartDiv.innerHTML = '<h3 class=\"chart-title\">' + chart.title + '</h3><p class=\"chart-description\">' + chart.description + '</p><div id=\"autoChart' + index + '\" style=\"height: 400px;\"></div>';\n                autoChartsContainer.appendChild(chartDiv);\n                \n                // Render the chart\n                setTimeout(() => {\n                    try {\n                        Plotly.newPlot('autoChart' + index, chart.chartSpec.data, {\n                            ...chart.chartSpec.layout,\n                            font: { family: 'Inter, sans-serif', size: 12, color: '#1e293b' },\n                            plot_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                            paper_bgcolor: 'rgba(255, 255, 255, 0.8)'\n                        }, {\n                            responsive: true,\n                            displayModeBar: true,\n                            displaylogo: false,\n                            modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d']\n                        });\n                    } catch (error) {\n                        console.error('Auto chart rendering error:', error);\n                        document.getElementById('autoChart' + index).innerHTML = '<div style=\"text-align: center; color: var(--gray-500); padding: 40px;\"><i data-lucide=\"alert-circle\" style=\"width: 2rem; height: 2rem; margin-bottom: 1rem;\"></i><p>Chart rendering failed</p><small>Chart type: ' + (chart.chartSpec.data[0]?.type || 'unknown') + '</small></div>';\n                        lucide.createIcons();\n                    }\n                }, 100 * index);\n            });\n            \n            autoChartsSection.style.display = 'block';\n        }\n\n        // Display AI reasoning process\n        function showReasoning(reasoning) {\n            const reasoningSection = document.getElementById('reasoningSection');\n            const reasoningContent = document.getElementById('reasoningContent');\n            \n            let contentHtml = '<div class=\"reasoning-title\"><i data-lucide=\"brain\"></i>AI Analysis Process</div>';\n            contentHtml += '<div class=\"reasoning-content\">';\n            contentHtml += '<p style=\"margin-bottom: 1rem;\">' + reasoning.reasoning + '</p>';\n            contentHtml += '<h4 style=\"font-weight: 600; margin-bottom: 0.5rem; color: var(--gray-800);\">Chart Selection</h4>';\n            contentHtml += '<p style=\"margin-bottom: 0.5rem;\"><strong>Recommended Chart Type:</strong> ' + reasoning.recommendedChartType + '</p>';\n            contentHtml += '<p style=\"margin-bottom: 0.5rem;\"><strong>Primary Variables:</strong> ' + reasoning.primaryVariables.join(', ') + '</p>';\n            contentHtml += '<p style=\"margin-bottom: 1rem;\"><strong>Expected Outcome:</strong> ' + reasoning.expectedOutcome + '</p>';\n            \n            if (reasoning.considerations) {\n                contentHtml += '<h4 style=\"font-weight: 600; margin-bottom: 0.5rem; color: var(--gray-800);\">Key Considerations</h4>';\n                contentHtml += '<ul style=\"list-style: disc; margin-left: 1.5rem;\">';\n                reasoning.considerations.forEach(consideration => {\n                    contentHtml += '<li style=\"margin-bottom: 0.25rem;\">' + consideration + '</li>';\n                });\n                contentHtml += '</ul>';\n            }\n            \n            contentHtml += '</div>';\n            reasoningContent.innerHTML = contentHtml;\n            reasoningSection.style.display = 'block';\n            lucide.createIcons();\n        }\n\n        // Display generated chart\n        function showChart(chartSpec) {\n            const chartSection = document.getElementById('chartSection');\n            const chartContainer = document.getElementById('chartContainer');\n            \n            try {\n                // Clear any existing chart\n                chartContainer.innerHTML = '<div id=\"customChart\" style=\"height: 500px;\"></div>';\n                \n                // Create new chart with professional styling\n                Plotly.newPlot('customChart', chartSpec.data, {\n                    ...chartSpec.layout,\n                    font: { family: 'Inter, sans-serif', size: 12, color: '#1e293b' },\n                    plot_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                    paper_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                    margin: { l: 60, r: 40, t: 60, b: 60 }\n                }, {\n                    responsive: true,\n                    displayModeBar: true,\n                    displaylogo: false,\n                    modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d', 'autoScale2d']\n                });\n                \n                chartSection.style.display = 'block';\n                \n                // Scroll to chart\n                chartSection.scrollIntoView({ behavior: 'smooth' });\n                \n            } catch (plotError) {\n                console.error('Plotly error:', plotError);\n                chartContainer.innerHTML = '<div style=\"padding: 40px; text-align: center; color: var(--gray-500); background: var(--gray-50); border-radius: var(--border-radius-lg);\"><i data-lucide=\"alert-circle\" style=\"width: 2rem; height: 2rem; margin-bottom: 1rem;\"></i><h3>Chart Rendering Failed</h3><p>The AI generated a chart specification, but it could not be rendered properly.</p><details style=\"margin-top: 20px; text-align: left;\"><summary style=\"cursor: pointer; font-weight: 600; color: var(--primary-600);\">View Raw Chart Specification</summary><pre style=\"background: white; padding: 15px; border-radius: 8px; overflow: auto; margin-top: 10px; font-size: 12px; border: 1px solid var(--gray-200);\">' + JSON.stringify(chartSpec, null, 2) + '</pre></details></div>';\n                chartSection.style.display = 'block';\n                lucide.createIcons();\n            }\n        }\n\n        // Display suggested prompts\n        function showSuggestedPrompts(suggestedPrompts) {\n            const suggestionsSection = document.getElementById('suggestionsSection');\n            const suggestionsContainer = document.getElementById('suggestions');\n            \n            let contentHtml = '';\n            suggestedPrompts.forEach(prompt => {\n                contentHtml += '<div class=\"suggestion-card\" onclick=\"setQuery(\\\\'' + prompt.prompt + '\\\\')\"><div class=\"suggestion-title\">' + prompt.prompt + '</div><div class=\"suggestion-description\">' + prompt.description + '</div><span class=\"suggestion-category\">' + prompt.category + '</span></div>';\n            });\n            \n            suggestionsContainer.innerHTML = contentHtml;\n            suggestionsSection.style.display = 'block';\n        }\n\n        // Set query in prompt input\n        function setQuery(query) {\n            document.getElementById('promptInput').value = query;\n            document.getElementById('promptInput').focus();\n        }\n\n        // Add keyboard shortcuts\n        document.getElementById('promptInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter' && e.ctrlKey) {\n                generateChart();\n            }\n        });\n\n        // Add file selection event listener\n        document.getElementById('csvFile').addEventListener('change', handleFileSelect);\n\n        // Add file drag and drop functionality\n        const fileInput = document.getElementById('csvFile');\n        const uploadArea = document.querySelector('.file-upload-area');\n\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            uploadArea.addEventListener(eventName, preventDefaults, false);\n        });\n\n        ['dragenter', 'dragover'].forEach(eventName => {\n            uploadArea.addEventListener(eventName, highlight, false);\n        });\n\n        ['dragleave', 'drop'].forEach(eventName => {\n            uploadArea.addEventListener(eventName, unhighlight, false);\n        });\n\n        uploadArea.addEventListener('drop', handleDrop, false);\n\n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        function highlight() {\n            uploadArea.classList.add('dragover');\n        }\n\n        function unhighlight() {\n            uploadArea.classList.remove('dragover');\n        }\n\n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n\n            if (files.length > 0 && files[0].name.endsWith('.csv')) {\n                fileInput.files = files;\n                handleFileSelect(); // Show file selected state\n            } else {\n                const statusDiv = document.getElementById('uploadStatus');\n                statusDiv.innerHTML = '<div class=\"status warning\"><i data-lucide=\"alert-triangle\"></i>Please select a valid CSV file.</div>';\n                lucide.createIcons();\n            }\n        }\n    </script>\n</body>\n</html>`;\n}"],
  "mappings": "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",
  "names": ["e", "i", "r", "n", "m", "s", "a", "o", "h", "u", "d", "f", "l", "c", "p", "y", "g", "_", "t", "E", "v", "b", "SYSTEM_PROMPTS"]
}
