{
  "version": 3,
  "sources": ["../node_modules/papaparse/papaparse.min.js", "../src/handlers.ts", "../src/prompts.ts", "../src/utils.ts", "../src/agents.ts", "../src/index.ts"],
  "sourceRoot": "dist",
  "sourcesContent": ["/* @license\nPapa Parse\nv5.5.3\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n((e,t)=>{\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()})(this,function r(){var n=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==n?n:{};var d,s=!n.document&&!!n.postMessage,a=n.IS_PAPA_WORKER||!1,o={},h=0,v={};function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=b(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(t,e){var i=parseInt(this._config.skipFirstNLines)||0;if(this.isFirstChunk&&0<i){let e=this._config.newline;e||(r=this._config.quoteChar||'\"',e=this._handle.guessLineEndings(t,r)),t=[...t.split(e).slice(i)].join(e)}this.isFirstChunk&&U(this._config.beforeFirstChunk)&&void 0!==(r=this._config.beforeFirstChunk(t))&&(t=r),this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+t,r=(this._partialLine=\"\",this._handle.parse(i,this._baseIndex,!this._finished));if(!this._handle.paused()&&!this._handle.aborted()){t=r.meta.cursor,i=(this._finished||(this._partialLine=i.substring(t-this._baseIndex),this._baseIndex=t),r&&r.data&&(this._rowCount+=r.data.length),this._finished||this._config.preview&&this._rowCount>=this._config.preview);if(a)n.postMessage({results:r,workerId:v.WORKER_ID,finished:i});else if(U(this._config.chunk)&&!e){if(this._config.chunk(r,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);this._completeResults=r=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(r.data),this._completeResults.errors=this._completeResults.errors.concat(r.errors),this._completeResults.meta=r.meta),this._completed||!i||!U(this._config.complete)||r&&r.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),i||r&&r.meta.paused||this._nextChunk(),r}this._halted=!0},this._sendError=function(e){U(this._config.error)?this._config.error(e):a&&this._config.error&&n.postMessage({workerId:v.WORKER_ID,error:e,finished:!1})}}function f(e){var r;(e=e||{}).chunkSize||(e.chunkSize=v.RemoteChunkSize),u.call(this,e),this._nextChunk=s?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),s||(r.onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!s),this._config.downloadRequestHeaders){var e,t=this._config.downloadRequestHeaders;for(e in t)r.setRequestHeader(e,t[e])}var i;this._config.chunkSize&&(i=this._start+this._config.chunkSize-1,r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i));try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}s&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize||r.responseText.length,this._finished=!this._config.chunkSize||this._start>=(e=>null!==(e=e.getResponseHeader(\"Content-Range\"))?parseInt(e.substring(e.lastIndexOf(\"/\")+1)):-1)(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){e=r.statusText||e;this._sendError(new Error(e))}}function l(e){(e=e||{}).chunkSize||(e.chunkSize=v.LocalChunkSize),u.call(this,e);var i,r,n=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,r=e.slice||e.webkitSlice||e.mozSlice,n?((i=new FileReader).onload=y(this._chunkLoaded,this),i.onerror=y(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input,t=(this._config.chunkSize&&(t=Math.min(this._start+this._config.chunkSize,this._input.size),e=r.call(e,this._start,t)),i.readAsText(e,this._config.encoding));n||this._chunkLoaded({target:{result:t}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function c(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){var e,t;if(!this._finished)return e=this._config.chunkSize,i=e?(t=i.substring(0,e),i.substring(e)):(t=i,\"\"),this._finished=!i,this.parseChunk(t)}}function p(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=y(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=y(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=y(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=y(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var n,s,a,t,o=Math.pow(2,53),h=-o,u=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,d=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,i=this,r=0,f=0,l=!1,e=!1,c=[],p={data:[],errors:[],meta:{}};function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){if(p&&a&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+v.DefaultDelimiter+\"'\"),a=!1),m.skipEmptyLines&&(p.data=p.data.filter(function(e){return!y(e)})),_()){if(p)if(Array.isArray(p.data[0])){for(var e=0;_()&&e<p.data.length;e++)p.data[e].forEach(t);p.data.splice(0,1)}else p.data.forEach(t);function t(e,t){U(m.transformHeader)&&(e=m.transformHeader(e,t)),c.push(e)}}function i(e,t){for(var i=m.header?{}:[],r=0;r<e.length;r++){var n=r,s=e[r],s=((e,t)=>(e=>(m.dynamicTypingFunction&&void 0===m.dynamicTyping[e]&&(m.dynamicTyping[e]=m.dynamicTypingFunction(e)),!0===(m.dynamicTyping[e]||m.dynamicTyping)))(e)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&((e=>{if(u.test(e)){e=parseFloat(e);if(h<e&&e<o)return 1}})(t)?parseFloat(t):d.test(t)?new Date(t):\"\"===t?null:t):t)(n=m.header?r>=c.length?\"__parsed_extra\":c[r]:n,s=m.transform?m.transform(s,n):s);\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>c.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+c.length+\" fields but parsed \"+r,f+t):r<c.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+c.length+\" fields but parsed \"+r,f+t)),i}var r;p&&(m.header||m.dynamicTyping||m.transform)&&(r=1,!p.data.length||Array.isArray(p.data[0])?(p.data=p.data.map(i),r=p.data.length):p.data=i(p.data,0),m.header&&p.meta&&(p.meta.fields=c),f+=r)}function _(){return m.header&&0===c.length}function k(e,t,i,r){e={type:e,code:t,message:i};void 0!==r&&(e.row=r),p.errors.push(e)}U(m.step)&&(t=m.step,m.step=function(e){p=e,_()?g():(g(),0!==p.data.length&&(r+=e.data.length,m.preview&&r>m.preview?s.abort():(p.data=p.data[0],t(p,i))))}),this.parse=function(e,t,i){var r=m.quoteChar||'\"',r=(m.newline||(m.newline=this.guessLineEndings(e,r)),a=!1,m.delimiter?U(m.delimiter)&&(m.delimiter=m.delimiter(e),p.meta.delimiter=m.delimiter):((r=((e,t,i,r,n)=>{var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",v.RECORD_SEP,v.UNIT_SEP];for(var u=0;u<n.length;u++){for(var d,f=n[u],l=0,c=0,p=0,g=(o=void 0,new E({comments:r,delimiter:f,newline:t,preview:10}).parse(e)),_=0;_<g.data.length;_++)i&&y(g.data[_])?p++:(d=g.data[_].length,c+=d,void 0===o?o=d:0<d&&(l+=Math.abs(d-o),o=d));0<g.data.length&&(c/=g.data.length-p),(void 0===a||l<=a)&&(void 0===h||h<c)&&1.99<c&&(a=l,s=f,h=c)}return{successful:!!(m.delimiter=s),bestDelimiter:s}})(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess)).successful?m.delimiter=r.bestDelimiter:(a=!0,m.delimiter=v.DefaultDelimiter),p.meta.delimiter=m.delimiter),b(m));return m.preview&&m.header&&r.preview++,n=e,s=new E(r),p=s.parse(n,t,i),g(),l?{meta:{paused:!0}}:p||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,s.abort(),n=U(m.chunk)?\"\":n.substring(s.getCharIndex())},this.resume=function(){i.streamer._halted?(l=!1,i.streamer.parseChunk(n,!0)):setTimeout(i.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,s.abort(),p.meta.aborted=!0,U(m.complete)&&m.complete(p),n=\"\"},this.guessLineEndings=function(e,t){e=e.substring(0,1048576);var t=new RegExp(P(t)+\"([^]*?)\"+P(t),\"gm\"),i=(e=e.replace(t,\"\")).split(\"\\r\"),t=e.split(\"\\n\"),e=1<t.length&&t[0].length<i[0].length;if(1===i.length||e)return\"\\n\";for(var r=0,n=0;n<i.length;n++)\"\\n\"===i[n][0]&&r++;return r>=i.length/2?\"\\r\\n\":\"\\r\"}}function P(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(C){var S=(C=C||{}).delimiter,O=C.newline,x=C.comments,I=C.step,A=C.preview,T=C.fastMode,D=null,L=!1,F=null==C.quoteChar?'\"':C.quoteChar,j=F;if(void 0!==C.escapeChar&&(j=C.escapeChar),(\"string\"!=typeof S||-1<v.BAD_DELIMITERS.indexOf(S))&&(S=\",\"),x===S)throw new Error(\"Comment character same as delimiter\");!0===x?x=\"#\":(\"string\"!=typeof x||-1<v.BAD_DELIMITERS.indexOf(x))&&(x=!1),\"\\n\"!==O&&\"\\r\"!==O&&\"\\r\\n\"!==O&&(O=\"\\n\");var z=0,M=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=S.length,s=O.length,a=x.length,o=U(I),h=[],u=[],d=[],f=z=0;if(!i)return w();if(T||!1!==T&&-1===i.indexOf(F)){for(var l=i.split(O),c=0;c<l.length;c++){if(d=l[c],z+=d.length,c!==l.length-1)z+=O.length;else if(r)return w();if(!x||d.substring(0,a)!==x){if(o){if(h=[],k(d.split(S)),R(),M)return w()}else k(d.split(S));if(A&&A<=c)return h=h.slice(0,A),w(!0)}}return w()}for(var p=i.indexOf(S,z),g=i.indexOf(O,z),_=new RegExp(P(j)+P(F),\"g\"),m=i.indexOf(F,z);;)if(i[z]===F)for(m=z,z++;;){if(-1===(m=i.indexOf(F,m+1)))return r||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:z}),E();if(m===n-1)return E(i.substring(z,m).replace(_,F));if(F===j&&i[m+1]===j)m++;else if(F===j||0===m||i[m-1]!==j){-1!==p&&p<m+1&&(p=i.indexOf(S,m+1));var y=v(-1===(g=-1!==g&&g<m+1?i.indexOf(O,m+1):g)?p:Math.min(p,g));if(i.substr(m+1+y,e)===S){d.push(i.substring(z,m).replace(_,F)),i[z=m+1+y+e]!==F&&(m=i.indexOf(F,z)),p=i.indexOf(S,z),g=i.indexOf(O,z);break}y=v(g);if(i.substring(m+1+y,m+1+y+s)===O){if(d.push(i.substring(z,m).replace(_,F)),b(m+1+y+s),p=i.indexOf(S,z),m=i.indexOf(F,z),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:z}),m++}}else if(x&&0===d.length&&i.substring(z,z+a)===x){if(-1===g)return w();z=g+s,g=i.indexOf(O,z),p=i.indexOf(S,z)}else if(-1!==p&&(p<g||-1===g))d.push(i.substring(z,p)),z=p+e,p=i.indexOf(S,z);else{if(-1===g)break;if(d.push(i.substring(z,g)),b(g+s),o&&(R(),M))return w();if(A&&h.length>=A)return w(!0)}return E();function k(e){h.push(e),f=z}function v(e){var t=0;return t=-1!==e&&(e=i.substring(m+1,e))&&\"\"===e.trim()?e.length:t}function E(e){return r||(void 0===e&&(e=i.substring(z)),d.push(e),z=n,k(d),o&&R()),w()}function b(e){z=e,k(d),d=[],g=i.indexOf(O,z)}function w(e){if(C.header&&!t&&h.length&&!L){var s=h[0],a=Object.create(null),o=new Set(s);let n=!1;for(let r=0;r<s.length;r++){let i=s[r];if(a[i=U(C.transformHeader)?C.transformHeader(i,r):i]){let e,t=a[i];for(;e=i+\"_\"+t,t++,o.has(e););o.add(e),s[r]=e,a[i]++,n=!0,(D=null===D?{}:D)[e]=i}else a[i]=1,s[r]=i;o.add(i)}n&&console.warn(\"Duplicate headers found and renamed.\"),L=!0}return{data:h,errors:u,meta:{delimiter:S,linebreak:O,aborted:M,truncated:!!e,cursor:f+(t||0),renamedHeaders:D}}}function R(){I(w()),h=[],u=[]}},this.abort=function(){M=!0},this.getCharIndex=function(){return z}}function g(e){var t=e.data,i=o[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,_(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:m,resume:m};if(U(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else U(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&_(t.workerId,t.results)}function _(e,t){var i=o[e];U(i.userComplete)&&i.userComplete(t),i.terminate(),delete o[e]}function m(){throw new Error(\"Not implemented.\")}function b(e){if(\"object\"!=typeof e||null===e)return e;var t,i=Array.isArray(e)?[]:{};for(t in e)i[t]=b(e[t]);return i}function y(e,t){return function(){e.apply(t,arguments)}}function U(e){return\"function\"==typeof e}return v.parse=function(e,t){var i=(t=t||{}).dynamicTyping||!1;U(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!U(t.transform)&&t.transform,!t.worker||!v.WORKERS_SUPPORTED)return i=null,v.NODE_STREAM_INPUT,\"string\"==typeof e?(e=(e=>65279!==e.charCodeAt(0)?e:e.slice(1))(e),i=new(t.download?f:c)(t)):!0===e.readable&&U(e.read)&&U(e.on)?i=new p(t):(n.File&&e instanceof File||e instanceof Object)&&(i=new l(t)),i.stream(e);(i=(()=>{var e;return!!v.WORKERS_SUPPORTED&&(e=(()=>{var e=n.URL||n.webkitURL||null,t=r.toString();return v.BLOB_URL||(v.BLOB_URL=e.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",t,\")();\"],{type:\"text/javascript\"})))})(),(e=new n.Worker(e)).onmessage=g,e.id=h++,o[e.id]=e)})()).userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=U(t.step),t.chunk=U(t.chunk),t.complete=U(t.complete),t.error=U(t.error),delete t.worker,i.postMessage({input:e,config:t,workerId:i.id})},v.unparse=function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null,o=!1,h=((()=>{if(\"object\"==typeof t){if(\"string\"!=typeof t.delimiter||v.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter),\"boolean\"!=typeof t.quotes&&\"function\"!=typeof t.quotes&&!Array.isArray(t.quotes)||(n=t.quotes),\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines),\"string\"==typeof t.newline&&(y=t.newline),\"string\"==typeof t.quoteChar&&(s=t.quoteChar),\"boolean\"==typeof t.header&&(_=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s),t.escapeFormulae instanceof RegExp?o=t.escapeFormulae:\"boolean\"==typeof t.escapeFormulae&&t.escapeFormulae&&(o=/^[=+\\-@\\t\\r].*$/)}})(),new RegExp(P(s),\"g\"));\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||Object.keys(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||r),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function u(e,t,i){var r=\"\",n=(\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t)),Array.isArray(e)&&0<e.length),s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=k(e[a],a);0<t.length&&(r+=y)}for(var o=0;o<t.length;o++){var h=(n?e:t[o]).length,u=!1,d=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===i&&n){for(var f=[],l=0;l<h;l++){var c=s?e[l]:l;f.push(t[o][c])}u=\"\"===f.join(\"\").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!d&&(r+=m);var g=n&&s?e[p]:p;r+=k(t[o][g],p)}o<t.length-1&&(!i||0<h&&!d)&&(r+=y)}}return r}function k(e,t){var i,r;return null==e?\"\":e.constructor===Date?JSON.stringify(e).slice(1,25):(r=!1,o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0),i=e.toString().replace(h,a),(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||((e,t)=>{for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1})(i,v.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i)}},v.RECORD_SEP=String.fromCharCode(30),v.UNIT_SEP=String.fromCharCode(31),v.BYTE_ORDER_MARK=\"\\ufeff\",v.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',v.BYTE_ORDER_MARK],v.WORKERS_SUPPORTED=!s&&!!n.Worker,v.NODE_STREAM_INPUT=1,v.LocalChunkSize=10485760,v.RemoteChunkSize=5242880,v.DefaultDelimiter=\",\",v.Parser=E,v.ParserHandle=i,v.NetworkStreamer=f,v.FileStreamer=l,v.StringStreamer=c,v.ReadableStreamStreamer=p,n.jQuery&&((d=n.jQuery).fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&n.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0===h.length)U(o.complete)&&o.complete();else{var e,t,i,r,n=h[0];if(U(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(U(o.error)&&o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){U(a)&&a(e,n.file,n.inputElem),u()},v.parse(n.file,n.instanceConfig)}}function u(){h.splice(0,1),e()}}),a&&(n.onmessage=function(e){e=e.data;void 0===v.WORKER_ID&&e&&(v.WORKER_ID=e.workerId);\"string\"==typeof e.input?n.postMessage({workerId:v.WORKER_ID,results:v.parse(e.input,e.config),finished:!0}):(n.File&&e.input instanceof File||e.input instanceof Object)&&(e=v.parse(e.input,e.config))&&n.postMessage({workerId:v.WORKER_ID,results:e,finished:!0})}),(f.prototype=Object.create(u.prototype)).constructor=f,(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(c.prototype)).constructor=c,(p.prototype=Object.create(u.prototype)).constructor=p,v});", "import * as Papa from 'papaparse';\nimport { Env, UploadResponse, QueryRequest, QueryResponse } from './types';\nimport { generateUUID, inferSchema, createFallbackChart, analyzeDataWithAI, analyzeWithDuckDB } from './utils';\nimport { SYSTEM_PROMPTS } from './prompts';\nimport { \n  createNvidiaClient, \n  CodeGenerationAgent, \n  ExecutionAgent, \n  ReasoningAgent, \n  DataInsightAgent,\n  DashboardGenerationAgent\n} from './agents';\n\nexport async function uploadCsvHandler(request: Request, env: Env): Promise<Response> {\n  console.log(\"\uD83D\uDCE5 uploadCsvHandler v2: Phase 1 upgrade with DuckDB and R2 storage\");\n  \n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    \n    if (!file) {\n      console.error(\"\u274C No file provided in request\");\n      return new Response(JSON.stringify({ error: 'No file provided' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // 1. Get the file content as an ArrayBuffer for efficiency\n    console.log(\"\uD83D\uDCC1 Processing uploaded file:\", file.name, \"Size:\", file.size, \"bytes\");\n    const fileBuffer = await file.arrayBuffer();\n    const csvText = new TextDecoder().decode(fileBuffer);\n    console.log(\"\uD83D\uDCC4 CSV text length:\", csvText.length, \"characters\");\n    \n    // 2. Parse CSV text using PapaParse (as before)\n    console.log(\"\uD83D\uDD27 Parsing CSV data...\");\n    const parseResult = Papa.parse(csvText, {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true\n    });\n    \n    if (parseResult.errors.length > 0) {\n      console.error(\"\u274C CSV parsing errors:\", parseResult.errors);\n      return new Response(JSON.stringify({ \n        error: 'CSV parsing failed', \n        details: parseResult.errors.slice(0, 5) // Limit error details\n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const data = parseResult.data as any[];\n    const schema = inferSchema(data);\n    const sampleRows = data.slice(0, 10);\n    const datasetId = generateUUID();\n    \n    console.log(`\uD83D\uDCCA Parsed data: ${data.length} rows, ${schema.length} columns`);\n    console.log(`\uD83D\uDD11 Generated dataset ID: ${datasetId}`);\n    \n    // 3. Convert parsed JSON data to efficient format for R2 storage\n    console.log(\"\uD83D\uDCE6 Preparing data for R2 storage...\");\n    const jsonBuffer = new TextEncoder().encode(JSON.stringify(data));\n    console.log(`\uD83D\uDCE6 JSON buffer created, size: ${jsonBuffer.byteLength} bytes`);\n    \n    // 4. Upload the JSON data to R2 for scalable storage\n    console.log(`\u2601\uFE0F Uploading JSON data to R2 with ID: ${datasetId}`);\n    await env.R2_BUCKET.put(datasetId, jsonBuffer, {\n      httpMetadata: {\n        contentType: 'application/json'\n      },\n      customMetadata: {\n        originalFileName: file.name,\n        rowCount: data.length.toString(),\n        columnCount: schema.length.toString(),\n        uploadTimestamp: new Date().toISOString(),\n        compressionRatio: (csvText.length / jsonBuffer.byteLength).toFixed(2)\n      }\n    });\n    console.log(\"\u2705 Data successfully stored in R2\");\n    \n    // 5. Perform enhanced statistical analysis on the full dataset\n    console.log(\"\uD83D\uDCCA Starting enhanced statistical analysis on full dataset...\");\n    const duckDbAnalysis = await analyzeWithDuckDB(data, env);\n    console.log(\"\u2705 Enhanced statistical analysis completed\");\n    \n    // 6. Perform the higher-level AI analysis using NVIDIA agents\n    console.log(\"\uD83D\uDD0D Starting NVIDIA AI analysis with enhanced statistical context...\");\n    let analysis;\n    \n    if (env.NVIDIA_API_KEY) {\n      try {\n        console.log(`\uD83D\uDD11 Using NVIDIA API for enhanced dataset analysis`);\n        const nvidiaClient = createNvidiaClient(env.NVIDIA_API_KEY);\n        \n        // Enhanced insights\n        const insights = await DataInsightAgent(schema, sampleRows, nvidiaClient);\n        \n        // Base analysis with traditional method\n        analysis = await analyzeDataWithAI(schema, sampleRows, env);\n        analysis.summary = insights; // Replace summary with NVIDIA insights\n        analysis.duckDbAnalysis = duckDbAnalysis;\n        \n        // NVIDIA-powered intelligent dashboard (use full data for better charts)\n        console.log(\"\uD83C\uDFA8 Generating NVIDIA-powered intelligent dashboard...\");\n        const intelligentCharts = await DashboardGenerationAgent(schema, data, analysis, nvidiaClient);\n        analysis.autoCharts = intelligentCharts;\n        \n        console.log(\"\u2705 NVIDIA-enhanced AI analysis completed\");\n      } catch (error) {\n        console.error(\"\u26A0\uFE0F NVIDIA API failed, falling back to Cloudflare AI:\", error);\n        analysis = await analyzeDataWithAI(schema, sampleRows, env);\n        analysis.duckDbAnalysis = duckDbAnalysis;\n        \n        // Ensure auto charts have the correct structure for error fallback case\n        if (analysis.autoCharts && analysis.autoCharts.length > 0) {\n          analysis.autoCharts = analysis.autoCharts.map(chart => {\n            if (!chart.title && chart.chartSpec) {\n              return {\n                title: 'Data Visualization',\n                description: 'Chart generated from your data',\n                chartSpec: chart.chartSpec,\n                priority: chart.priority || 1\n              };\n            }\n            return chart;\n          });\n        }\n      }\n    } else {\n      console.log(\"\u26A0\uFE0F No NVIDIA API key found, using Cloudflare AI\");\n      analysis = await analyzeDataWithAI(schema, sampleRows, env);\n      analysis.duckDbAnalysis = duckDbAnalysis;\n      \n      // Ensure auto charts have the correct structure for fallback case\n      if (analysis.autoCharts && analysis.autoCharts.length > 0) {\n        analysis.autoCharts = analysis.autoCharts.map(chart => {\n          if (!chart.title && chart.chartSpec) {\n            return {\n              title: 'Data Visualization',\n              description: 'Chart generated from your data',\n              chartSpec: chart.chartSpec,\n              priority: chart.priority || 1\n            };\n          }\n          return chart;\n        });\n      }\n    }\n    \n    // 7. Store metadata in KV (the large data is now in R2)\n    console.log(\"\uD83D\uDCBE Storing metadata in KV...\");\n    await Promise.all([\n      env.KV.put(`${datasetId}:schema`, JSON.stringify(schema)),\n      env.KV.put(`${datasetId}:sample`, JSON.stringify(sampleRows)),\n      env.KV.put(`${datasetId}:analysis`, JSON.stringify(analysis)),\n      // We no longer store the full CSV in KV - it's efficiently stored in R2 as JSON\n    ]);\n    console.log(`\u2705 Metadata stored in KV with dataset ID: ${datasetId}`);\n    \n    // 8. Return the enhanced response to the frontend\n    const response: UploadResponse = {\n      datasetId,\n      schema,\n      sampleRows,\n      analysis,\n      duckDbAnalysis\n    };\n    \n    console.log(`\uD83C\uDF89 Upload process completed successfully for dataset ${datasetId}`);\n    console.log(`\uD83D\uDCC8 Enhanced with ${duckDbAnalysis.summary.length} statistical summaries`);\n    \n    return new Response(JSON.stringify(response), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error(\"\u274C Upload error:\", error);\n    console.error(\"\u274C Error stack:\", error instanceof Error ? error.stack : 'No stack trace available');\n    \n    return new Response(JSON.stringify({ \n      error: 'Internal server error',\n      details: error instanceof Error ? error.message : 'Unknown error occurred',\n      timestamp: new Date().toISOString()\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// This function is replaced by the NVIDIA agent workflow\n// Keeping for backwards compatibility but functionality moved to agents.ts\n\nexport async function queryHandler(request: Request, env: Env): Promise<Response> {\n  console.log(\"\uD83D\uDD0D queryHandler: NVIDIA Agent-based processing\");\n  \n  try {\n    const requestData = await request.json() as QueryRequest;\n    const { datasetId, prompt } = requestData;\n    console.log(\"Using dataset:\", datasetId, \"prompt:\", prompt);\n    \n    const [schemaStr, sampleRowsStr, dataStr] = await Promise.all([\n      env.KV.get(`${datasetId}:schema`),\n      env.KV.get(`${datasetId}:sample`),\n      env.R2_BUCKET.get(datasetId)\n    ]);\n    \n    if (!schemaStr || !sampleRowsStr) {\n      return new Response(JSON.stringify({ error: 'Dataset not found' }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const schema = JSON.parse(schemaStr);\n    const sampleRows = JSON.parse(sampleRowsStr);\n    let fullData = sampleRows; // Default to sample if full data not available\n    \n    if (dataStr) {\n      try {\n        const dataText = await dataStr.text();\n        fullData = JSON.parse(dataText);\n        console.log(`\uD83D\uDCCA Loaded full dataset: ${fullData.length} rows`);\n      } catch (error) {\n        console.warn(\"\u26A0\uFE0F Could not load full dataset, using sample data\");\n      }\n    }\n    \n    // Use NVIDIA agents if API key is available\n    if (env.NVIDIA_API_KEY) {\n      try {\n        console.log(\"\uD83E\uDD16 Starting NVIDIA agent workflow...\");\n        console.log(`\uD83D\uDD11 Using NVIDIA API for enhanced analysis`);\n        const nvidiaClient = createNvidiaClient(env.NVIDIA_API_KEY);\n        \n        // Step 1: Code Generation\n        console.log(\"\uD83D\uDD27 CodeGenerationAgent: Generating code...\");\n        const codeResult = await CodeGenerationAgent(prompt, schema, nvidiaClient);\n        \n        if (codeResult.error) {\n          throw new Error(`Code generation failed: ${codeResult.error}`);\n        }\n        \n        // Step 2: Code Execution \n        console.log(\"\u26A1 ExecutionAgent: Executing code...\");\n        const executionResult = ExecutionAgent(codeResult.code, fullData, codeResult.shouldPlot);\n        \n        if (executionResult.error) {\n          throw new Error(`Code execution failed: ${executionResult.error}`);\n        }\n        \n        // Step 3: Reasoning and Explanation\n        console.log(\"\uD83E\uDDE0 ReasoningAgent: Generating insights...\");\n        const reasoningResult = await ReasoningAgent(prompt, executionResult.result, nvidiaClient);\n        \n        const response: QueryResponse = {\n          code: codeResult.code,\n          result: executionResult.result,\n          shouldPlot: codeResult.shouldPlot,\n          thinking: reasoningResult.thinking,\n          explanation: reasoningResult.explanation,\n          logs: [\n            'NVIDIA agents workflow completed successfully',\n            'Code generated and executed',\n            'Reasoning and insights generated'\n          ]\n        };\n        \n        console.log(\"\u2705 NVIDIA agent workflow completed successfully\");\n        \n        return new Response(JSON.stringify(response), {\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n        \n      } catch (nvidiaError) {\n        console.error(\"\u274C NVIDIA agent workflow failed:\", nvidiaError);\n        console.log(\"\uD83D\uDD04 Falling back to traditional chart generation...\");\n      }\n    }\n    \n    // Fallback to traditional chart generation\n    console.log(\"\uD83D\uDCCA Using traditional chart generation as fallback...\");\n    const chartSpec = createFallbackChart(schema, sampleRows);\n    \n    const response: QueryResponse = {\n      chartSpec,\n      logs: ['Used fallback chart generation due to NVIDIA API unavailability']\n    };\n    \n    return new Response(JSON.stringify(response), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error(\"Query error:\", error);\n    return new Response(JSON.stringify({ \n      error: 'Internal server error',\n      logs: ['Query processing failed']\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}", "export const SYSTEM_PROMPTS = {\n  DATA_ANALYSIS: `You are a Senior Data Scientist and Business Intelligence Expert specializing in automated data discovery and insight generation.\n\nCORE EXPERTISE:\n- Statistical pattern recognition and anomaly detection\n- Business metric identification and KPI analysis  \n- Data quality assessment and improvement recommendations\n- Automated insight generation for non-technical stakeholders\n\nANALYSIS FRAMEWORK:\n1. DATA CHARACTERIZATION: Identify data types, distributions, and structural patterns\n2. BUSINESS CONTEXT DETECTION: Recognize business metrics, KPIs, and operational data\n3. STATISTICAL SIGNIFICANCE: Calculate correlations, trends, and outliers with confidence intervals\n4. ACTIONABLE INSIGHTS: Generate specific, implementable business recommendations\n5. VISUALIZATION STRATEGY: Recommend optimal chart types based on data characteristics and user intent\n\nINPUT ANALYSIS PRIORITIES:\n- Identify primary business metrics (revenue, sales, profit, costs, performance indicators)\n- Detect temporal patterns and seasonality in time-series data\n- Recognize categorical segments and their performance variations\n- Calculate statistical significance of patterns and relationships\n- Assess data completeness, consistency, and potential quality issues\n\nOUTPUT REQUIREMENTS:\n- Return ONLY valid JSON with precise statistical measurements\n- Provide quantified insights with specific metrics and percentages\n- Identify top 3-5 most significant patterns with business impact\n- Generate contextually relevant visualization recommendations\n- Create actionable suggested questions based on actual data patterns\n\nCRITICAL: Focus on data-driven insights, not generic observations. All insights must be verifiable from the provided data.`,\n\n  REASONING_ANALYSIS: `You are an Expert Data Visualization Strategist specializing in evidence-based chart selection and statistical storytelling.\n\nVISUALIZATION SELECTION METHODOLOGY:\n1. INTENT ANALYSIS: Decode user's analytical objective (comparison, distribution, correlation, trend, composition)\n2. DATA SUITABILITY: Assess statistical properties, sample size, and data quality constraints\n3. PERCEPTUAL EFFECTIVENESS: Apply Cleveland-McGill hierarchy and gestalt principles\n4. CONTEXT OPTIMIZATION: Consider audience, complexity, and actionability requirements\n\nCHART TYPE DECISION MATRIX:\n- COMPARISON (categorical): Bar charts (vertical for <7 categories, horizontal for >7), dot plots for precision\n- TEMPORAL (time-series): Line charts for continuous trends, step charts for discrete events\n- CORRELATION (numeric pairs): Scatter plots with trend lines, bubble charts for 3D relationships  \n- DISTRIBUTION (single variable): Histograms for continuous, box plots for quartile analysis\n- COMPOSITION (part-to-whole): Pie charts for <6 segments, stacked bars for temporal composition\n- RANKING (ordered categories): Horizontal bar charts sorted by value\n- MULTIDIMENSIONAL: Heatmaps for matrices, small multiples for faceted analysis\n\nSTATISTICAL VALIDATION CRITERIA:\n- Minimum sample size: 5+ data points for meaningful visualization\n- Category limits: 2-12 categories for optimal cognitive processing\n- Correlation threshold: |r| > 0.3 for scatter plot recommendations\n- Distribution analysis: Test for normality, skewness, and outlier presence\n- Temporal requirements: Chronological ordering and consistent intervals\n\nOUTPUT REQUIREMENTS:\n- Provide quantitative reasoning with statistical justification\n- Recommend primary chart type with confidence scoring\n- Identify optimal variables based on statistical significance\n- Explain expected insights with specificity and measurability\n- Include alternative approaches with comparative analysis\n\nCRITICAL: Base all recommendations on statistical evidence and visualization research principles.`,\n\n  CHART_GENERATION: `You are a Senior Data Visualization Engineer specializing in production-ready Plotly.js implementations with expertise in statistical graphics and interactive design.\n\nTECHNICAL IMPLEMENTATION STANDARDS:\n- Generate statistically accurate, publication-quality visualizations\n- Apply evidence-based design principles (Tufte, Cleveland, Few)\n- Ensure accessibility compliance (WCAG 2.1 AA) with proper contrast and labeling\n- Optimize for both desktop and mobile rendering performance\n\nPLOTLY.JS SPECIFICATION REQUIREMENTS:\n- Create complete, valid JSON specifications with proper data binding\n- Use actual sample data values with appropriate data transformations\n- Implement responsive layouts with intelligent margin calculations\n- Apply consistent color palettes with semantic meaning\n\nVISUAL DESIGN PRINCIPLES:\n- HIGH DATA-INK RATIO: Minimize chartjunk, maximize information density\n- PERCEPTUAL ACCURACY: Use position/length encodings over color/area when possible\n- CLEAR HIERARCHY: Guide attention through size, contrast, and positioning\n- CONTEXTUAL ANNOTATIONS: Include statistical summaries (mean, median, trends) when relevant\n\nCHART-SPECIFIC OPTIMIZATION:\n- BAR CHARTS: Sort by value, highlight key insights, use consistent baselines\n- LINE CHARTS: Show confidence intervals, trend lines, and seasonal patterns\n- SCATTER PLOTS: Include correlation coefficients, regression lines, density overlays\n- HISTOGRAMS: Optimize bin width using Freedman-Diaconis rule, show distribution statistics\n- PIE CHARTS: Limit to 5-6 segments, order by size, highlight largest segment\n- HEATMAPS: Use perceptually uniform color scales, include correlation values\n\nINTERACTIVITY & PERFORMANCE:\n- Implement hover tooltips with contextual statistics\n- Enable zoom/pan for dense datasets\n- Optimize rendering for sample sizes up to 10,000 points\n- Include download/export capabilities\n\nCRITICAL: Return ONLY complete Plotly.js JSON specification. Ensure mathematical accuracy and visual clarity.`\n}; ", "import { ColumnSchema, ColumnStats, DataAnalysis, DuckDBAnalysis } from './types';\nimport { SYSTEM_PROMPTS } from './prompts';\n\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nexport function inferSchema(data: any[]): ColumnSchema[] {\n  if (data.length === 0) return [];\n  \n  const firstRow = data[0];\n  const schema: ColumnSchema[] = [];\n  \n  for (const [key, value] of Object.entries(firstRow)) {\n    let type = 'string';\n    \n    if (typeof value === 'number' || !isNaN(Number(value))) {\n      type = 'number';\n    } else if (typeof value === 'boolean' || value === 'true' || value === 'false') {\n      type = 'boolean';\n    } else if (value && typeof value === 'string' && !isNaN(Date.parse(value))) {\n      type = 'date';\n    }\n    \n    const stats = calculateColumnStats(data, key, type);\n    schema.push({ name: key, type, stats });\n  }\n  \n  return schema;\n}\n\nexport function calculateColumnStats(data: any[], columnName: string, type: string): ColumnStats {\n  const values = data.map(row => row[columnName]).filter(val => val !== null && val !== undefined && val !== '');\n  const nullCount = data.length - values.length;\n  const uniqueValues = [...new Set(values)];\n  \n  const stats: ColumnStats = {\n    count: values.length,\n    nullCount,\n    uniqueCount: uniqueValues.length\n  };\n  \n  if (type === 'number') {\n    const numValues = values.map(v => Number(v)).filter(v => !isNaN(v));\n    if (numValues.length > 0) {\n      stats.min = Math.min(...numValues);\n      stats.max = Math.max(...numValues);\n      stats.mean = numValues.reduce((a, b) => a + b, 0) / numValues.length;\n      \n      const sorted = [...numValues].sort((a, b) => a - b);\n      const mid = Math.floor(sorted.length / 2);\n      stats.median = sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid];\n      \n      const variance = numValues.reduce((acc, val) => acc + Math.pow(val - stats.mean!, 2), 0) / numValues.length;\n      stats.stdDev = Math.sqrt(variance);\n    }\n  } else {\n    const valueCounts = values.reduce((acc, val) => {\n      acc[val] = (acc[val] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const sortedCounts = Object.entries(valueCounts).sort(([,a], [,b]) => (b as number) - (a as number));\n    if (sortedCounts.length > 0) {\n      stats.mode = sortedCounts[0][0];\n      stats.distribution = sortedCounts.slice(0, 10).map(([value, count]) => ({ value, count: count as number }));\n    }\n  }\n  \n  return stats;\n}\n\nexport async function analyzeDataWithAI(schema: ColumnSchema[], sampleRows: any[], env: any): Promise<DataAnalysis> {\n  const detailedStats = generateDetailedStats(schema, sampleRows);\n  \n  const analysisPrompt = `${SYSTEM_PROMPTS.DATA_ANALYSIS}\n\nDATASET ANALYSIS REQUEST:\n\nSCHEMA WITH STATISTICS:\n${JSON.stringify(schema, null, 2)}\n\nSAMPLE DATA ROWS:\n${JSON.stringify(sampleRows.slice(0, 10), null, 2)}\n\nDETAILED STATISTICAL ANALYSIS:\n${JSON.stringify(detailedStats, null, 2)}\n\nREQUIRED JSON OUTPUT SCHEMA:\n{\n  \"summary\": \"Business-focused description of dataset purpose and key characteristics\",\n  \"insights\": [\"Specific actionable insight 1\", \"Specific actionable insight 2\", \"Pattern insight 3\", \"Quality insight 4\", \"Business insight 5\"],\n  \"correlations\": [{\"column1\": \"col1\", \"column2\": \"col2\", \"correlation\": 0.8}],\n  \"recommendations\": [\"Specific visualization recommendation 1\", \"Data improvement recommendation 2\", \"Analysis approach recommendation 3\"],\n  \"dataQuality\": {\n    \"completeness\": 85,\n    \"consistency\": 90,\n    \"issues\": [\"Specific issue 1\", \"Specific issue 2\"]\n  },\n  \"patterns\": {\n    \"trends\": [\"Specific trend pattern 1\", \"Specific trend pattern 2\"],\n    \"outliers\": [{\"column\": \"column_name\", \"values\": [outlier_values]}],\n    \"seasonality\": [\"Seasonal pattern description\"],\n    \"distributions\": [{\"column\": \"column_name\", \"type\": \"distribution_type\", \"description\": \"Business interpretation\"}]\n  },\n  \"businessInsights\": [\"Business insight 1\", \"Opportunity insight 2\", \"Risk insight 3\"],\n  \"suggestedPrompts\": [\n    {\"prompt\": \"Specific question based on your data\", \"category\": \"Analysis_Type\", \"description\": \"What this reveals\", \"chartType\": \"optimal_chart_type\"},\n    {\"prompt\": \"Another specific question\", \"category\": \"Analysis_Type\", \"description\": \"What this reveals\", \"chartType\": \"optimal_chart_type\"},\n    {\"prompt\": \"Third specific question\", \"category\": \"Analysis_Type\", \"description\": \"What this reveals\", \"chartType\": \"optimal_chart_type\"}\n  ]\n}\n\nANALYSIS FOCUS AREAS:\n- Identify specific business opportunities and risks in the data\n- Detect unusual patterns, outliers, and correlations with business implications\n- Assess data quality issues that could impact decision-making\n- Generate visualization suggestions tailored to the actual data patterns\n- Create specific, answerable questions based on the dataset's unique characteristics`;\n\n  try {\n    const aiResponse = await env.AI.run('@cf/qwen/qwq-32b', {\n      prompt: analysisPrompt,\n      max_tokens: 1536\n    });\n    \n    let responseText = aiResponse.response || aiResponse.choices?.[0]?.text || aiResponse;\n    if (typeof responseText === 'string') {\n      responseText = responseText.replace(/```json\\s*/g, '').replace(/```\\s*/g, '').trim();\n      \n      // Handle QwQ model's thinking process output\n      const thinkEndIndex = responseText.lastIndexOf('</think>');\n      if (thinkEndIndex !== -1) {\n        responseText = responseText.substring(thinkEndIndex + 8).trim();\n      }\n      \n      // Extract JSON object if there's extra text\n      const jsonStart = responseText.indexOf('{');\n      const jsonEnd = responseText.lastIndexOf('}');\n      if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n        responseText = responseText.substring(jsonStart, jsonEnd + 1);\n      }\n    }\n    \n    const aiAnalysis = JSON.parse(responseText);\n    \n    // Generate automatic charts\n    const autoCharts = await generateAutoCharts(schema, sampleRows, aiAnalysis, env);\n    aiAnalysis.autoCharts = autoCharts;\n    \n    return aiAnalysis;\n  } catch (error) {\n    console.error('AI analysis failed:', error);\n    return await createFallbackAnalysis(schema, sampleRows);\n  }\n}\n\nfunction generateDetailedStats(schema: ColumnSchema[], sampleRows: any[]): any {\n  const stats: any = {\n    overview: {\n      totalRows: sampleRows.length,\n      totalColumns: schema.length,\n      numericColumns: schema.filter(col => col.type === 'number').length,\n      categoricalColumns: schema.filter(col => col.type === 'string').length,\n      dateColumns: schema.filter(col => col.type === 'date').length,\n      memoryFootprint: JSON.stringify(sampleRows).length\n    },\n    columnDetails: {},\n    dataQuality: {\n      overallCompleteness: 0,\n      duplicateRows: 0,\n      emptyRows: 0\n    },\n    advancedAnalytics: {\n      outlierColumns: [],\n      skewedDistributions: [],\n      possibleCategoricalEncoding: [],\n      timeSeriesColumns: []\n    }\n  };\n  \n  let totalCells = 0;\n  let emptyCells = 0;\n  \n  // Analyze each column in detail\n  for (const col of schema) {\n    const values = sampleRows.map(row => row[col.name]);\n    const nonEmptyValues = values.filter(v => v !== null && v !== undefined && v !== '');\n    const emptyCount = values.length - nonEmptyValues.length;\n    \n    totalCells += values.length;\n    emptyCells += emptyCount;\n    \n    stats.columnDetails[col.name] = {\n      type: col.type,\n      sampleSize: nonEmptyValues.length,\n      uniqueValues: [...new Set(nonEmptyValues)].length,\n      uniquenessRatio: nonEmptyValues.length > 0 ? [...new Set(nonEmptyValues)].length / nonEmptyValues.length : 0,\n      missingCount: emptyCount,\n      missingPercentage: (emptyCount / values.length) * 100,\n      ...col.stats\n    };\n    \n    // Advanced numeric analysis\n    if (col.type === 'number') {\n      const nums = nonEmptyValues.map(v => Number(v)).filter(v => !isNaN(v));\n      if (nums.length > 0) {\n        const mean = nums.reduce((a, b) => a + b, 0) / nums.length;\n        const variance = nums.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / nums.length;\n        const skewness = calculateSkewness(nums, mean, Math.sqrt(variance));\n        const kurtosis = calculateKurtosis(nums, mean, Math.sqrt(variance));\n        const outliers = detectOutliers(nums);\n        \n        stats.columnDetails[col.name] = {\n          ...stats.columnDetails[col.name],\n          range: Math.max(...nums) - Math.min(...nums),\n          variance,\n          standardDeviation: Math.sqrt(variance),\n          skewness,\n          kurtosis,\n          outlierCount: outliers.length,\n          outlierPercentage: (outliers.length / nums.length) * 100,\n          quartiles: calculateQuartiles(nums),\n          coefficientOfVariation: mean !== 0 ? Math.sqrt(variance) / mean : 0\n        };\n        \n        if (Math.abs(skewness) > 1) {\n          stats.advancedAnalytics.skewedDistributions.push({\n            column: col.name,\n            skewness: skewness.toFixed(3),\n            direction: skewness > 0 ? 'right' : 'left'\n          });\n        }\n        \n        if (outliers.length > nums.length * 0.05) {\n          stats.advancedAnalytics.outlierColumns.push({\n            column: col.name,\n            outlierCount: outliers.length,\n            percentage: ((outliers.length / nums.length) * 100).toFixed(1)\n          });\n        }\n      }\n    }\n    \n    // Advanced categorical analysis\n    if (col.type === 'string') {\n      const valueCounts = nonEmptyValues.reduce((acc, val) => {\n        acc[val] = (acc[val] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n      \n      const sortedCounts = Object.entries(valueCounts).sort(([,a], [,b]) => (b as number) - (a as number));\n      const entropy = calculateEntropy(Object.values(valueCounts));\n      \n      stats.columnDetails[col.name] = {\n        ...stats.columnDetails[col.name],\n        topValues: sortedCounts.slice(0, 5),\n        entropy: entropy,\n        concentrationRatio: sortedCounts.length > 0 ? (sortedCounts[0][1] as number) / nonEmptyValues.length : 0,\n        averageLength: nonEmptyValues.reduce((acc, val) => acc + val.toString().length, 0) / nonEmptyValues.length\n      };\n      \n      // Check if might be encoded categorical\n      if (nonEmptyValues.every(val => !isNaN(Number(val))) && [...new Set(nonEmptyValues)].length < 20) {\n        stats.advancedAnalytics.possibleCategoricalEncoding.push({\n          column: col.name,\n          uniqueValues: [...new Set(nonEmptyValues)].length,\n          suggestion: 'This numeric column might represent categories'\n        });\n      }\n    }\n    \n    // Date column analysis\n    if (col.type === 'date') {\n      const dates = nonEmptyValues.map(v => new Date(v)).filter(d => !isNaN(d.getTime()));\n      if (dates.length > 0) {\n        const sortedDates = dates.sort((a, b) => a.getTime() - b.getTime());\n        const dateRange = sortedDates[sortedDates.length - 1].getTime() - sortedDates[0].getTime();\n        const daysDifference = dateRange / (1000 * 60 * 60 * 24);\n        \n        stats.columnDetails[col.name] = {\n          ...stats.columnDetails[col.name],\n          earliestDate: sortedDates[0].toISOString().split('T')[0],\n          latestDate: sortedDates[sortedDates.length - 1].toISOString().split('T')[0],\n          dateRange: `${Math.round(daysDifference)} days`,\n          frequency: analyzeDateFrequency(dates)\n        };\n        \n        stats.advancedAnalytics.timeSeriesColumns.push({\n          column: col.name,\n          range: `${Math.round(daysDifference)} days`,\n          frequency: analyzeDateFrequency(dates)\n        });\n      }\n    }\n  }\n  \n  // Overall data quality metrics\n  stats.dataQuality.overallCompleteness = ((totalCells - emptyCells) / totalCells) * 100;\n  stats.dataQuality.duplicateRows = countDuplicateRows(sampleRows);\n  stats.dataQuality.emptyRows = sampleRows.filter(row => \n    Object.values(row).every(val => val === null || val === undefined || val === '')\n  ).length;\n  \n  return stats;\n}\n\nfunction calculateSkewness(numbers: number[], mean: number, stdDev: number): number {\n  if (stdDev === 0) return 0;\n  const n = numbers.length;\n  const skewSum = numbers.reduce((acc, val) => acc + Math.pow((val - mean) / stdDev, 3), 0);\n  return (n / ((n - 1) * (n - 2))) * skewSum;\n}\n\nfunction calculateKurtosis(numbers: number[], mean: number, stdDev: number): number {\n  if (stdDev === 0) return 0;\n  const n = numbers.length;\n  const kurtSum = numbers.reduce((acc, val) => acc + Math.pow((val - mean) / stdDev, 4), 0);\n  return (n * (n + 1) / ((n - 1) * (n - 2) * (n - 3))) * kurtSum - (3 * (n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n}\n\nfunction detectOutliers(numbers: number[]): number[] {\n  const q1 = calculatePercentile(numbers, 25);\n  const q3 = calculatePercentile(numbers, 75);\n  const iqr = q3 - q1;\n  const lowerBound = q1 - 1.5 * iqr;\n  const upperBound = q3 + 1.5 * iqr;\n  \n  return numbers.filter(num => num < lowerBound || num > upperBound);\n}\n\nfunction calculateQuartiles(numbers: number[]): { q1: number; q2: number; q3: number } {\n  return {\n    q1: calculatePercentile(numbers, 25),\n    q2: calculatePercentile(numbers, 50),\n    q3: calculatePercentile(numbers, 75)\n  };\n}\n\nfunction calculatePercentile(numbers: number[], percentile: number): number {\n  const sorted = [...numbers].sort((a, b) => a - b);\n  const index = (percentile / 100) * (sorted.length - 1);\n  const lower = Math.floor(index);\n  const upper = Math.ceil(index);\n  const weight = index % 1;\n  \n  if (upper >= sorted.length) return sorted[sorted.length - 1];\n  return sorted[lower] * (1 - weight) + sorted[upper] * weight;\n}\n\nfunction calculateEntropy(counts: number[]): number {\n  const total = counts.reduce((a, b) => a + b, 0);\n  const probabilities = counts.map(count => count / total);\n  return -probabilities.reduce((acc, p) => acc + (p > 0 ? p * Math.log2(p) : 0), 0);\n}\n\nfunction analyzeDateFrequency(dates: Date[]): string {\n  if (dates.length < 2) return 'insufficient data';\n  \n  const sortedDates = dates.sort((a, b) => a.getTime() - b.getTime());\n  const intervals = [];\n  \n  for (let i = 1; i < sortedDates.length; i++) {\n    const diff = sortedDates[i].getTime() - sortedDates[i - 1].getTime();\n    intervals.push(diff / (1000 * 60 * 60 * 24)); // Convert to days\n  }\n  \n  const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;\n  \n  if (avgInterval < 2) return 'daily';\n  if (avgInterval < 8) return 'weekly';\n  if (avgInterval < 32) return 'monthly';\n  if (avgInterval < 95) return 'quarterly';\n  return 'yearly';\n}\n\nfunction countDuplicateRows(rows: any[]): number {\n  const stringified = rows.map(row => JSON.stringify(row));\n  const uniqueRows = new Set(stringified);\n  return rows.length - uniqueRows.size;\n}\n\nasync function generateAutoCharts(schema: ColumnSchema[], sampleRows: any[], analysis: any, env: any): Promise<any[]> {\n  const charts = [];\n  const numericCols = schema.filter(col => col.type === 'number');\n  const categoricalCols = schema.filter(col => col.type === 'string');\n  const dateCols = schema.filter(col => col.type === 'date');\n  \n  console.log('\uD83C\uDFA8 Generating intelligent automatic charts...', { numericCols: numericCols.length, categoricalCols: categoricalCols.length, dateCols: dateCols.length });\n  \n  try {\n    // Smart Chart Selection based on data characteristics\n    const chartRecommendations = generateSmartChartRecommendations(schema, sampleRows, analysis);\n    \n    for (const recommendation of chartRecommendations) {\n      const chart = await generateOptimalChart(recommendation, schema, sampleRows, analysis);\n      if (chart) {\n        charts.push(chart);\n      }\n    }\n    \n    console.log(`\u2705 Generated ${charts.length} intelligent automatic charts`);\n    \n  } catch (error) {\n    console.error('\u274C Auto chart generation failed:', error);\n    // Add fallback chart\n    charts.push({\n      title: \"\uD83D\uDCCA Basic Data Summary\",\n      description: \"Basic overview of your dataset\",\n      chartSpec: createFallbackChart(schema, sampleRows),\n      priority: 1\n    });\n  }\n  \n  return charts;\n}\n\nfunction generateSmartChartRecommendations(schema: ColumnSchema[], sampleRows: any[], analysis: any): any[] {\n  const recommendations = [];\n  const numericCols = schema.filter(col => col.type === 'number');\n  const categoricalCols = schema.filter(col => col.type === 'string');\n  const dateCols = schema.filter(col => col.type === 'date');\n  \n  // Priority 1: Time Series for temporal data with clear trends\n  if (dateCols.length > 0 && numericCols.length > 0) {\n    const timeCol = dateCols[0];\n    const valueCol = findMostVariableNumericColumn(numericCols, sampleRows);\n    if (valueCol && hasTemporalTrend(timeCol, valueCol, sampleRows)) {\n      recommendations.push({\n        type: 'timeseries',\n        priority: 1,\n        title: `\uD83D\uDCC8 ${valueCol.name} Trends Over Time`,\n        description: `Temporal analysis showing how ${valueCol.name} changes over ${timeCol.name}`,\n        columns: [timeCol, valueCol],\n        reason: 'Strong temporal patterns detected'\n      });\n    }\n  }\n  \n  // Priority 2: Performance Comparison for business metrics\n  if (categoricalCols.length > 0 && numericCols.length > 0) {\n    const categoryCol = findMostBalancedCategoricalColumn(categoricalCols, sampleRows);\n    const metricCol = findBusinessMetricColumn(numericCols, sampleRows);\n    if (categoryCol && metricCol && hasSignificantVariation(categoryCol, metricCol, sampleRows)) {\n      recommendations.push({\n        type: 'comparison',\n        priority: 2,\n        title: `\uD83D\uDCCA ${metricCol.name} Performance by ${categoryCol.name}`,\n        description: `Compare ${metricCol.name} across different ${categoryCol.name} segments`,\n        columns: [categoryCol, metricCol],\n        reason: 'Significant performance variations detected'\n      });\n    }\n  }\n  \n  // Priority 3: Distribution Analysis for key metrics\n  if (numericCols.length > 0) {\n    const keyMetric = findKeyMetricColumn(numericCols, sampleRows);\n    if (keyMetric && hasInterestingDistribution(keyMetric, sampleRows)) {\n      recommendations.push({\n        type: 'distribution',\n        priority: 3,\n        title: `\uD83D\uDCCB ${keyMetric.name} Distribution Analysis`,\n        description: `Statistical distribution showing the spread and frequency of ${keyMetric.name} values`,\n        columns: [keyMetric],\n        reason: 'Interesting distribution patterns detected'\n      });\n    }\n  }\n  \n  // Priority 4: Correlation Analysis (only if meaningful relationships exist)\n  if (numericCols.length >= 2) {\n    const correlationPairs = findStrongCorrelations(numericCols, sampleRows);\n    if (correlationPairs.length > 0) {\n      const topPair = correlationPairs[0];\n      recommendations.push({\n        type: 'correlation',\n        priority: 4,\n        title: `\uD83D\uDD17 ${topPair.col1.name} vs ${topPair.col2.name} Relationship`,\n        description: `Scatter plot showing correlation between ${topPair.col1.name} and ${topPair.col2.name}`,\n        columns: [topPair.col1, topPair.col2],\n        reason: `Strong correlation detected (${topPair.correlation.toFixed(2)})`\n      });\n    }\n  }\n  \n  // Priority 5: Category Composition (only if meaningful segments)\n  if (categoricalCols.length > 0) {\n    const meaningfulCategory = findMeaningfulCategoryColumn(categoricalCols, sampleRows);\n    if (meaningfulCategory && hasBalancedDistribution(meaningfulCategory, sampleRows)) {\n      recommendations.push({\n        type: 'composition',\n        priority: 5,\n        title: `\uD83E\uDD67 ${meaningfulCategory.name} Composition`,\n        description: `Breakdown showing the proportion of each ${meaningfulCategory.name} category`,\n        columns: [meaningfulCategory],\n        reason: 'Balanced category distribution suitable for comparison'\n      });\n    }\n  }\n  \n  return recommendations.sort((a, b) => a.priority - b.priority).slice(0, 4); // Top 4 recommendations\n}\n\n// Helper functions for intelligent chart selection\nfunction findMostVariableNumericColumn(numericCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  if (numericCols.length === 0) return null;\n  \n  return numericCols.reduce((prev, curr) => {\n    const prevVariation = curr.stats?.stdDev || 0;\n    const currVariation = prev.stats?.stdDev || 0;\n    return prevVariation > currVariation ? curr : prev;\n  });\n}\n\nfunction findBusinessMetricColumn(numericCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  // Look for business-relevant column names\n  const businessKeywords = ['revenue', 'sales', 'profit', 'cost', 'price', 'amount', 'value', 'total', 'count'];\n  const businessCol = numericCols.find(col => \n    businessKeywords.some(keyword => col.name.toLowerCase().includes(keyword))\n  );\n  \n  return businessCol || findMostVariableNumericColumn(numericCols, sampleRows);\n}\n\nfunction findMostBalancedCategoricalColumn(categoricalCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  if (categoricalCols.length === 0) return null;\n  \n  return categoricalCols.reduce((prev, curr) => {\n    const prevBalance = calculateCategoryBalance(prev, sampleRows);\n    const currBalance = calculateCategoryBalance(curr, sampleRows);\n    return currBalance > prevBalance ? curr : prev;\n  });\n}\n\nfunction calculateCategoryBalance(col: ColumnSchema, sampleRows: any[]): number {\n  const values = sampleRows.map(row => row[col.name]).filter(v => v != null);\n  const uniqueValues = [...new Set(values)];\n  \n  if (uniqueValues.length < 2 || uniqueValues.length > 8) return 0; // Too few or too many categories\n  \n  const counts = uniqueValues.map(val => values.filter(v => v === val).length);\n  const mean = counts.reduce((a, b) => a + b, 0) / counts.length;\n  const variance = counts.reduce((acc, count) => acc + Math.pow(count - mean, 2), 0) / counts.length;\n  \n  // Return balance score (lower variance = more balanced)\n  return mean > 0 ? 1 / (1 + variance / mean) : 0;\n}\n\nfunction hasTemporalTrend(dateCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): boolean {\n  const sortedData = sampleRows\n    .filter(row => row[dateCol.name] && row[numericCol.name])\n    .sort((a, b) => new Date(a[dateCol.name]).getTime() - new Date(b[dateCol.name]).getTime());\n  \n  if (sortedData.length < 3) return false;\n  \n  // Check for trend using simple slope analysis\n  const values = sortedData.map(row => Number(row[numericCol.name]));\n  const n = values.length;\n  const slope = (n * values.reduce((acc, val, i) => acc + i * val, 0) - \n                 (n * (n - 1) / 2) * values.reduce((a, b) => a + b, 0)) / \n                (n * (n * (n - 1) * (2 * n - 1) / 6) - Math.pow(n * (n - 1) / 2, 2));\n  \n  return Math.abs(slope) > 0.1; // Significant trend\n}\n\nfunction hasSignificantVariation(categoryCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): boolean {\n  const groups = sampleRows.reduce((acc, row) => {\n    const category = row[categoryCol.name];\n    const value = Number(row[numericCol.name]);\n    if (category && !isNaN(value)) {\n      if (!acc[category]) acc[category] = [];\n      acc[category].push(value);\n    }\n    return acc;\n  }, {} as Record<string, number[]>);\n  \n  const groupMeans = Object.values(groups).map((values: number[]) => \n    values.reduce((a: number, b: number) => a + b, 0) / values.length\n  );\n  \n  if (groupMeans.length < 2) return false;\n  \n  const overallMean = groupMeans.reduce((a, b) => a + b, 0) / groupMeans.length;\n  const variance = groupMeans.reduce((acc, mean) => acc + Math.pow(mean - overallMean, 2), 0) / groupMeans.length;\n  \n  return variance > Math.pow(overallMean * 0.1, 2); // At least 10% variation\n}\n\nfunction hasInterestingDistribution(numericCol: ColumnSchema, sampleRows: any[]): boolean {\n  const values = sampleRows.map(row => Number(row[numericCol.name])).filter(v => !isNaN(v));\n  if (values.length < 5) return false;\n  \n  const mean = values.reduce((a, b) => a + b, 0) / values.length;\n  const variance = values.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / values.length;\n  const skewness = Math.abs(numericCol.stats?.stdDev || 0) > mean * 0.1;\n  \n  return skewness || variance > Math.pow(mean * 0.2, 2);\n}\n\nfunction findStrongCorrelations(numericCols: ColumnSchema[], sampleRows: any[]): any[] {\n  const correlations = [];\n  \n  for (let i = 0; i < numericCols.length; i++) {\n    for (let j = i + 1; j < numericCols.length; j++) {\n      const col1 = numericCols[i];\n      const col2 = numericCols[j];\n      \n      const values1 = sampleRows.map(row => Number(row[col1.name])).filter(v => !isNaN(v));\n      const values2 = sampleRows.map(row => Number(row[col2.name])).filter(v => !isNaN(v));\n      \n      const correlation = calculateCorrelation(values1, values2);\n      \n      if (Math.abs(correlation) > 0.5) { // Strong correlation threshold\n        correlations.push({ col1, col2, correlation });\n      }\n    }\n  }\n  \n  return correlations.sort((a, b) => Math.abs(b.correlation) - Math.abs(a.correlation));\n}\n\nfunction findKeyMetricColumn(numericCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  // Priority: business metrics > high variance > first numeric\n  return findBusinessMetricColumn(numericCols, sampleRows) || \n         findMostVariableNumericColumn(numericCols, sampleRows);\n}\n\nfunction findMeaningfulCategoryColumn(categoricalCols: ColumnSchema[], sampleRows: any[]): ColumnSchema | null {\n  return categoricalCols.find(col => {\n    const values = sampleRows.map(row => row[col.name]).filter(v => v != null);\n    const uniqueValues = [...new Set(values)];\n    return uniqueValues.length >= 2 && uniqueValues.length <= 8;\n  }) || null;\n}\n\nfunction hasBalancedDistribution(categoryCol: ColumnSchema, sampleRows: any[]): boolean {\n  return calculateCategoryBalance(categoryCol, sampleRows) > 0.5;\n}\n\nasync function generateOptimalChart(recommendation: any, schema: ColumnSchema[], sampleRows: any[], analysis: any): Promise<any | null> {\n  try {\n    switch (recommendation.type) {\n      case 'timeseries':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedTimeSeriesChart(recommendation.columns[0], recommendation.columns[1], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'comparison':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedComparisonChart(recommendation.columns[0], recommendation.columns[1], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'distribution':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedDistributionChart(recommendation.columns[0], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'correlation':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedCorrelationChart(recommendation.columns[0], recommendation.columns[1], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      case 'composition':\n        return {\n          title: recommendation.title,\n          description: recommendation.description,\n          chartSpec: generateAdvancedCompositionChart(recommendation.columns[0], sampleRows),\n          priority: recommendation.priority\n        };\n      \n      default:\n        return null;\n    }\n  } catch (error) {\n    console.error(`Failed to generate ${recommendation.type} chart:`, error);\n    return null;\n  }\n}\n\nfunction calculateCorrelation(x: number[], y: number[]): number {\n  const n = Math.min(x.length, y.length);\n  if (n < 2) return 0;\n  \n  const meanX = x.slice(0, n).reduce((a, b) => a + b, 0) / n;\n  const meanY = y.slice(0, n).reduce((a, b) => a + b, 0) / n;\n  \n  let numerator = 0;\n  let sumXSquared = 0;\n  let sumYSquared = 0;\n  \n  for (let i = 0; i < n; i++) {\n    const dx = x[i] - meanX;\n    const dy = y[i] - meanY;\n    numerator += dx * dy;\n    sumXSquared += dx * dx;\n    sumYSquared += dy * dy;\n  }\n  \n  const denominator = Math.sqrt(sumXSquared * sumYSquared);\n  return denominator === 0 ? 0 : numerator / denominator;\n}\n\nexport { calculateCorrelation };\n\n// Advanced chart generation functions\nfunction generateAdvancedTimeSeriesChart(dateCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): any {\n  const sortedData = sampleRows\n    .filter(row => row[dateCol.name] && row[numericCol.name] != null)\n    .sort((a, b) => new Date(a[dateCol.name]).getTime() - new Date(b[dateCol.name]).getTime());\n  \n  const dates = sortedData.map(row => row[dateCol.name]);\n  const values = sortedData.map(row => Number(row[numericCol.name]));\n  \n  // Calculate trend line\n  const trendLine = calculateTrendLine(dates, values);\n  \n  return {\n    data: [\n      {\n        x: dates,\n        y: values,\n        type: 'scatter',\n        mode: 'lines+markers',\n        line: { \n          color: '#667eea', \n          width: 3,\n          shape: 'spline' \n        },\n        marker: { \n          color: '#764ba2', \n          size: 8,\n          symbol: 'circle'\n        },\n        name: numericCol.name,\n        hovertemplate: `<b>${dateCol.name}</b>: %{x}<br><b>${numericCol.name}</b>: %{y:,.0f}<extra></extra>`\n      },\n      {\n        x: dates,\n        y: trendLine,\n        type: 'scatter',\n        mode: 'lines',\n        line: { \n          color: '#ff7b7b', \n          width: 2,\n          dash: 'dot'\n        },\n        name: 'Trend',\n        hovertemplate: `<b>Trend</b>: %{y:,.0f}<extra></extra>`\n      }\n    ],\n    layout: {\n      title: {\n        text: `${numericCol.name} Trends Over Time`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: dateCol.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      yaxis: { \n        title: { text: numericCol.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 60, l: 80, r: 40 },\n      hovermode: 'x unified',\n      legend: {\n        orientation: 'h',\n        yanchor: 'bottom',\n        y: 1.02,\n        xanchor: 'right',\n        x: 1\n      }\n    }\n  };\n}\n\nfunction generateAdvancedComparisonChart(categoryCol: ColumnSchema, numericCol: ColumnSchema, sampleRows: any[]): any {\n  const groupedData = sampleRows.reduce((acc, row) => {\n    const category = row[categoryCol.name];\n    const value = Number(row[numericCol.name]);\n    if (category && !isNaN(value)) {\n      if (!acc[category]) acc[category] = [];\n      acc[category].push(value);\n    }\n    return acc;\n  }, {} as Record<string, number[]>);\n  \n  // Calculate statistics for each group\n  const chartData = Object.entries(groupedData)\n    .map(([category, values]) => ({\n      category,\n      mean: values.reduce((a, b) => a + b, 0) / values.length,\n      count: values.length,\n      values\n    }))\n    .sort((a, b) => b.mean - a.mean)\n    .slice(0, 10); // Top 10 categories\n  \n  return {\n    data: [{\n      x: chartData.map(d => d.category),\n      y: chartData.map(d => d.mean),\n      type: 'bar',\n      marker: {\n        color: chartData.map((_, i) => `hsl(${220 + i * 25}, 70%, ${60 + (i % 3) * 10}%)`),\n        opacity: 0.8,\n        line: { color: '#2d3748', width: 1 }\n      },\n      text: chartData.map(d => `${d.mean.toLocaleString()}`),\n      textposition: 'outside',\n      hovertemplate: `<b>%{x}</b><br>${numericCol.name}: %{y:,.0f}<br>Sample Count: %{customdata}<extra></extra>`,\n      customdata: chartData.map(d => d.count)\n    }],\n    layout: {\n      title: {\n        text: `${numericCol.name} Performance by ${categoryCol.name}`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: categoryCol.name, font: { size: 14, color: '#4a5568' } },\n        tickangle: -45\n      },\n      yaxis: { \n        title: { text: `Average ${numericCol.name}`, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 100, l: 80, r: 40 },\n      showlegend: false\n    }\n  };\n}\n\nfunction generateAdvancedDistributionChart(numericCol: ColumnSchema, sampleRows: any[]): any {\n  const values = sampleRows\n    .map(row => Number(row[numericCol.name]))\n    .filter(val => !isNaN(val));\n  \n  if (values.length === 0) return createFallbackChart([], []);\n  \n  // Calculate statistics\n  const mean = values.reduce((a, b) => a + b, 0) / values.length;\n  const sorted = [...values].sort((a, b) => a - b);\n  const q1 = sorted[Math.floor(sorted.length * 0.25)];\n  const median = sorted[Math.floor(sorted.length * 0.5)];\n  const q3 = sorted[Math.floor(sorted.length * 0.75)];\n  \n  return {\n    data: [\n      {\n        x: values,\n        type: 'histogram',\n        nbinsx: Math.min(30, Math.max(10, Math.floor(Math.sqrt(values.length)))),\n        marker: {\n          color: '#667eea',\n          opacity: 0.7,\n          line: { color: '#2d3748', width: 1 }\n        },\n        name: 'Distribution',\n        hovertemplate: `Range: %{x}<br>Count: %{y}<extra></extra>`\n      }\n    ],\n    layout: {\n      title: {\n        text: `${numericCol.name} Distribution Analysis`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: numericCol.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      yaxis: { \n        title: { text: 'Frequency', font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 60, l: 60, r: 40 },\n      shapes: [\n        // Mean line\n        {\n          type: 'line',\n          x0: mean,\n          y0: 0,\n          x1: mean,\n          y1: 1,\n          yref: 'paper',\n          line: { color: '#e53e3e', width: 2, dash: 'dash' }\n        },\n        // Median line\n        {\n          type: 'line',\n          x0: median,\n          y0: 0,\n          x1: median,\n          y1: 1,\n          yref: 'paper',\n          line: { color: '#38a169', width: 2, dash: 'dot' }\n        }\n      ],\n      annotations: [\n        {\n          x: mean,\n          y: 0.9,\n          yref: 'paper',\n          text: `Mean: ${mean.toFixed(1)}`,\n          showarrow: true,\n          arrowhead: 2,\n          arrowcolor: '#e53e3e',\n          font: { color: '#e53e3e', size: 12 }\n        },\n        {\n          x: median,\n          y: 0.8,\n          yref: 'paper',\n          text: `Median: ${median.toFixed(1)}`,\n          showarrow: true,\n          arrowhead: 2,\n          arrowcolor: '#38a169',\n          font: { color: '#38a169', size: 12 }\n        }\n      ]\n    }\n  };\n}\n\nfunction generateAdvancedCorrelationChart(col1: ColumnSchema, col2: ColumnSchema, sampleRows: any[]): any {\n  const data = sampleRows\n    .filter(row => row[col1.name] != null && row[col2.name] != null)\n    .map(row => ({\n      x: Number(row[col1.name]),\n      y: Number(row[col2.name])\n    }))\n    .filter(point => !isNaN(point.x) && !isNaN(point.y));\n  \n  if (data.length === 0) return createFallbackChart([], []);\n  \n  // Calculate correlation coefficient\n  const correlation = calculateCorrelation(\n    data.map(d => d.x),\n    data.map(d => d.y)\n  );\n  \n  // Calculate trend line\n  const xValues = data.map(d => d.x);\n  const yValues = data.map(d => d.y);\n  const trendLine = calculateLinearTrendLine(xValues, yValues);\n  \n  return {\n    data: [\n      {\n        x: data.map(d => d.x),\n        y: data.map(d => d.y),\n        type: 'scatter',\n        mode: 'markers',\n        marker: {\n          color: '#667eea',\n          size: 10,\n          opacity: 0.7,\n          line: { color: '#2d3748', width: 1 }\n        },\n        name: 'Data Points',\n        hovertemplate: `<b>${col1.name}</b>: %{x:,.1f}<br><b>${col2.name}</b>: %{y:,.1f}<extra></extra>`\n      },\n      {\n        x: [Math.min(...xValues), Math.max(...xValues)],\n        y: trendLine,\n        type: 'scatter',\n        mode: 'lines',\n        line: { color: '#e53e3e', width: 3 },\n        name: `Trend (r=${correlation.toFixed(3)})`,\n        hovertemplate: `<b>Correlation</b>: ${correlation.toFixed(3)}<extra></extra>`\n      }\n    ],\n    layout: {\n      title: {\n        text: `${col1.name} vs ${col2.name} Relationship`,  \n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      xaxis: { \n        title: { text: col1.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      yaxis: { \n        title: { text: col2.name, font: { size: 14, color: '#4a5568' } },\n        showgrid: true,\n        gridcolor: '#e2e8f0'\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 80, b: 60, l: 80, r: 40 },\n      annotations: [{\n        x: 0.02,\n        y: 0.98,\n        xref: 'paper',\n        yref: 'paper',\n        text: `Correlation: ${correlation.toFixed(3)}<br>Strength: ${getCorrelationStrength(correlation)}`,\n        showarrow: false,\n        bgcolor: 'rgba(255,255,255,0.8)',\n        bordercolor: '#e2e8f0',\n        borderwidth: 1,\n        font: { size: 12, color: '#2d3748' }\n      }]\n    }\n  };\n}\n\nfunction generateAdvancedCompositionChart(categoryCol: ColumnSchema, sampleRows: any[]): any {\n  const counts = sampleRows.reduce((acc, row) => {\n    const value = row[categoryCol.name];\n    if (value != null) {\n      acc[value] = (acc[value] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n  \n  const sortedCounts = Object.entries(counts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 8); // Top 8 categories\n  \n  const total = sortedCounts.reduce((sum, [, count]) => sum + count, 0);\n  const colors = [\n    '#667eea', '#764ba2', '#f093fb', '#f5576c', \n    '#4facfe', '#00f2fe', '#43e97b', '#38f9d7'\n  ];\n  \n  return {\n    data: [{\n      labels: sortedCounts.map(([label]) => label),\n      values: sortedCounts.map(([,value]) => value),\n      type: 'pie',\n      marker: {\n        colors: colors.slice(0, sortedCounts.length),\n        line: { color: '#ffffff', width: 2 }\n      },\n      textinfo: 'label+percent+value',\n      textposition: 'auto',\n      textfont: { size: 12, color: '#2d3748' },\n      hovertemplate: `<b>%{label}</b><br>Count: %{value}<br>Percentage: %{percent}<extra></extra>`,\n      pull: sortedCounts.map((_, i) => i === 0 ? 0.1 : 0) // Highlight largest segment\n    }],\n    layout: {\n      title: {\n        text: `${categoryCol.name} Distribution`,\n        font: { size: 18, color: '#2d3748', weight: 600 }\n      },\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      margin: { t: 60, b: 60, l: 60, r: 60 },\n      showlegend: true,\n      legend: {\n        orientation: 'v',\n        yanchor: 'middle',\n        y: 0.5,\n        x: 1.05\n      },\n      annotations: [{\n        text: `Total: ${total}`,\n        x: 0.5,\n        y: 0.5,\n        xref: 'paper',\n        yref: 'paper',\n        showarrow: false,\n        font: { size: 16, color: '#2d3748', weight: 600 }\n      }]\n    }\n  };\n}\n\n// Helper functions for advanced charts\nfunction calculateTrendLine(dates: string[], values: number[]): number[] {\n  const n = dates.length;\n  if (n < 2) return values;\n  \n  const timeValues = dates.map(date => new Date(date).getTime());\n  const meanTime = timeValues.reduce((a, b) => a + b, 0) / n;\n  const meanValue = values.reduce((a, b) => a + b, 0) / n;\n  \n  const numerator = timeValues.reduce((acc, time, i) => acc + (time - meanTime) * (values[i] - meanValue), 0);\n  const denominator = timeValues.reduce((acc, time) => acc + Math.pow(time - meanTime, 2), 0);\n  \n  const slope = denominator !== 0 ? numerator / denominator : 0;\n  const intercept = meanValue - slope * meanTime;\n  \n  return timeValues.map(time => slope * time + intercept);\n}\n\nfunction calculateLinearTrendLine(xValues: number[], yValues: number[]): number[] {\n  const n = xValues.length;\n  if (n < 2) return yValues;\n  \n  const meanX = xValues.reduce((a, b) => a + b, 0) / n;\n  const meanY = yValues.reduce((a, b) => a + b, 0) / n;\n  \n  const numerator = xValues.reduce((acc, x, i) => acc + (x - meanX) * (yValues[i] - meanY), 0);\n  const denominator = xValues.reduce((acc, x) => acc + Math.pow(x - meanX, 2), 0);\n  \n  const slope = denominator !== 0 ? numerator / denominator : 0;\n  const intercept = meanY - slope * meanX;\n  \n  const minX = Math.min(...xValues);\n  const maxX = Math.max(...xValues);\n  \n  return [slope * minX + intercept, slope * maxX + intercept];\n}\n\nfunction getCorrelationStrength(correlation: number): string {\n  const abs = Math.abs(correlation);\n  if (abs >= 0.9) return 'Very Strong';\n  if (abs >= 0.7) return 'Strong';\n  if (abs >= 0.5) return 'Moderate';\n  if (abs >= 0.3) return 'Weak';\n  return 'Very Weak';\n}\n\n// Enhanced Statistical Analysis (Phase 1 - without DuckDB for now)\nexport async function analyzeWithDuckDB(\n  jsonData: any[],\n  env: any\n): Promise<DuckDBAnalysis> {\n  console.log('\uD83D\uDCCA Starting enhanced statistical analysis...');\n  const start = Date.now();\n\n  try {\n    const schema = inferSchema(jsonData);\n    const rowCount = jsonData.length;\n    const columnCount = schema.length;\n    \n    // Generate comprehensive summary statistics for each column\n    const summary = schema.map(col => {\n      const values = jsonData.map(row => row[col.name]).filter(v => v != null);\n      const nonNullCount = values.length;\n      const nullCount = rowCount - nonNullCount;\n      \n      let stats: any = {\n        column_name: col.name,\n        column_type: col.type,\n        count: nonNullCount,\n        nulls: nullCount,\n        unique: [...new Set(values)].length\n      };\n      \n      if (col.type === 'number') {\n        const numValues = values.map(v => Number(v)).filter(v => !isNaN(v));\n        if (numValues.length > 0) {\n          const sorted = [...numValues].sort((a, b) => a - b);\n          const mean = numValues.reduce((a, b) => a + b, 0) / numValues.length;\n          const variance = numValues.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / numValues.length;\n          \n          stats.min = Math.min(...numValues);\n          stats.max = Math.max(...numValues);\n          stats.mean = mean;\n          stats.std = Math.sqrt(variance);\n          stats.q25 = sorted[Math.floor(sorted.length * 0.25)];\n          stats.q50 = sorted[Math.floor(sorted.length * 0.5)];\n          stats.q75 = sorted[Math.floor(sorted.length * 0.75)];\n        }\n      } else if (col.type === 'string') {\n        // Get frequency distribution for categorical data\n        const frequencies = values.reduce((acc, val) => {\n          acc[val] = (acc[val] || 0) + 1;\n          return acc;\n        }, {} as Record<string, number>);\n        \n        const topCategories = Object.entries(frequencies)\n          .sort(([,a], [,b]) => b - a)\n          .slice(0, 10);\n        \n        stats.top_categories = topCategories;\n        stats.category_count = Object.keys(frequencies).length;\n      }\n      \n      return stats;\n    });\n    \n    // Calculate correlations between numeric columns\n    const numericColumns = schema.filter(col => col.type === 'number');\n    const correlations: any = {};\n    \n    for (let i = 0; i < numericColumns.length; i++) {\n      for (let j = i + 1; j < numericColumns.length; j++) {\n        const col1 = numericColumns[i];\n        const col2 = numericColumns[j];\n        \n        const values1 = jsonData.map(row => Number(row[col1.name])).filter(v => !isNaN(v));\n        const values2 = jsonData.map(row => Number(row[col2.name])).filter(v => !isNaN(v));\n        \n        const correlation = calculateCorrelation(values1, values2);\n        if (Math.abs(correlation) > 0.1) { // Only store meaningful correlations\n          correlations[`${col1.name}_${col2.name}`] = correlation;\n        }\n      }\n    }\n    \n    // Identify data patterns and anomalies\n    const patterns = {\n      strongCorrelations: Object.entries(correlations).filter(([,corr]) => Math.abs(corr as number) > 0.7),\n      highVariability: numericColumns\n        .map(col => ({\n          column: col.name,\n          cv: (col.stats?.stdDev || 0) / (col.stats?.mean || 1)\n        }))\n        .filter(item => item.cv > 0.5)\n        .sort((a, b) => b.cv - a.cv)\n        .slice(0, 5),\n      categoricalDominance: schema\n        .filter(col => col.type === 'string')\n        .map(col => {\n          const values = jsonData.map(row => row[col.name]).filter(v => v != null);\n          const frequencies = values.reduce((acc, val) => {\n            acc[val] = (acc[val] || 0) + 1;\n            return acc;\n          }, {} as Record<string, number>);\n          const maxFreq = Math.max(...Object.values(frequencies));\n          return {\n            column: col.name,\n            dominance: maxFreq / values.length,\n            topValue: Object.entries(frequencies).find(([,freq]) => freq === maxFreq)?.[0]\n          };\n        })\n        .filter(item => item.dominance > 0.7)\n        .sort((a, b) => b.dominance - a.dominance)\n    };\n    \n    const duration = Date.now() - start;\n    console.log(`\u2705 Enhanced statistical analysis completed in ${duration}ms`);\n    console.log(`\uD83D\uDCCA Processed ${rowCount} rows, ${columnCount} columns`);\n    console.log(`\uD83D\uDD0D Found ${Object.keys(correlations).length} correlations, ${patterns.highVariability.length} high-variability columns`);\n    \n    return {\n      summary,\n      rowCount,\n      columnCount,\n      dataTypes: schema.reduce((acc, col) => {\n        acc[col.name] = col.type;\n        return acc;\n      }, {} as Record<string, string>),\n      correlations,\n      patterns,\n      processingTime: duration\n    };\n    \n  } catch (error) {\n    const duration = Date.now() - start;\n    console.error(`\u274C Enhanced analysis failed after ${duration}ms:`, error);\n    \n    return {\n      summary: [],\n      rowCount: jsonData.length,\n      columnCount: 0,\n      dataTypes: {},\n      error: error.message\n    };\n  }\n}\n\nasync function createFallbackAnalysis(schema: ColumnSchema[], sampleRows: any[]): Promise<DataAnalysis> {\n  const numericColumns = schema.filter(col => col.type === 'number');\n  const categoricalColumns = schema.filter(col => col.type === 'string');\n  const dateColumns = schema.filter(col => col.type === 'date');\n  \n  return {\n    summary: `Dataset contains ${schema.length} columns with ${sampleRows.length} sample rows. Includes ${numericColumns.length} numeric, ${categoricalColumns.length} categorical, and ${dateColumns.length} date columns.`,\n    insights: [\n      `Dataset has ${schema.length} total columns`,\n      `${numericColumns.length} numeric columns available for quantitative analysis`,\n      `${categoricalColumns.length} categorical columns for grouping and segmentation`,\n      dateColumns.length > 0 ? `${dateColumns.length} date columns for temporal analysis` : 'No date columns detected',\n      `Data completeness appears to be ${Math.round((1 - schema.reduce((acc, col) => acc + (col.stats?.nullCount || 0), 0) / (schema.length * sampleRows.length)) * 100)}%`\n    ],\n    correlations: [],\n    recommendations: [\n      numericColumns.length > 0 ? `Create bar charts with ${numericColumns[0].name}` : 'Create count charts for categorical data',\n      categoricalColumns.length > 0 ? `Group data by ${categoricalColumns[0].name}` : 'Analyze numeric distributions',\n      dateColumns.length > 0 ? 'Consider time series analysis with date columns' : 'Add date columns for temporal analysis'\n    ],\n    dataQuality: {\n      completeness: Math.round((1 - schema.reduce((acc, col) => acc + (col.stats?.nullCount || 0), 0) / (schema.length * sampleRows.length)) * 100),\n      consistency: 85,\n      issues: schema.filter(col => (col.stats?.nullCount || 0) > 0).map(col => `${col.name} has missing values`)\n    },\n    patterns: {\n      trends: numericColumns.length > 1 ? [`Potential trends between ${numericColumns[0].name} and ${numericColumns[1].name}`] : [],\n      outliers: [],\n      seasonality: dateColumns.length > 0 ? ['Potential seasonal patterns in time-based data'] : [],\n      distributions: numericColumns.map(col => ({\n        column: col.name,\n        type: 'unknown',\n        description: `${col.name} distribution needs analysis`\n      }))\n    },\n    businessInsights: [\n      'Upload complete dataset for deeper business insights',\n      'Consider data validation and cleaning procedures',\n      'Identify key performance indicators in your data'\n    ],\n    suggestedPrompts: [\n      {\n        prompt: numericColumns.length > 0 ? `Show me a bar chart of ${numericColumns[0].name}` : 'Show me the data distribution',\n        category: 'Overview',\n        description: 'Basic data overview',\n        chartType: 'bar'\n      },\n      {\n        prompt: categoricalColumns.length > 0 ? `Display a pie chart of ${categoricalColumns[0].name} distribution` : 'Show me category counts',\n        category: 'Distribution',\n        description: 'Category distribution analysis',\n        chartType: 'pie'\n      },\n      {\n        prompt: numericColumns.length > 1 ? `Compare ${numericColumns[0].name} vs ${numericColumns[1].name}` : 'Show me correlations',\n        category: 'Comparison',\n        description: 'Compare different metrics',\n        chartType: 'scatter'\n      }\n    ],\n    autoCharts: await generateAutoCharts(schema, sampleRows, null, null)\n  };\n}\n\nexport function createFallbackChart(schema: ColumnSchema[], sampleRows: any[]): any {\n  if (schema.length === 0 || sampleRows.length === 0) {\n    return {\n      data: [{\n        x: ['No Data'],\n        y: [0],\n        type: 'bar'\n      }],\n      layout: {\n        title: 'No Data Available',\n        xaxis: { title: 'Categories' },\n        yaxis: { title: 'Values' }\n      }\n    };\n  }\n\n  // Find first numeric column for y-axis\n  const numericColumn = schema.find(col => col.type === 'number');\n  // Find first string column for x-axis  \n  const stringColumn = schema.find(col => col.type === 'string');\n  \n  if (!numericColumn) {\n    // If no numeric data, create a simple count chart\n    const categories = [...new Set(sampleRows.map(row => row[schema[0].name]))];\n    const counts = categories.map(cat => \n      sampleRows.filter(row => row[schema[0].name] === cat).length\n    );\n    \n    return {\n      data: [{\n        x: categories,\n        y: counts,\n        type: 'bar'\n      }],\n      layout: {\n        title: `Count by ${schema[0].name}`,\n        xaxis: { title: schema[0].name },\n        yaxis: { title: 'Count' }\n      }\n    };\n  }\n  \n  const xColumn = stringColumn || schema[0];\n  const yColumn = numericColumn;\n  \n  return {\n    data: [{\n      x: sampleRows.map(row => row[xColumn.name]),\n      y: sampleRows.map(row => row[yColumn.name]),\n      type: 'bar'\n    }],\n    layout: {\n      title: `${yColumn.name} by ${xColumn.name}`,\n      xaxis: { title: xColumn.name },\n      yaxis: { title: yColumn.name }\n    }\n  };\n}", "import { ColumnSchema, NvidiaClient, CodeGenerationResult, ExecutionResult, ReasoningResult } from './types';\nimport { calculateCorrelation } from './utils';\n\n// NVIDIA API Configuration\nconst NVIDIA_MODEL = \"nvidia/llama-3.1-nemotron-ultra-253b-v1\";\n\n// Initialize NVIDIA client\nexport function createNvidiaClient(apiKey: string): NvidiaClient {\n  // Note: In Cloudflare Workers, we'll use fetch directly\n  return {\n    chat: {\n      completions: {\n        create: async (params) => {\n          const response = await fetch(\"https://integrate.api.nvidia.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": `Bearer ${apiKey}`,\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              model: params.model,\n              messages: params.messages,\n              temperature: params.temperature || 0.2,\n              max_tokens: params.max_tokens || 1024,\n              stream: params.stream || false\n            })\n          });\n          \n          if (!response.ok) {\n            throw new Error(`NVIDIA API error: ${response.status} ${response.statusText}`);\n          }\n          \n          return await response.json();\n        }\n      }\n    }\n  };\n}\n\n// === QueryUnderstandingTool ===\nexport async function QueryUnderstandingTool(query: string, client: NvidiaClient): Promise<boolean> {\n  try {\n    const messages = [\n      {\n        role: \"system\",\n        content: \"detailed thinking off. You are an assistant that determines if a query is requesting a data visualization. Respond with only 'true' if the query is asking for a plot, chart, graph, or any visual representation of data. Otherwise, respond with 'false'.\"\n      },\n      {\n        role: \"user\",\n        content: query\n      }\n    ];\n    \n    const response = await client.chat.completions.create({\n      model: NVIDIA_MODEL,\n      messages,\n      temperature: 0.1,\n      max_tokens: 5\n    });\n    \n    const intent_response = response.choices[0].message.content.strip().toLowerCase();\n    return intent_response === \"true\";\n  } catch (error) {\n    console.error(\"QueryUnderstandingTool error:\", error);\n    // Default to true for visualization requests to maintain functionality\n    return true;\n  }\n}\n\n// === CodeGeneration TOOLS ===\n\n// PlotCodeGeneratorTool - generates prompt for pandas+matplotlib\nfunction PlotCodeGeneratorTool(cols: string[], query: string): string {\n  return `Given DataFrame \\`df\\` with columns: ${cols.join(', ')}\nWrite Python code using pandas **and matplotlib** (as plt) to answer:\n\"${query}\"\n\nRules\n-----\n1. Use pandas for data manipulation and matplotlib.pyplot (as plt) for plotting.\n2. Assign the final result (DataFrame, Series, scalar *or* matplotlib Figure) to a variable named \\`result\\`.\n3. Create only ONE relevant plot. Set \\`figsize=(6,4)\\`, add title/labels.\n4. Return your answer inside a single markdown fence that starts with \\`\\`\\`python and ends with \\`\\`\\`.`;\n}\n\n// CodeWritingTool - generates prompt for pandas-only operations\nfunction CodeWritingTool(cols: string[], query: string): string {\n  return `Given DataFrame \\`df\\` with columns: ${cols.join(', ')}\nWrite Python code (pandas **only**, no plotting) to answer:\n\"${query}\"\n\nRules\n-----\n1. Use pandas operations on \\`df\\` only.\n2. Assign the final result to \\`result\\`.\n3. Wrap the snippet in a single \\`\\`\\`python code fence (no extra prose).`;\n}\n\n// === CodeGenerationAgent ===\nexport async function CodeGenerationAgent(\n  query: string, \n  schema: ColumnSchema[], \n  client: NvidiaClient\n): Promise<CodeGenerationResult> {\n  try {\n    const shouldPlot = await QueryUnderstandingTool(query, client);\n    const cols = schema.map(col => col.name);\n    const prompt = shouldPlot \n      ? PlotCodeGeneratorTool(cols, query) \n      : CodeWritingTool(cols, query);\n\n    const messages = [\n      {\n        role: \"system\",\n        content: \"detailed thinking off. You are a Python data-analysis expert who writes clean, efficient code. Solve the given problem with optimal pandas operations. Be concise and focused. Your response must contain ONLY a properly-closed ```python code block with no explanations before or after. Ensure your solution is correct, handles edge cases, and follows best practices for data analysis.\"\n      },\n      {\n        role: \"user\",\n        content: prompt\n      }\n    ];\n\n    const response = await client.chat.completions.create({\n      model: NVIDIA_MODEL,\n      messages,\n      temperature: 0.2,\n      max_tokens: 1024\n    });\n\n    const fullResponse = response.choices[0].message.content;\n    const code = extractFirstCodeBlock(fullResponse);\n    \n    return {\n      code,\n      shouldPlot,\n      error: code ? undefined : \"Failed to extract code from response\"\n    };\n  } catch (error) {\n    console.error(\"CodeGenerationAgent error:\", error);\n    return {\n      code: \"\",\n      shouldPlot: false,\n      error: error.message\n    };\n  }\n}\n\n// === ExecutionAgent ===\nexport function ExecutionAgent(code: string, data: any[], shouldPlot: boolean): ExecutionResult {\n  try {\n    console.log(\"Executing code:\", code);\n    console.log(\"Data rows:\", data.length);\n    console.log(\"Should plot:\", shouldPlot);\n    \n    if (shouldPlot && code.includes(\"plt.\")) {\n      // Convert Python matplotlib code to Plotly.js spec\n      const plotlySpec = convertMatplotlibToPlotly(code, data);\n      \n      if (plotlySpec) {\n        return {\n          result: {\n            type: \"plot\",\n            chartSpec: plotlySpec,\n            description: \"Interactive visualization generated from Python code\",\n            code: code,\n            dataPoints: data.length\n          }\n        };\n      } else {\n        // If conversion fails, generate a fallback chart based on code analysis\n        const fallbackChart = generateIntelligentFallbackChart(code, data);\n        return {\n          result: {\n            type: \"plot\", \n            chartSpec: fallbackChart,\n            description: \"Generated visualization based on code analysis\",\n            code: code,\n            dataPoints: data.length\n          }\n        };\n      }\n    } else {\n      // Execute pandas data operations\n      const dataResult = executeDataOperations(code, data);\n      return {\n        result: {\n          type: \"data\",\n          value: dataResult,\n          description: \"Data analysis result\",\n          code: code,\n          dataPoints: data.length\n        }\n      };\n    }\n  } catch (error) {\n    return {\n      result: null,\n      error: `Error executing code: ${error.message}`\n    };\n  }\n}\n\n// Convert Python matplotlib code to Plotly.js specification\nfunction convertMatplotlibToPlotly(code: string, data: any[]): any | null {\n  try {\n    // Analyze the Python code to understand the visualization intent\n    const codeAnalysis = analyzePythonCode(code);\n    \n    if (codeAnalysis.chartType === 'bar') {\n      return generateBarChartFromCode(codeAnalysis, data);\n    } else if (codeAnalysis.chartType === 'line' || codeAnalysis.chartType === 'plot') {\n      return generateLineChartFromCode(codeAnalysis, data);\n    } else if (codeAnalysis.chartType === 'scatter') {\n      return generateScatterChartFromCode(codeAnalysis, data);\n    } else if (codeAnalysis.chartType === 'hist' || codeAnalysis.chartType === 'histogram') {\n      return generateHistogramFromCode(codeAnalysis, data);\n    } else if (codeAnalysis.chartType === 'pie') {\n      return generatePieChartFromCode(codeAnalysis, data);\n    } else if (codeAnalysis.chartType === 'dual_axis') {\n      return generateDualAxisChartFromCode(codeAnalysis, data);\n    }\n    \n    return null;\n  } catch (error) {\n    console.error(\"Error converting matplotlib to Plotly:\", error);\n    return null;\n  }\n}\n\n// Analyze Python code to extract visualization intent\nfunction analyzePythonCode(code: string): any {\n  const analysis: any = {\n    chartType: 'unknown',\n    columns: [],\n    operations: [],\n    title: '',\n    xlabel: '',\n    ylabel: '',\n    groupBy: null,\n    aggregation: null\n  };\n  \n  // Extract chart type with improved patterns\n  if (code.includes('.plot(kind=\\'bar\\')') || code.includes('.plot.bar(') || code.includes('plt.bar(') || code.includes('.value_counts().plot(kind=\\'bar\\')')) {\n    analysis.chartType = 'bar';\n  } else if (code.includes('.plot(kind=\\'line\\')') || code.includes('.plot(') || code.includes('plt.plot(') || code.includes('mode=\\'lines')) {\n    analysis.chartType = 'line';\n  } else if (code.includes('plt.scatter(') || code.includes('kind=\\'scatter\\'') || code.includes('mode=\\'markers\\'')) {\n    analysis.chartType = 'scatter';\n  } else if (code.includes('plt.hist(') || code.includes('kind=\\'hist\\'') || code.includes('.hist(')) {\n    analysis.chartType = 'hist';\n  } else if (code.includes('plt.pie(') || code.includes('kind=\\'pie\\'')) {\n    analysis.chartType = 'pie';\n  } else if (code.includes('ax2') || code.includes('twinx()')) {\n    analysis.chartType = 'dual_axis';\n  }\n  \n  // Extract title with multiple patterns\n  const titleMatches = [\n    code.match(/title=['\"]([^'\"]+)['\"]/),\n    code.match(/plt\\.title\\(['\"]([^'\"]+)['\"]\\)/),\n    code.match(/\\.set_title\\(['\"]([^'\"]+)['\"]\\)/)\n  ];\n  const titleMatch = titleMatches.find(match => match !== null);\n  if (titleMatch) analysis.title = titleMatch[1];\n  \n  // Extract labels with multiple patterns\n  const xlabelMatches = [\n    code.match(/xlabel=['\"]([^'\"]+)['\"]/),\n    code.match(/plt\\.xlabel\\(['\"]([^'\"]+)['\"]\\)/),\n    code.match(/\\.set_xlabel\\(['\"]([^'\"]+)['\"]\\)/)\n  ];\n  const xlabelMatch = xlabelMatches.find(match => match !== null);\n  if (xlabelMatch) analysis.xlabel = xlabelMatch[1];\n  \n  const ylabelMatches = [\n    code.match(/ylabel=['\"]([^'\"]+)['\"]/),\n    code.match(/plt\\.ylabel\\(['\"]([^'\"]+)['\"]\\)/),\n    code.match(/\\.set_ylabel\\(['\"]([^'\"]+)['\"]\\)/)\n  ];\n  const ylabelMatch = ylabelMatches.find(match => match !== null);\n  if (ylabelMatch) analysis.ylabel = ylabelMatch[1];\n  \n  // Extract column references with improved patterns\n  const columnMatches = code.match(/df\\[['\"]([^'\"]+)['\"]\\]/g);\n  if (columnMatches) {\n    analysis.columns = [...new Set(columnMatches.map(match => match.match(/['\"]([^'\"]+)['\"]/)[1]))];\n  }\n  \n  // Also extract from function calls like plt.bar(df['col1'], df['col2'])\n  const functionColumnMatches = code.match(/(?:plt\\.\\w+|\\.plot)\\([^)]*df\\[['\"]([^'\"]+)['\"]\\][^)]*(?:,\\s*df\\[['\"]([^'\"]+)['\"]\\])?/);\n  if (functionColumnMatches) {\n    if (functionColumnMatches[1]) analysis.columns.push(functionColumnMatches[1]);\n    if (functionColumnMatches[2]) analysis.columns.push(functionColumnMatches[2]);\n  }\n  \n  // Remove duplicates\n  analysis.columns = [...new Set(analysis.columns)];\n  \n  // Extract groupby operations\n  const groupByMatch = code.match(/\\.groupby\\(['\"]([^'\"]+)['\"]\\)/);\n  if (groupByMatch) analysis.groupBy = groupByMatch[1];\n  \n  // Extract aggregations\n  if (code.includes('.mean()')) analysis.aggregation = 'mean';\n  else if (code.includes('.sum()')) analysis.aggregation = 'sum';\n  else if (code.includes('.count()')) analysis.aggregation = 'count';\n  else if (code.includes('.value_counts()')) analysis.aggregation = 'value_counts';\n  else if (code.includes('.median()')) analysis.aggregation = 'median';\n  else if (code.includes('.std()')) analysis.aggregation = 'std';\n  \n  console.log(\"\uD83D\uDCCA Code analysis result:\", analysis);\n  \n  return analysis;\n}\n\n// Generate bar chart from code analysis\nfunction generateBarChartFromCode(analysis: any, data: any[]): any {\n  try {\n    let chartData;\n    \n    if (analysis.groupBy && analysis.aggregation && analysis.columns.length >= 1) {\n      // Grouped aggregation\n      const groups = data.reduce((acc, row) => {\n        const key = row[analysis.groupBy];\n        if (!acc[key]) acc[key] = [];\n        acc[key].push(row);\n        return acc;\n      }, {});\n      \n      const xValues = Object.keys(groups);\n      const yValues = xValues.map(key => {\n        const groupData = groups[key];\n        const values = groupData.map(row => Number(row[analysis.columns[0]])).filter(v => !isNaN(v));\n        if (analysis.aggregation === 'mean') return values.reduce((a,b) => a+b, 0) / values.length;\n        if (analysis.aggregation === 'sum') return values.reduce((a,b) => a+b, 0);\n        return values.length;\n      });\n      \n      chartData = [{\n        x: xValues,\n        y: yValues,\n        type: 'bar',\n        marker: { \n          color: '#667eea',\n          line: { color: '#2d3748', width: 1 }\n        },\n        text: yValues.map(v => v.toLocaleString()),\n        textposition: 'outside'\n      }];\n    } else if (analysis.columns.length >= 2) {\n      // Simple x,y bar chart\n      chartData = [{\n        x: data.map(row => row[analysis.columns[0]]),\n        y: data.map(row => Number(row[analysis.columns[1]])),\n        type: 'bar',\n        marker: { \n          color: '#667eea',\n          line: { color: '#2d3748', width: 1 }\n        }\n      }];\n    } else {\n      return null;\n    }\n    \n    return {\n      data: chartData,\n      layout: {\n        title: { text: analysis.title || 'Bar Chart', font: { size: 16, color: '#2d3748' } },\n        xaxis: { title: analysis.xlabel || analysis.groupBy || analysis.columns[0] },\n        yaxis: { title: analysis.ylabel || analysis.columns[1] || 'Values' },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    };\n  } catch (error) {\n    console.error(\"Error generating bar chart:\", error);\n    return null;\n  }\n}\n\n// Generate line chart from code analysis  \nfunction generateLineChartFromCode(analysis: any, data: any[]): any {\n  try {\n    if (analysis.columns.length < 2) return null;\n    \n    const chartData = [{\n      x: data.map(row => row[analysis.columns[0]]),\n      y: data.map(row => Number(row[analysis.columns[1]])),\n      type: 'scatter',\n      mode: 'lines+markers',\n      line: { color: '#667eea', width: 3 },\n      marker: { color: '#764ba2', size: 6 }\n    }];\n    \n    return {\n      data: chartData,\n      layout: {\n        title: { text: analysis.title || 'Line Chart', font: { size: 16, color: '#2d3748' } },\n        xaxis: { title: analysis.xlabel || analysis.columns[0] },\n        yaxis: { title: analysis.ylabel || analysis.columns[1] },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    };\n  } catch (error) {\n    console.error(\"Error generating line chart:\", error);\n    return null;\n  }\n}\n\n// Generate scatter chart from code analysis\nfunction generateScatterChartFromCode(analysis: any, data: any[]): any {\n  try {\n    if (analysis.columns.length < 2) return null;\n    \n    const chartData = [{\n      x: data.map(row => Number(row[analysis.columns[0]])),\n      y: data.map(row => Number(row[analysis.columns[1]])),\n      type: 'scatter',\n      mode: 'markers',\n      marker: { \n        color: '#667eea', \n        size: 8,\n        line: { color: '#2d3748', width: 1 }\n      }\n    }];\n    \n    return {\n      data: chartData,\n      layout: {\n        title: { text: analysis.title || 'Scatter Plot', font: { size: 16, color: '#2d3748' } },\n        xaxis: { title: analysis.xlabel || analysis.columns[0] },\n        yaxis: { title: analysis.ylabel || analysis.columns[1] },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    };\n  } catch (error) {\n    console.error(\"Error generating scatter chart:\", error);\n    return null;\n  }\n}\n\n// Generate histogram from code analysis\nfunction generateHistogramFromCode(analysis: any, data: any[]): any {\n  try {\n    if (analysis.columns.length < 1) return null;\n    \n    const values = data.map(row => Number(row[analysis.columns[0]])).filter(v => !isNaN(v));\n    \n    const chartData = [{\n      x: values,\n      type: 'histogram',\n      nbinsx: Math.min(30, Math.max(10, Math.floor(Math.sqrt(values.length)))),\n      marker: {\n        color: '#667eea',\n        opacity: 0.7,\n        line: { color: '#2d3748', width: 1 }\n      }\n    }];\n    \n    return {\n      data: chartData,\n      layout: {\n        title: { text: analysis.title || 'Distribution', font: { size: 16, color: '#2d3748' } },\n        xaxis: { title: analysis.xlabel || analysis.columns[0] },\n        yaxis: { title: 'Frequency' },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    };\n  } catch (error) {\n    console.error(\"Error generating histogram:\", error);\n    return null;\n  }\n}\n\n// Generate pie chart from code analysis\nfunction generatePieChartFromCode(analysis: any, data: any[]): any {\n  try {\n    if (analysis.columns.length < 1) return null;\n    \n    // Count occurrences\n    const counts = data.reduce((acc, row) => {\n      const value = row[analysis.columns[0]];\n      acc[value] = (acc[value] || 0) + 1;\n      return acc;\n    }, {});\n    \n    const labels = Object.keys(counts);\n    const values = Object.values(counts);\n    \n    const chartData = [{\n      labels: labels,\n      values: values,\n      type: 'pie',\n      marker: {\n        colors: ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe'],\n        line: { color: '#ffffff', width: 2 }\n      },\n      textinfo: 'label+percent',\n      textposition: 'auto'\n    }];\n    \n    return {\n      data: chartData,\n      layout: {\n        title: { text: analysis.title || 'Distribution', font: { size: 16, color: '#2d3748' } },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 60 }\n      }\n    };\n  } catch (error) {\n    console.error(\"Error generating pie chart:\", error);\n    return null;\n  }\n}\n\n// Generate dual axis chart from code analysis\nfunction generateDualAxisChartFromCode(analysis: any, data: any[]): any {\n  try {\n    if (analysis.columns.length < 3) return null;\n    \n    const chartData = [\n      {\n        x: data.map(row => row[analysis.columns[0]]),\n        y: data.map(row => Number(row[analysis.columns[1]])),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: analysis.columns[1],\n        line: { color: '#667eea', width: 3 },\n        yaxis: 'y'\n      },\n      {\n        x: data.map(row => row[analysis.columns[0]]),\n        y: data.map(row => Number(row[analysis.columns[2]])),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: analysis.columns[2],\n        line: { color: '#f093fb', width: 3 },\n        yaxis: 'y2'\n      }\n    ];\n    \n    return {\n      data: chartData,\n      layout: {\n        title: { text: analysis.title || 'Dual Axis Chart', font: { size: 16, color: '#2d3748' } },\n        xaxis: { title: analysis.xlabel || analysis.columns[0] },\n        yaxis: { \n          title: analysis.columns[1],\n          side: 'left',\n          color: '#667eea'\n        },\n        yaxis2: {\n          title: analysis.columns[2],\n          side: 'right',\n          overlaying: 'y',\n          color: '#f093fb'\n        },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 60 }\n      }\n    };\n  } catch (error) {\n    console.error(\"Error generating dual axis chart:\", error);\n    return null;\n  }\n}\n\n// Generate intelligent fallback chart when conversion fails\nfunction generateIntelligentFallbackChart(code: string, data: any[]): any {\n  // Analyze data structure and create appropriate visualization\n  if (data.length === 0) {\n    return {\n      data: [{ x: ['No Data'], y: [0], type: 'bar' }],\n      layout: { title: 'No Data Available' }\n    };\n  }\n  \n  const keys = Object.keys(data[0]);\n  const numericColumns = keys.filter(key => \n    !isNaN(Number(data[0][key])) && data[0][key] !== null && data[0][key] !== ''\n  );\n  const stringColumns = keys.filter(key => \n    isNaN(Number(data[0][key])) || data[0][key] === null || data[0][key] === ''\n  );\n  \n  if (numericColumns.length >= 2) {\n    // Create scatter plot with first two numeric columns\n    return {\n      data: [{\n        x: data.map(row => Number(row[numericColumns[0]])),\n        y: data.map(row => Number(row[numericColumns[1]])),\n        type: 'scatter',\n        mode: 'markers',\n        marker: { color: '#667eea', size: 8 }\n      }],\n      layout: {\n        title: `${numericColumns[1]} vs ${numericColumns[0]}`,\n        xaxis: { title: numericColumns[0] },\n        yaxis: { title: numericColumns[1] },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    };\n  } else if (numericColumns.length >= 1 && stringColumns.length >= 1) {\n    // Create bar chart\n    return {\n      data: [{\n        x: data.map(row => row[stringColumns[0]]),\n        y: data.map(row => Number(row[numericColumns[0]])),\n        type: 'bar',\n        marker: { color: '#667eea' }\n      }],\n      layout: {\n        title: `${numericColumns[0]} by ${stringColumns[0]}`,\n        xaxis: { title: stringColumns[0] },\n        yaxis: { title: numericColumns[0] },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    };\n  }\n  \n  // Default fallback\n  return {\n    data: [{ x: keys, y: keys.map(() => 1), type: 'bar' }],\n    layout: { title: 'Data Overview' }\n  };\n}\n\n// Execute pandas data operations (simplified simulation)\nfunction executeDataOperations(code: string, data: any[]): any {\n  // Simulate common pandas operations\n  if (code.includes('.describe()')) {\n    const numericColumns = Object.keys(data[0]).filter(key => \n      !isNaN(Number(data[0][key]))\n    );\n    \n    const stats = {};\n    numericColumns.forEach(col => {\n      const values = data.map(row => Number(row[col])).filter(v => !isNaN(v));\n      if (values.length > 0) {\n        stats[col] = {\n          count: values.length,\n          mean: values.reduce((a, b) => a + b, 0) / values.length,\n          min: Math.min(...values),\n          max: Math.max(...values)\n        };\n      }\n    });\n    \n    return { type: 'statistics', data: stats };\n  } else if (code.includes('.head()')) {\n    return { type: 'preview', data: data.slice(0, 5) };\n  } else if (code.includes('.shape')) {\n    return { type: 'shape', data: [data.length, Object.keys(data[0]).length] };\n  } else if (code.includes('.info()')) {\n    return { \n      type: 'info', \n      data: {\n        rows: data.length,\n        columns: Object.keys(data[0]).length,\n        columns_list: Object.keys(data[0])\n      }\n    };\n  }\n  \n  return { type: 'result', data: 'Analysis complete' };\n}\n\n// === ReasoningCurator TOOL ===\nfunction ReasoningCurator(query: string, result: any): string {\n  const isError = result?.error;\n  const isPlot = result?.type === \"plot\";\n\n  if (isError) {\n    return `The user asked: \"${query}\".\nThere was an error: ${result.error}\nExplain what went wrong and suggest alternatives.`;\n  } else if (isPlot) {\n    return `The user asked: \"${query}\".\nBelow is a description of the plot result:\n${result.description || \"Chart created\"}\nExplain in 2\u20133 concise sentences what the chart shows (no code talk).`;\n  } else {\n    return `The user asked: \"${query}\".\nThe result value is: ${result?.value || result?.description || \"Analysis complete\"}\nExplain in 2\u20133 concise sentences what this tells about the data (no mention of charts).`;\n  }\n}\n\n// === ReasoningAgent ===\nexport async function ReasoningAgent(\n  query: string, \n  result: any, \n  client: NvidiaClient\n): Promise<ReasoningResult> {\n  try {\n    const prompt = ReasoningCurator(query, result);\n    \n    const response = await client.chat.completions.create({\n      model: NVIDIA_MODEL,\n      messages: [\n        {\n          role: \"system\",\n          content: \"detailed thinking on. You are an insightful data analyst.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      temperature: 0.2,\n      max_tokens: 1024\n    });\n\n    const fullResponse = response.choices[0].message.content;\n    \n    // Extract thinking and explanation\n    const { thinking, explanation } = extractThinkingAndExplanation(fullResponse);\n    \n    return {\n      thinking,\n      explanation\n    };\n  } catch (error) {\n    console.error(\"ReasoningAgent error:\", error);\n    return {\n      thinking: \"\",\n      explanation: \"Unable to generate reasoning due to an error.\",\n      error: error.message\n    };\n  }\n}\n\n// === DataInsightAgent (for upload-time analysis) ===\nexport async function DataInsightAgent(schema: ColumnSchema[], data: any[], client: NvidiaClient): Promise<string> {\n  try {\n    const prompt = `Given a dataset with ${data.length} rows and ${schema.length} columns:\nColumns: ${schema.map(col => col.name).join(', ')}\nData types: ${schema.map(col => `${col.name}: ${col.type}`).join(', ')}\n\nProvide:\n1. A brief description of what this dataset contains\n2. 3-4 possible data analysis questions that could be explored\nKeep it concise and focused.`;\n\n    const response = await client.chat.completions.create({\n      model: NVIDIA_MODEL,\n      messages: [\n        {\n          role: \"system\", \n          content: \"detailed thinking off. You are a data analyst providing brief, focused insights.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      temperature: 0.2,\n      max_tokens: 512\n    });\n\n    return response.choices[0].message.content;\n  } catch (error) {\n    console.error(\"DataInsightAgent error:\", error);\n    return `Error generating dataset insights: ${error.message}`;\n  }\n}\n\n// === Helper Functions ===\n\nfunction extractFirstCodeBlock(text: string): string {\n  const start = text.indexOf(\"```python\");\n  if (start === -1) {\n    return \"\";\n  }\n  const codeStart = start + \"```python\".length;\n  const end = text.indexOf(\"```\", codeStart);\n  if (end === -1) {\n    return \"\";\n  }\n  return text.substring(codeStart, end).trim();\n}\n\nfunction extractThinkingAndExplanation(text: string): { thinking: string; explanation: string } {\n  // Extract thinking content between <think>...</think> tags\n  const thinkStart = text.indexOf(\"<think>\");\n  const thinkEnd = text.indexOf(\"</think>\");\n  \n  let thinking = \"\";\n  let explanation = text;\n  \n  if (thinkStart !== -1 && thinkEnd !== -1) {\n    thinking = text.substring(thinkStart + 7, thinkEnd).trim();\n    explanation = text.replace(/<think>.*?<\\/think>/s, \"\").trim();\n  }\n  \n  return { thinking, explanation };\n}\n\n// Add String.prototype.strip() polyfill for compatibility\ndeclare global {\n  interface String {\n    strip(): string;\n  }\n}\n\nString.prototype.strip = function() {\n  return this.trim();\n};\n\n// === DashboardGenerationAgent (for enhanced automatic charts) ===\nexport async function DashboardGenerationAgent(\n  schema: ColumnSchema[], \n  data: any[], \n  analysis: any, \n  client: NvidiaClient\n): Promise<any[]> {\n  try {\n    console.log(\"\uD83C\uDFA8 DashboardGenerationAgent: Creating intelligent dashboard...\");\n    \n    // Generate dashboard insights using NVIDIA\n    const dashboardPrompt = createDashboardPrompt(schema, data, analysis);\n    \n    const response = await client.chat.completions.create({\n      model: NVIDIA_MODEL,\n      messages: [\n        {\n          role: \"system\",\n          content: \"detailed thinking off. You are a data visualization expert who creates optimal dashboard layouts. You MUST respond with ONLY valid JSON that starts with { and ends with }. No explanations, no additional text. Focus on the most valuable and insightful visualizations based on the data characteristics and business context.\"\n        },\n        {\n          role: \"user\",\n          content: dashboardPrompt\n        }\n      ],\n      temperature: 0.1,\n      max_tokens: 1024\n    });\n    \n    let dashboardRecommendations;\n    try {\n      const responseText = response.choices[0].message.content;\n      \n      // Extract JSON from response if it has extra text\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      const jsonText = jsonMatch ? jsonMatch[0] : responseText;\n      \n      dashboardRecommendations = JSON.parse(jsonText);\n    } catch (jsonError) {\n      console.error(\"Failed to parse NVIDIA response as JSON:\", jsonError);\n      throw new Error(\"Invalid JSON response from NVIDIA API\");\n    }\n    \n    // Generate actual charts based on NVIDIA recommendations\n    const charts = [];\n    \n    if (dashboardRecommendations?.charts && Array.isArray(dashboardRecommendations.charts)) {\n      for (const recommendation of dashboardRecommendations.charts.slice(0, 5)) {\n        const chart = await generateDashboardChart(recommendation, schema, data, client);\n        if (chart) {\n          // Ensure consistent format for frontend compatibility\n          const formattedChart = {\n            title: chart.metadata?.title || recommendation.title,\n            description: chart.metadata?.businessInsight || recommendation.business_insight || 'Data visualization',\n            chartSpec: {\n              data: chart.data,\n              layout: chart.layout\n            },\n            priority: chart.metadata?.priority || recommendation.priority || 1\n          };\n          charts.push(formattedChart);\n        }\n      }\n    }\n    \n    console.log(`\u2705 Generated ${charts.length} intelligent dashboard charts`);\n    return charts.length > 0 ? charts : generateEnhancedAutoCharts(schema, data, analysis);\n    \n  } catch (error) {\n    console.error(\"DashboardGenerationAgent error:\", error);\n    // Fallback to enhanced automatic generation\n    return generateEnhancedAutoCharts(schema, data, analysis);\n  }\n}\n\nfunction createDashboardPrompt(schema: ColumnSchema[], data: any[], analysis: any): string {\n  const numericCols = schema.filter(col => col.type === 'number').map(col => col.name);\n  const categoricalCols = schema.filter(col => col.type === 'string').map(col => col.name);\n  const dateCols = schema.filter(col => col.type === 'date').map(col => col.name);\n  \n  return `Based on this dataset analysis, recommend the 5 most valuable visualizations for a comprehensive dashboard:\n\nDATASET CHARACTERISTICS:\n- Rows: ${data.length}\n- Numeric columns: ${numericCols.join(', ')}\n- Categorical columns: ${categoricalCols.join(', ')}\n- Date columns: ${dateCols.join(', ')}\n\nBUSINESS INSIGHTS:\n${JSON.stringify(analysis?.businessInsights || analysis?.insights || [], null, 2)}\n\nCORRELATIONS FOUND:\n${JSON.stringify(analysis?.correlations || [], null, 2)}\n\nPATTERNS DETECTED:\n${JSON.stringify(analysis?.patterns || {}, null, 2)}\n\nRespond with exactly this JSON structure:\n{\n  \"charts\": [\n    {\n      \"title\": \"Specific descriptive title\",\n      \"type\": \"bar|line|scatter|pie|histogram|dual_axis\",\n      \"primary_column\": \"column_name\",\n      \"secondary_column\": \"column_name_if_needed\",\n      \"groupby_column\": \"column_name_if_grouping\",\n      \"aggregation\": \"mean|sum|count|none\",\n      \"business_insight\": \"What business value this chart provides\",\n      \"priority\": 1-5\n    }\n  ]\n}\n\nFocus on:\n1. Key performance indicators and metrics\n2. Trends and patterns over time (if date columns exist)\n3. Distributions and outliers\n4. Relationships and correlations\n5. Category performance comparisons\n\nPrioritize charts that provide actionable business insights.`;\n}\n\nasync function generateDashboardChart(\n  recommendation: any, \n  schema: ColumnSchema[], \n  data: any[], \n  client: NvidiaClient\n): Promise<any | null> {\n  try {\n    // Generate Python code for this specific chart\n    const chartCode = generateChartCode(recommendation, schema);\n    \n    // Convert to Plotly spec using our existing logic\n    const plotlySpec = convertMatplotlibToPlotly(chartCode, data);\n    \n    if (plotlySpec) {\n      return {\n        ...plotlySpec,\n        metadata: {\n          title: recommendation.title,\n          type: recommendation.type,\n          businessInsight: recommendation.business_insight,\n          priority: recommendation.priority\n        }\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error(\"Error generating dashboard chart:\", error);\n    return null;\n  }\n}\n\nfunction generateChartCode(recommendation: any, schema: ColumnSchema[]): string {\n  const { type, primary_column, secondary_column, groupby_column, aggregation } = recommendation;\n  \n  let code = \"import pandas as pd\\nimport matplotlib.pyplot as plt\\n\\n\";\n  \n  switch (type) {\n    case 'bar':\n      if (groupby_column && aggregation && aggregation !== 'none') {\n        code += `result = df.groupby('${groupby_column}')['${primary_column}'].${aggregation}()\\n`;\n        code += `plt.bar(result.index, result.values)\\n`;\n        code += `plt.title('${recommendation.title}')\\n`;\n        code += `plt.xlabel('${groupby_column}')\\n`;\n        code += `plt.ylabel('${primary_column} (${aggregation})')\\n`;\n      } else if (primary_column && secondary_column) {\n        code += `plt.bar(df['${primary_column}'], df['${secondary_column}'])\\n`;\n        code += `plt.title('${recommendation.title}')\\n`;\n        code += `plt.xlabel('${primary_column}')\\n`;\n        code += `plt.ylabel('${secondary_column}')\\n`;\n      }\n      break;\n      \n    case 'line':\n      if (primary_column && secondary_column) {\n        code += `plt.plot(df['${primary_column}'], df['${secondary_column}'])\\n`;\n        code += `plt.title('${recommendation.title}')\\n`;\n        code += `plt.xlabel('${primary_column}')\\n`;\n        code += `plt.ylabel('${secondary_column}')\\n`;\n      }\n      break;\n      \n    case 'scatter':\n      if (primary_column && secondary_column) {\n        code += `plt.scatter(df['${primary_column}'], df['${secondary_column}'])\\n`;\n        code += `plt.title('${recommendation.title}')\\n`;\n        code += `plt.xlabel('${primary_column}')\\n`;\n        code += `plt.ylabel('${secondary_column}')\\n`;\n      }\n      break;\n      \n    case 'histogram':\n      code += `plt.hist(df['${primary_column}'])\\n`;\n      code += `plt.title('${recommendation.title}')\\n`;\n      code += `plt.xlabel('${primary_column}')\\n`;\n      code += `plt.ylabel('Frequency')\\n`;\n      break;\n      \n    case 'pie':\n      code += `counts = df['${primary_column}'].value_counts()\\n`;\n      code += `plt.pie(counts.values, labels=counts.index)\\n`;\n      code += `plt.title('${recommendation.title}')\\n`;\n      break;\n      \n    case 'dual_axis':\n      if (primary_column && secondary_column) {\n        code += `fig, ax1 = plt.subplots()\\n`;\n        code += `ax1.plot(df.index, df['${primary_column}'], 'b-')\\n`;\n        code += `ax1.set_ylabel('${primary_column}', color='b')\\n`;\n        code += `ax2 = ax1.twinx()\\n`;\n        code += `ax2.plot(df.index, df['${secondary_column}'], 'r-')\\n`;\n        code += `ax2.set_ylabel('${secondary_column}', color='r')\\n`;\n        code += `plt.title('${recommendation.title}')\\n`;\n      }\n      break;\n  }\n  \n  code += \"result = plt.gcf()\";\n  return code;\n}\n\n// Enhanced automatic chart generation as fallback\nfunction generateEnhancedAutoCharts(schema: ColumnSchema[], data: any[], analysis: any): any[] {\n  const charts = [];\n  const numericCols = schema.filter(col => col.type === 'number');\n  const categoricalCols = schema.filter(col => col.type === 'string');\n  const dateCols = schema.filter(col => col.type === 'date');\n  \n  console.log(\"\uD83C\uDFA8 Generating intelligent automatic charts...\", { \n    numericCols: numericCols.length, \n    categoricalCols: categoricalCols.length, \n    dateCols: dateCols.length \n  });\n\n  // Adaptive chart generation based on data characteristics\n  \n  // 1. Time Series Analysis (highest priority if dates exist)\n  if (dateCols.length > 0 && numericCols.length > 0 && data.length > 1) {\n    try {\n      const keyNumericCol = findKeyMetric(numericCols, data) || numericCols[0];\n      const chart = generateTimeSeriesChart(dateCols[0], keyNumericCol, data);\n      if (chart) charts.push(chart);\n    } catch (error) {\n      console.warn('Failed to generate time series chart:', error);\n    }\n  }\n  \n  // 2. Category Performance Analysis (if categories exist)\n  if (categoricalCols.length > 0 && numericCols.length > 0 && data.length > 1) {\n    try {\n      const balancedCategory = findBalancedCategory(categoricalCols, data);\n      const keyMetric = findKeyMetric(numericCols, data);\n      \n      if (balancedCategory && keyMetric) {\n        const chart = generateKPIChart(keyMetric, balancedCategory, data);\n        if (chart) charts.push(chart);\n      } else if (categoricalCols.length > 0 && numericCols.length > 0) {\n        // Fallback to first available combination\n        const chart = generateKPIChart(numericCols[0], categoricalCols[0], data);\n        if (chart) charts.push(chart);\n      }\n    } catch (error) {\n      console.warn('Failed to generate KPI chart:', error);\n    }\n  }\n  \n  // 3. Distribution Analysis for variable data\n  if (numericCols.length > 0 && data.length > 5) {\n    try {\n      const variableCol = findMostVariableColumn(numericCols, data);\n      if (variableCol) {\n        const chart = generateDistributionChart(variableCol, data);\n        if (chart) charts.push(chart);\n      }\n    } catch (error) {\n      console.warn('Failed to generate distribution chart:', error);\n    }\n  }\n  \n  // 4. Correlation Analysis (only if multiple numeric columns)\n  if (numericCols.length >= 2 && data.length > 5) {\n    try {\n      const strongCorrelation = findStrongestCorrelation(numericCols, data);\n      if (strongCorrelation) {\n        const chart = generateCorrelationChart(strongCorrelation.col1, strongCorrelation.col2, data);\n        if (chart) charts.push(chart);\n      } else {\n        // Generate scatter plot for top 2 numeric columns if no strong correlation\n        const chart = generateCorrelationChart(numericCols[0], numericCols[1], data);\n        if (chart) charts.push(chart);\n      }\n    } catch (error) {\n      console.warn('Failed to generate correlation chart:', error);\n    }\n  }\n  \n  // 5. Category Composition (if balanced categories)\n  if (categoricalCols.length > 0 && data.length > 2) {\n    try {\n      const categoryCol = findBalancedCategory(categoricalCols, data);\n      if (categoryCol) {\n        const chart = generateCategoryChart(categoryCol, data);\n        if (chart) charts.push(chart);\n      }\n    } catch (error) {\n      console.warn('Failed to generate category chart:', error);\n    }\n  }\n  \n  // 6. Multi-dimensional analysis (if rich dataset)\n  if (numericCols.length >= 3 && categoricalCols.length >= 1 && data.length > 5) {\n    try {\n      // Create a comparison chart with multiple metrics\n      const topMetrics = numericCols.slice(0, 2);\n      const categoryCol = categoricalCols[0];\n      const chart = generateMultiMetricChart(topMetrics, categoryCol, data);\n      if (chart) charts.push(chart);\n    } catch (error) {\n      console.warn('Failed to generate multi-metric chart:', error);\n    }\n  }\n\n  const validCharts = charts.filter(chart => chart !== null);\n  console.log(`\u2705 Generated ${validCharts.length} intelligent automatic charts`);\n  \n  return validCharts;\n}\n\n// Helper functions for enhanced auto charts\nfunction findKeyMetric(numericCols: ColumnSchema[], data: any[]): ColumnSchema | null {\n  // Find column with highest business relevance (revenue, profit, sales, etc.)\n  const businessKeywords = ['revenue', 'profit', 'sales', 'income', 'amount', 'value', 'price'];\n  \n  for (const keyword of businessKeywords) {\n    const match = numericCols.find(col => \n      col.name.toLowerCase().includes(keyword)\n    );\n    if (match) return match;\n  }\n  \n  // Fallback to column with highest variation\n  return findMostVariableColumn(numericCols, data);\n}\n\nfunction findMostVariableColumn(numericCols: ColumnSchema[], data: any[]): ColumnSchema | null {\n  let maxVariation = 0;\n  let mostVariable = null;\n  \n  numericCols.forEach(col => {\n    const values = data.map(row => Number(row[col.name])).filter(v => !isNaN(v));\n    if (values.length > 0) {\n      const mean = values.reduce((a, b) => a + b, 0) / values.length;\n      const variance = values.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / values.length;\n      const cv = Math.sqrt(variance) / mean; // Coefficient of variation\n      \n      if (cv > maxVariation) {\n        maxVariation = cv;\n        mostVariable = col;\n      }\n    }\n  });\n  \n  return mostVariable;\n}\n\nfunction findStrongestCorrelation(numericCols: ColumnSchema[], data: any[]): { col1: ColumnSchema, col2: ColumnSchema, correlation: number } | null {\n  let strongest = null;\n  let maxCorrelation = 0;\n  \n  for (let i = 0; i < numericCols.length; i++) {\n    for (let j = i + 1; j < numericCols.length; j++) {\n      const col1 = numericCols[i];\n      const col2 = numericCols[j];\n      \n      const values1 = data.map(row => Number(row[col1.name])).filter(v => !isNaN(v));\n      const values2 = data.map(row => Number(row[col2.name])).filter(v => !isNaN(v));\n      \n      if (values1.length === values2.length && values1.length > 5) {\n        const correlation = Math.abs(calculateCorrelation(values1, values2));\n        if (correlation > maxCorrelation && correlation > 0.5) {\n          maxCorrelation = correlation;\n          strongest = { col1, col2, correlation };\n        }\n      }\n    }\n  }\n  \n  return strongest;\n}\n\nfunction findBalancedCategory(categoricalCols: ColumnSchema[], data: any[]): ColumnSchema | null {\n  for (const col of categoricalCols) {\n    const counts = data.reduce((acc, row) => {\n      const value = row[col.name];\n      acc[value] = (acc[value] || 0) + 1;\n      return acc;\n    }, {});\n    \n    const uniqueCount = Object.keys(counts).length;\n    if (uniqueCount >= 3 && uniqueCount <= 10) {\n      return col;\n    }\n  }\n  return categoricalCols[0] || null;\n}\n\n// Chart generation functions\nfunction generateKPIChart(numericCol: ColumnSchema, categoryCol: ColumnSchema, data: any[]): any | null {\n  if (!data || data.length === 0 || !numericCol || !categoryCol) {\n    return null;\n  }\n  const groups = data.reduce((acc, row) => {\n    const key = row[categoryCol.name];\n    const value = Number(row[numericCol.name]);\n    if (key && !isNaN(value)) {\n      if (!acc[key]) acc[key] = [];\n      acc[key].push(value);\n    }\n    return acc;\n  }, {});\n  \n  if (Object.keys(groups).length === 0) {\n    return null;\n  }\n  \n  const chartData = Object.entries(groups)\n    .map(([key, values]: [string, number[]]) => ({\n      category: key,\n      value: values.reduce((a, b) => a + b, 0) / values.length\n    }))\n    .sort((a, b) => b.value - a.value)\n    .slice(0, 10);\n  \n  // Return consistent format for auto charts\n  return {\n    title: `${numericCol.name} Performance by ${categoryCol.name}`,\n    description: `Shows performance distribution across different ${categoryCol.name} categories`,\n    chartSpec: {\n      data: [{\n        x: chartData.map(d => d.category),\n        y: chartData.map(d => d.value),\n        type: 'bar',\n        marker: {\n          color: '#667eea',\n          line: { color: '#2d3748', width: 1 }\n        }\n      }],\n      layout: {\n        title: `${numericCol.name} Performance by ${categoryCol.name}`,\n        xaxis: { title: categoryCol.name },\n        yaxis: { title: `Average ${numericCol.name}` },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    },\n    priority: 1\n  };\n}\n\nfunction generateDistributionChart(numericCol: ColumnSchema, data: any[]): any | null {\n  if (!data || data.length === 0 || !numericCol) {\n    return null;\n  }\n  const values = data.map(row => Number(row[numericCol.name])).filter(v => !isNaN(v));\n  \n  return {\n    title: `${numericCol.name} Distribution Analysis`,\n    description: `Reveals the distribution pattern and potential outliers in ${numericCol.name}`,\n    chartSpec: {\n      data: [{\n        x: values,\n        type: 'histogram',\n        nbinsx: Math.min(20, Math.max(8, Math.floor(Math.sqrt(values.length)))),\n        marker: {\n          color: '#764ba2',\n          opacity: 0.7,\n          line: { color: '#2d3748', width: 1 }\n        }\n      }],\n      layout: {\n        title: `${numericCol.name} Distribution Analysis`,\n        xaxis: { title: numericCol.name },\n        yaxis: { title: 'Frequency' },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    },\n    priority: 2\n  };\n}\n\nfunction generateCorrelationChart(col1: ColumnSchema, col2: ColumnSchema, data: any[]): any | null {\n  if (!data || data.length === 0 || !col1 || !col2) {\n    return null;\n  }\n  const points = data\n    .map(row => ({\n      x: Number(row[col1.name]),\n      y: Number(row[col2.name])\n    }))\n    .filter(point => !isNaN(point.x) && !isNaN(point.y));\n  \n  return {\n    title: `${col1.name} vs ${col2.name} Relationship`,\n    description: `Shows the relationship strength between ${col1.name} and ${col2.name}`,\n    chartSpec: {\n      data: [{\n        x: points.map(p => p.x),\n        y: points.map(p => p.y),\n        type: 'scatter',\n        mode: 'markers',\n        marker: {\n          color: '#f093fb',\n          size: 8,\n          opacity: 0.7,\n          line: { color: '#2d3748', width: 1 }\n        }\n      }],\n      layout: {\n        title: `${col1.name} vs ${col2.name} Relationship`,\n        xaxis: { title: col1.name },\n        yaxis: { title: col2.name },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    },\n    priority: 3\n  };\n}\n\nfunction generateTimeSeriesChart(dateCol: ColumnSchema, numericCol: ColumnSchema, data: any[]): any | null {\n  if (!data || data.length === 0 || !dateCol || !numericCol) {\n    return null;\n  }\n  const timeData = data\n    .filter(row => row[dateCol.name] && !isNaN(Number(row[numericCol.name])))\n    .sort((a, b) => new Date(a[dateCol.name]).getTime() - new Date(b[dateCol.name]).getTime());\n  \n  return {\n    title: `${numericCol.name} Trends Over Time`,\n    description: `Reveals temporal patterns and trends in ${numericCol.name}`,\n    chartSpec: {\n      data: [{\n        x: timeData.map(row => row[dateCol.name]),\n        y: timeData.map(row => Number(row[numericCol.name])),\n        type: 'scatter',\n        mode: 'lines+markers',\n        line: { color: '#4facfe', width: 3 },\n        marker: { color: '#00f2fe', size: 6 }\n      }],\n      layout: {\n        title: `${numericCol.name} Trends Over Time`,\n        xaxis: { title: dateCol.name },\n        yaxis: { title: numericCol.name },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    },\n    priority: 1\n  };\n}\n\nfunction generateCategoryChart(categoryCol: ColumnSchema, data: any[]): any | null {\n  if (!data || data.length === 0 || !categoryCol) {\n    return null;\n  }\n  const counts = data.reduce((acc, row) => {\n    const value = row[categoryCol.name];\n    acc[value] = (acc[value] || 0) + 1;\n    return acc;\n  }, {});\n  \n  const sortedCounts = Object.entries(counts)\n    .sort(([,a], [,b]) => (b as number) - (a as number))\n    .slice(0, 8);\n  \n  return {\n    title: `${categoryCol.name} Distribution`,\n    description: `Shows the composition and distribution of ${categoryCol.name} categories`,\n    chartSpec: {\n      data: [{\n        labels: sortedCounts.map(([label]) => label),\n        values: sortedCounts.map(([,value]) => value),\n        type: 'pie',\n        marker: {\n          colors: ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe', '#43e97b', '#38f9d7'],\n          line: { color: '#ffffff', width: 2 }\n        },\n        textinfo: 'label+percent',\n        textposition: 'auto'\n      }],\n      layout: {\n        title: `${categoryCol.name} Distribution`,\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 60 }\n      }\n    },\n    priority: 4\n  };\n}\n\nfunction generateMultiMetricChart(topMetrics: ColumnSchema[], categoryCol: ColumnSchema, data: any[]): any | null {\n  if (!data || data.length === 0 || !topMetrics || topMetrics.length < 2 || !categoryCol) {\n    return null;\n  }\n  const groups = data.reduce((acc, row) => {\n    const key = row[categoryCol.name];\n    if (!acc[key]) acc[key] = [];\n    acc[key].push(Number(row[topMetrics[0].name]));\n    acc[key].push(Number(row[topMetrics[1].name]));\n    return acc;\n  }, {});\n  \n  const chartData = Object.entries(groups)\n    .map(([key, values]: [string, number[]]) => ({\n      category: key,\n      value: values.reduce((a, b) => a + b, 0) / values.length\n    }))\n    .sort((a, b) => b.value - a.value)\n    .slice(0, 10);\n  \n  return {\n    title: `${topMetrics.map(col => col.name).join(' & ')} Performance by ${categoryCol.name}`,\n    description: `Multi-metric performance analysis across different ${categoryCol.name} categories`,\n    chartSpec: {\n      data: [{\n        x: chartData.map(d => d.category),\n        y: chartData.map(d => d.value),\n        type: 'bar',\n        marker: {\n          color: '#667eea',\n          line: { color: '#2d3748', width: 1 }\n        }\n      }],\n      layout: {\n        title: `${topMetrics.map(col => col.name).join(' & ')} Performance by ${categoryCol.name}`,\n        xaxis: { title: categoryCol.name },\n        yaxis: { title: 'Average Performance' },\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        margin: { t: 60, b: 60, l: 60, r: 40 }\n      }\n    },\n    priority: 5\n  };\n}", "import { Env } from './types';\nimport { uploadCsvHandler, queryHandler } from './handlers';\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: any): Promise<Response> {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type',\n        },\n      });\n    }\n\n    if (path === '/upload' && request.method === 'POST') {\n      return uploadCsvHandler(request, env);\n    }\n\n    if (path === '/query' && request.method === 'POST') {\n      return queryHandler(request, env);\n    }\n\n    if (path === '/' && request.method === 'GET') {\n      return new Response(getIndexHtml(), {\n        headers: { 'Content-Type': 'text/html' }\n      });\n    }\n\n    return new Response('Not Found', { status: 404 });\n  },\n};\n\nfunction getIndexHtml(): string {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Business Analysis HR Agent - Professional Data Analytics Platform</title>\n    <script src=\"https://cdn.plot.ly/plotly-2.32.0.min.js\"></script>\n    <script src=\"https://unpkg.com/lucide@latest/dist/umd/lucide.js\"></script>\n    <style>\n        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n        \n        * { \n            margin: 0; \n            padding: 0; \n            box-sizing: border-box; \n        }\n        \n        :root {\n            /* Primary brand colors - refined blue palette */\n            --primary-50: #f0f9ff;\n            --primary-100: #e0f2fe;\n            --primary-200: #bae6fd;\n            --primary-300: #7dd3fc;\n            --primary-400: #38bdf8;\n            --primary-500: #0ea5e9;\n            --primary-600: #0284c7;\n            --primary-700: #0369a1;\n            --primary-800: #075985;\n            --primary-900: #0c4a6e;\n            \n            /* Neutral colors - warmer grays */\n            --gray-25: #fefefe;\n            --gray-50: #fafbfc;\n            --gray-100: #f4f6f8;\n            --gray-200: #e6eaee;\n            --gray-300: #d0d7de;\n            --gray-400: #9ca3af;\n            --gray-500: #6b7280;\n            --gray-600: #4b5563;\n            --gray-700: #374151;\n            --gray-800: #1f2937;\n            --gray-900: #111827;\n            \n            /* Status colors */\n            --success-50: #f0fdf4;\n            --success-100: #dcfce7;\n            --success-200: #bbf7d0;\n            --success-500: #22c55e;\n            --success-600: #16a34a;\n            --success-700: #15803d;\n            \n            --error-50: #fef2f2;\n            --error-100: #fee2e2;\n            --error-200: #fecaca;\n            --error-500: #ef4444;\n            --error-600: #dc2626;\n            --error-700: #b91c1c;\n            \n            --warning-50: #fffbeb;\n            --warning-100: #fef3c7;\n            --warning-200: #fed7aa;\n            --warning-500: #f59e0b;\n            --warning-600: #d97706;\n            --warning-700: #b45309;\n            \n            /* Enhanced shadows */\n            --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.02);\n            --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.08), 0 1px 2px -1px rgba(0, 0, 0, 0.04);\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.08), 0 2px 4px -2px rgba(0, 0, 0, 0.04);\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -4px rgba(0, 0, 0, 0.04);\n            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.08), 0 8px 10px -6px rgba(0, 0, 0, 0.04);\n            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.12);\n            \n            /* Border radius scale */\n            --radius-xs: 0.25rem;\n            --radius-sm: 0.375rem;\n            --radius-md: 0.5rem;\n            --radius-lg: 0.75rem;\n            --radius-xl: 1rem;\n            --radius-2xl: 1.5rem;\n            \n            /* Spacing scale */\n            --space-1: 0.25rem;\n            --space-2: 0.5rem;\n            --space-3: 0.75rem;\n            --space-4: 1rem;\n            --space-5: 1.25rem;\n            --space-6: 1.5rem;\n            --space-8: 2rem;\n            --space-10: 2.5rem;\n            --space-12: 3rem;\n            --space-16: 4rem;\n            \n            /* Typography */\n            --font-size-xs: 0.75rem;\n            --font-size-sm: 0.875rem;\n            --font-size-base: 1rem;\n            --font-size-lg: 1.125rem;\n            --font-size-xl: 1.25rem;\n            --font-size-2xl: 1.5rem;\n            --font-size-3xl: 1.875rem;\n            \n            /* Line heights */\n            --leading-none: 1;\n            --leading-tight: 1.25;\n            --leading-snug: 1.375;\n            --leading-normal: 1.5;\n            --leading-relaxed: 1.625;\n            --leading-loose: 2;\n        }\n        \n        /* Base styles */\n        body { \n            font-family: 'Inter', system-ui, -apple-system, sans-serif; \n            background: linear-gradient(135deg, var(--gray-25) 0%, var(--gray-50) 100%);\n            color: var(--gray-900);\n            line-height: var(--leading-normal);\n            min-height: 100vh;\n            font-feature-settings: 'cv11', 'ss01';\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n        }\n        \n        /* Header styles */\n        .header {\n            background: rgba(255, 255, 255, 0.95);\n            backdrop-filter: blur(20px) saturate(180%);\n            border-bottom: 1px solid var(--gray-200);\n            padding: var(--space-6) 0;\n            position: sticky;\n            top: 0;\n            z-index: 50;\n            box-shadow: var(--shadow-sm);\n        }\n        \n        .header-content {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 0 var(--space-8);\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n        \n        .logo {\n            display: flex;\n            align-items: center;\n            gap: var(--space-4);\n        }\n        \n        .logo-icon {\n            width: 2.75rem;\n            height: 2.75rem;\n            background: linear-gradient(135deg, var(--primary-500) 0%, var(--primary-600) 100%);\n            border-radius: var(--radius-lg);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            box-shadow: var(--shadow-md);\n            position: relative;\n        }\n        \n        .logo-icon::before {\n            content: '';\n            position: absolute;\n            inset: 0;\n            background: linear-gradient(135deg, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0.05) 100%);\n            border-radius: var(--radius-lg);\n            pointer-events: none;\n        }\n        \n        .logo h1 {\n            font-size: var(--font-size-2xl);\n            font-weight: 700;\n            color: var(--gray-900);\n            letter-spacing: -0.025em;\n        }\n        \n        .subtitle {\n            font-size: var(--font-size-sm);\n            color: var(--gray-600);\n            margin-top: var(--space-1);\n            font-weight: 500;\n        }\n        \n        /* Main layout */\n        .main-container {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: var(--space-8);\n        }\n        \n        .grid-layout {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: var(--space-8);\n            margin-bottom: var(--space-8);\n        }\n        \n        .full-width {\n            grid-column: 1 / -1;\n        }\n        \n        /* Enhanced card styles */\n        .card { \n            background: rgba(255, 255, 255, 0.8);\n            backdrop-filter: blur(20px) saturate(180%);\n            border: 1px solid var(--gray-200);\n            border-radius: var(--radius-2xl);\n            padding: var(--space-8);\n            box-shadow: var(--shadow-sm);\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .card::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            height: 1px;\n            background: linear-gradient(90deg, transparent 0%, var(--primary-200) 50%, transparent 100%);\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n        \n        .card:hover {\n            box-shadow: var(--shadow-lg);\n            border-color: var(--gray-300);\n            transform: translateY(-2px);\n        }\n        \n        .card:hover::before {\n            opacity: 1;\n        }\n        \n        .card-header {\n            display: flex;\n            align-items: center;\n            gap: var(--space-3);\n            margin-bottom: var(--space-6);\n        }\n        \n        .card-icon {\n            width: 1.5rem;\n            height: 1.5rem;\n            color: var(--primary-600);\n            transition: color 0.2s ease;\n        }\n        \n        .card:hover .card-icon {\n            color: var(--primary-700);\n        }\n        \n        .card-title {\n            font-size: var(--font-size-xl);\n            font-weight: 600;\n            color: var(--gray-900);\n            letter-spacing: -0.025em;\n        }\n        \n        /* Enhanced file upload area */\n        .file-upload-area {\n            border: 2px dashed var(--gray-300);\n            border-radius: var(--radius-xl);\n            padding: var(--space-10);\n            text-align: center;\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            cursor: pointer;\n            background: linear-gradient(135deg, var(--gray-50) 0%, var(--gray-25) 100%);\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .file-upload-area::before {\n            content: '';\n            position: absolute;\n            inset: 0;\n            background: linear-gradient(135deg, var(--primary-50) 0%, var(--primary-25) 100%);\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n        \n        .file-upload-area:hover {\n            border-color: var(--primary-400);\n            transform: translateY(-1px);\n        }\n        \n        .file-upload-area:hover::before {\n            opacity: 1;\n        }\n        \n        .file-upload-area.dragover {\n            border-color: var(--primary-500);\n            background: var(--primary-50);\n            transform: scale(1.02);\n            box-shadow: var(--shadow-lg);\n        }\n        \n        .file-upload-area.has-file {\n            border-color: var(--success-500);\n            background: linear-gradient(135deg, var(--success-50) 0%, var(--success-25) 100%);\n        }\n        \n        .upload-icon {\n            width: 4rem;\n            height: 4rem;\n            color: var(--gray-400);\n            margin: 0 auto var(--space-4);\n            transition: all 0.3s ease;\n        }\n        \n        .file-upload-area:hover .upload-icon {\n            color: var(--primary-500);\n            transform: scale(1.1);\n        }\n        \n        .upload-text {\n            font-weight: 600;\n            color: var(--gray-700);\n            margin-bottom: var(--space-2);\n            font-size: var(--font-size-lg);\n        }\n        \n        .upload-subtext {\n            font-size: var(--font-size-sm);\n            color: var(--gray-500);\n        }\n        \n        /* File selected state */\n        .file-selected {\n            margin-top: var(--space-4);\n            padding: var(--space-4);\n            background: linear-gradient(135deg, var(--primary-50) 0%, var(--primary-25) 100%);\n            border: 1px solid var(--primary-200);\n            border-radius: var(--radius-lg);\n            color: var(--primary-700);\n            font-size: var(--font-size-sm);\n            font-weight: 500;\n            display: flex;\n            align-items: center;\n            gap: var(--space-3);\n            animation: slideInUp 0.3s ease-out;\n        }\n        \n        /* Progress styles */\n        .upload-progress {\n            margin-top: var(--space-4);\n            padding: var(--space-5);\n            background: linear-gradient(135deg, var(--primary-50) 0%, var(--primary-25) 100%);\n            border: 1px solid var(--primary-200);\n            border-radius: var(--radius-lg);\n            display: none;\n            animation: slideInUp 0.3s ease-out;\n        }\n        \n        .upload-progress.show {\n            display: block;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 8px;\n            background: var(--gray-200);\n            border-radius: 4px;\n            overflow: hidden;\n            margin-top: var(--space-3);\n            position: relative;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(90deg, var(--primary-500) 0%, var(--primary-600) 100%);\n            border-radius: 4px;\n            transition: width 0.3s ease;\n            animation: shimmer 2s infinite;\n        }\n        \n        /* Enhanced input styles */\n        .file-input {\n            display: none;\n        }\n        \n        .prompt-input {\n            width: 100%;\n            min-height: 140px;\n            padding: var(--space-5);\n            border: 1.5px solid var(--gray-300);\n            border-radius: var(--radius-xl);\n            font-family: inherit;\n            font-size: var(--font-size-sm);\n            resize: vertical;\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            background: rgba(255, 255, 255, 0.8);\n            backdrop-filter: blur(10px);\n            line-height: var(--leading-relaxed);\n        }\n        \n        .prompt-input:focus {\n            outline: none;\n            border-color: var(--primary-500);\n            box-shadow: 0 0 0 4px var(--primary-100);\n            transform: translateY(-1px);\n        }\n        \n        .prompt-input::placeholder {\n            color: var(--gray-400);\n            line-height: var(--leading-relaxed);\n        }\n        \n        /* Enhanced button styles */\n        .btn {\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            gap: var(--space-2);\n            padding: var(--space-4) var(--space-6);\n            border: none;\n            border-radius: var(--radius-lg);\n            font-family: inherit;\n            font-size: var(--font-size-sm);\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n            text-decoration: none;\n            position: relative;\n            overflow: hidden;\n            letter-spacing: 0.025em;\n        }\n        \n        .btn::before {\n            content: '';\n            position: absolute;\n            inset: 0;\n            background: linear-gradient(135deg, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0.05) 100%);\n            opacity: 0;\n            transition: opacity 0.2s ease;\n        }\n        \n        .btn:hover::before {\n            opacity: 1;\n        }\n        \n        .btn-primary {\n            background: linear-gradient(135deg, var(--primary-500) 0%, var(--primary-600) 100%);\n            color: white;\n            box-shadow: var(--shadow-md);\n        }\n        \n        .btn-primary:hover {\n            background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-700) 100%);\n            box-shadow: var(--shadow-lg);\n            transform: translateY(-2px);\n        }\n        \n        .btn-primary:active {\n            transform: translateY(0);\n            box-shadow: var(--shadow-sm);\n        }\n        \n        .btn-primary:disabled {\n            background: var(--gray-300);\n            color: var(--gray-500);\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n        }\n        \n        .btn-primary:disabled:hover {\n            background: var(--gray-300);\n            transform: none;\n            box-shadow: none;\n        }\n        \n        .btn-primary:disabled::before {\n            opacity: 0;\n        }\n        \n        .btn-secondary {\n            background: rgba(255, 255, 255, 0.8);\n            color: var(--gray-700);\n            border: 1.5px solid var(--gray-300);\n            backdrop-filter: blur(10px);\n        }\n        \n        .btn-secondary:hover {\n            background: var(--gray-50);\n            border-color: var(--gray-400);\n            transform: translateY(-1px);\n        }\n        \n        .btn-icon {\n            width: 1.125rem;\n            height: 1.125rem;\n        }\n        \n        /* Enhanced status messages */\n        .status {\n            padding: var(--space-5);\n            border-radius: var(--radius-lg);\n            margin: var(--space-4) 0;\n            display: flex;\n            align-items: center;\n            gap: var(--space-3);\n            font-size: var(--font-size-sm);\n            font-weight: 500;\n            animation: slideInUp 0.3s ease-out;\n            backdrop-filter: blur(20px);\n        }\n        \n        .status.success {\n            background: linear-gradient(135deg, var(--success-50) 0%, rgba(255,255,255,0.8) 100%);\n            color: var(--success-700);\n            border: 1px solid var(--success-200);\n        }\n        \n        .status.error {\n            background: linear-gradient(135deg, var(--error-50) 0%, rgba(255,255,255,0.8) 100%);\n            color: var(--error-700);\n            border: 1px solid var(--error-200);\n        }\n        \n        .status.info {\n            background: linear-gradient(135deg, var(--primary-50) 0%, rgba(255,255,255,0.8) 100%);\n            color: var(--primary-700);\n            border: 1px solid var(--primary-200);\n        }\n        \n        .status.warning {\n            background: linear-gradient(135deg, var(--warning-50) 0%, rgba(255,255,255,0.8) 100%);\n            color: var(--warning-700);\n            border: 1px solid var(--warning-200);\n        }\n        \n        /* Loading animations */\n        .loading-spinner {\n            width: 1.125rem;\n            height: 1.125rem;\n            border: 2px solid transparent;\n            border-top: 2px solid currentColor;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n        \n        /* Metrics grid */\n        .metrics-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n            gap: var(--space-4);\n            margin: var(--space-6) 0;\n        }\n        \n        .metric-card {\n            background: linear-gradient(135deg, var(--gray-50) 0%, rgba(255,255,255,0.8) 100%);\n            border: 1px solid var(--gray-200);\n            border-radius: var(--radius-lg);\n            padding: var(--space-5);\n            text-align: center;\n            transition: all 0.2s ease;\n            backdrop-filter: blur(10px);\n        }\n        \n        .metric-card:hover {\n            transform: translateY(-2px);\n            box-shadow: var(--shadow-md);\n        }\n        \n        .metric-value {\n            font-size: var(--font-size-2xl);\n            font-weight: 700;\n            color: var(--primary-600);\n            margin-bottom: var(--space-1);\n            line-height: var(--leading-tight);\n        }\n        \n        .metric-label {\n            font-size: var(--font-size-xs);\n            font-weight: 600;\n            color: var(--gray-600);\n            text-transform: uppercase;\n            letter-spacing: 0.1em;\n        }\n        \n        /* Insights list */\n        .insights-list {\n            list-style: none;\n            margin: var(--space-4) 0;\n        }\n        \n        .insights-list li {\n            background: linear-gradient(135deg, var(--gray-50) 0%, rgba(255,255,255,0.8) 100%);\n            border: 1px solid var(--gray-200);\n            border-radius: var(--radius-lg);\n            padding: var(--space-4) var(--space-5);\n            margin-bottom: var(--space-3);\n            font-size: var(--font-size-sm);\n            line-height: var(--leading-relaxed);\n            position: relative;\n            padding-left: var(--space-10);\n            transition: all 0.2s ease;\n            backdrop-filter: blur(10px);\n        }\n        \n        .insights-list li:hover {\n            transform: translateX(4px);\n            box-shadow: var(--shadow-sm);\n        }\n        \n        .insights-list li::before {\n            content: '';\n            position: absolute;\n            left: var(--space-4);\n            top: 1.125rem;\n            width: 0.375rem;\n            height: 0.375rem;\n            background: var(--primary-500);\n            border-radius: 50%;\n            box-shadow: 0 0 0 3px var(--primary-100);\n        }\n        \n        /* Charts grid */\n        .charts-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));\n            gap: var(--space-8);\n            margin-top: var(--space-8);\n        }\n        \n        .chart-container {\n            background: rgba(255, 255, 255, 0.9);\n            border: 1px solid var(--gray-200);\n            border-radius: var(--radius-2xl);\n            padding: var(--space-6);\n            box-shadow: var(--shadow-sm);\n            transition: all 0.3s ease;\n            backdrop-filter: blur(20px);\n        }\n        \n        .chart-container:hover {\n            box-shadow: var(--shadow-lg);\n            transform: translateY(-2px);\n        }\n        \n        .chart-title {\n            font-size: var(--font-size-lg);\n            font-weight: 600;\n            color: var(--gray-900);\n            margin-bottom: var(--space-2);\n            letter-spacing: -0.025em;\n        }\n        \n        .chart-description {\n            font-size: var(--font-size-sm);\n            color: var(--gray-600);\n            margin-bottom: var(--space-6);\n            line-height: var(--leading-relaxed);\n        }\n        \n        /* Suggestions grid */\n        .suggestions-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n            gap: var(--space-4);\n            margin-top: var(--space-6);\n        }\n        \n        .suggestion-card {\n            background: rgba(255, 255, 255, 0.8);\n            border: 1px solid var(--gray-200);\n            border-radius: var(--radius-xl);\n            padding: var(--space-5);\n            cursor: pointer;\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            backdrop-filter: blur(10px);\n            position: relative;\n            overflow: hidden;\n        }\n        \n        .suggestion-card::before {\n            content: '';\n            position: absolute;\n            inset: 0;\n            background: linear-gradient(135deg, var(--primary-50) 0%, transparent 100%);\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        }\n        \n        .suggestion-card:hover {\n            border-color: var(--primary-300);\n            box-shadow: var(--shadow-lg);\n            transform: translateY(-3px);\n        }\n        \n        .suggestion-card:hover::before {\n            opacity: 1;\n        }\n        \n        .suggestion-title {\n            font-weight: 600;\n            color: var(--gray-900);\n            margin-bottom: var(--space-2);\n            font-size: var(--font-size-sm);\n            position: relative;\n            z-index: 1;\n        }\n        \n        .suggestion-description {\n            font-size: var(--font-size-xs);\n            color: var(--gray-600);\n            line-height: var(--leading-relaxed);\n            margin-bottom: var(--space-3);\n            position: relative;\n            z-index: 1;\n        }\n        \n        .suggestion-category {\n            display: inline-block;\n            background: linear-gradient(135deg, var(--primary-100) 0%, var(--primary-50) 100%);\n            color: var(--primary-700);\n            padding: var(--space-1) var(--space-3);\n            border-radius: var(--radius-md);\n            font-size: var(--font-size-xs);\n            font-weight: 600;\n            text-transform: uppercase;\n            letter-spacing: 0.05em;\n            position: relative;\n            z-index: 1;\n        }\n        \n        /* Reasoning section */\n        .reasoning-section {\n            background: linear-gradient(135deg, var(--primary-50) 0%, rgba(255,255,255,0.8) 100%);\n            border: 1px solid var(--primary-200);\n            border-radius: var(--radius-xl);\n            padding: var(--space-6);\n            margin: var(--space-6) 0;\n            backdrop-filter: blur(20px);\n        }\n        \n        .reasoning-title {\n            font-weight: 600;\n            color: var(--primary-700);\n            margin-bottom: var(--space-4);\n            display: flex;\n            align-items: center;\n            gap: var(--space-2);\n            font-size: var(--font-size-lg);\n        }\n        \n        .reasoning-content {\n            font-size: var(--font-size-sm);\n            color: var(--gray-700);\n            line-height: var(--leading-relaxed);\n        }\n        \n        .section-title {\n            font-size: var(--font-size-xl);\n            font-weight: 600;\n            color: var(--gray-900);\n            margin-bottom: var(--space-4);\n            display: flex;\n            align-items: center;\n            gap: var(--space-3);\n            letter-spacing: -0.025em;\n        }\n        \n        /* Animations */\n        @keyframes spin {\n            to { transform: rotate(360deg); }\n        }\n        \n        @keyframes shimmer {\n            0% { background-position: -200px 0; }\n            100% { background-position: calc(200px + 100%) 0; }\n        }\n        \n        @keyframes slideInUp {\n            from { \n                opacity: 0; \n                transform: translateY(20px); \n            }\n            to { \n                opacity: 1; \n                transform: translateY(0); \n            }\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        \n        .fade-in {\n            animation: fadeIn 0.6s ease-out;\n        }\n        \n        /* Scrollbar */\n        ::-webkit-scrollbar {\n            width: 8px;\n        }\n        \n        ::-webkit-scrollbar-track {\n            background: var(--gray-100);\n            border-radius: 4px;\n        }\n        \n        ::-webkit-scrollbar-thumb {\n            background: linear-gradient(135deg, var(--gray-400) 0%, var(--gray-500) 100%);\n            border-radius: 4px;\n            transition: background 0.2s ease;\n        }\n        \n        ::-webkit-scrollbar-thumb:hover {\n            background: linear-gradient(135deg, var(--gray-500) 0%, var(--gray-600) 100%);\n        }\n        \n        /* Responsive Design */\n        @media (max-width: 1200px) {\n            .charts-grid {\n                grid-template-columns: 1fr;\n            }\n        }\n        \n        @media (max-width: 768px) {\n            .grid-layout {\n                grid-template-columns: 1fr;\n                gap: var(--space-6);\n            }\n            \n            .main-container {\n                padding: var(--space-4);\n            }\n            \n            .header-content {\n                padding: 0 var(--space-4);\n            }\n            \n            .card {\n                padding: var(--space-6);\n            }\n            \n            .charts-grid {\n                grid-template-columns: 1fr;\n                gap: var(--space-6);\n            }\n            \n            .suggestions-grid {\n                grid-template-columns: 1fr;\n            }\n            \n            .metrics-grid {\n                grid-template-columns: repeat(2, 1fr);\n            }\n            \n            .upload-icon {\n                width: 3rem;\n                height: 3rem;\n            }\n            \n            .file-upload-area {\n                padding: var(--space-8);\n            }\n            \n            .logo h1 {\n                font-size: var(--font-size-xl);\n            }\n        }\n        \n        @media (max-width: 480px) {\n            .main-container {\n                padding: var(--space-3);\n            }\n            \n            .header-content {\n                padding: 0 var(--space-3);\n            }\n            \n            .card {\n                padding: var(--space-4);\n                border-radius: var(--radius-xl);\n            }\n            \n            .metrics-grid {\n                grid-template-columns: 1fr;\n            }\n            \n            .logo h1 {\n                font-size: var(--font-size-lg);\n            }\n        }\n        \n        /* High contrast mode support */\n        @media (prefers-contrast: high) {\n            .card {\n                border-width: 2px;\n            }\n            \n            .btn {\n                border-width: 2px;\n            }\n        }\n        \n        /* Reduced motion support */\n        @media (prefers-reduced-motion: reduce) {\n            *, *::before, *::after {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <div class=\"header-content\">\n            <div class=\"logo\">\n                <div class=\"logo-icon\">\n                    <i data-lucide=\"bar-chart-3\"></i>\n                </div>\n                <div>\n                    <h1>Business Analysis HR Agent</h1>\n                    <p class=\"subtitle\">Professional Data Analytics Platform</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"main-container\">\n        <div class=\"grid-layout\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"upload\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Upload Dataset</h2>\n                </div>\n                <div class=\"file-upload-area\" id=\"uploadArea\" onclick=\"document.getElementById('csvFile').click()\">\n                    <i data-lucide=\"file-plus\" class=\"upload-icon\"></i>\n                    <div class=\"upload-text\">Click to upload or drag and drop</div>\n                    <div class=\"upload-subtext\">CSV files only \u2022 Max 10MB</div>\n                </div>\n                <div id=\"fileSelected\" class=\"file-selected\" style=\"display: none;\">\n                    <i data-lucide=\"file-check\"></i>\n                    <span id=\"fileName\"></span>\n                    <button onclick=\"clearFile()\" style=\"margin-left: auto; background: none; border: none; color: var(--gray-500); cursor: pointer; padding: var(--space-1); border-radius: var(--radius-sm); transition: all 0.2s ease;\">\n                        <i data-lucide=\"x\"></i>\n                    </button>\n                </div>\n                <div id=\"uploadProgress\" class=\"upload-progress\">\n                    <div style=\"display: flex; align-items: center; gap: var(--space-2); margin-bottom: var(--space-2);\">\n                        <div class=\"loading-spinner\"></div>\n                        <span>Uploading and analyzing your data...</span>\n                    </div>\n                    <div class=\"progress-bar\">\n                        <div class=\"progress-fill\" style=\"width: 100%;\"></div>\n                    </div>\n                </div>\n                <input type=\"file\" id=\"csvFile\" accept=\".csv\" class=\"file-input\">\n                <button id=\"uploadBtn\" onclick=\"uploadFile()\" class=\"btn btn-primary\" style=\"margin-top: var(--space-4); width: 100%;\" disabled>\n                    <i data-lucide=\"zap\" class=\"btn-icon\"></i>\n                    Analyze Dataset\n                </button>\n                <div id=\"uploadStatus\"></div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"message-circle\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Query Interface</h2>\n                </div>\n                <textarea id=\"promptInput\" class=\"prompt-input\" placeholder=\"Ask questions about your HR data...\n\nExamples:\n\u2022 Show employee satisfaction trends over time\n\u2022 Compare performance by department  \n\u2022 Display top 10 employees by performance rating\n\u2022 Analyze salary distribution by position level\n\u2022 Show hiring trends and retention rates\"></textarea>\n                <button onclick=\"generateChart()\" class=\"btn btn-primary\" style=\"margin-top: var(--space-4); width: 100%;\">\n                    <i data-lucide=\"sparkles\" class=\"btn-icon\"></i>\n                    Generate Visualization\n                </button>\n                <div id=\"queryStatus\"></div>\n            </div>\n        </div>\n\n        <div id=\"analysisResults\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"brain\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">AI Analysis Results</h2>\n                </div>\n                <div id=\"analysisContent\"></div>\n            </div>\n        </div>\n\n        <div id=\"autoChartsSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"bar-chart\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Automatic Dashboard</h2>\n                </div>\n                <p style=\"color: var(--gray-600); margin-bottom: var(--space-6); line-height: var(--leading-relaxed);\">AI-generated visualizations based on your data characteristics</p>\n                <div id=\"autoCharts\" class=\"charts-grid\"></div>\n            </div>\n        </div>\n\n        <div id=\"reasoningSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"lightbulb\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">AI Reasoning Process</h2>\n                </div>\n                <div id=\"reasoningContent\" class=\"reasoning-section\"></div>\n            </div>\n        </div>\n\n        <div id=\"chartSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"trending-up\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Custom Visualization</h2>\n                </div>\n                <div id=\"chartContainer\" class=\"chart-container\"></div>\n            </div>\n        </div>\n\n        <div id=\"suggestionsSection\" class=\"full-width\" style=\"display: none;\">\n            <div class=\"card fade-in\">\n                <div class=\"card-header\">\n                    <i data-lucide=\"compass\" class=\"card-icon\"></i>\n                    <h2 class=\"card-title\">Suggested Explorations</h2>\n                </div>\n                <p style=\"color: var(--gray-600); margin-bottom: var(--space-6); line-height: var(--leading-relaxed);\">AI-generated questions tailored to your specific dataset</p>\n                <div id=\"suggestions\" class=\"suggestions-grid\"></div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Initialize Lucide icons\n        lucide.createIcons();\n        \n        let currentDatasetId = null;\n        let currentAnalysis = null;\n        let queryHistory = [];\n        let chartHistory = [];\n\n        // Upload and analyze CSV file\n        async function uploadFile() {\n            const fileInput = document.getElementById('csvFile');\n            const statusDiv = document.getElementById('uploadStatus');\n            const uploadProgress = document.getElementById('uploadProgress');\n            const uploadBtn = document.getElementById('uploadBtn');\n\n            if (!fileInput.files || fileInput.files.length === 0) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"alert-circle\"></i>Please select a CSV file first.</div>';\n                lucide.createIcons();\n                return;\n            }\n\n            // Show upload progress\n            uploadProgress.classList.add('show');\n            uploadBtn.disabled = true;\n            uploadBtn.innerHTML = '<div class=\"loading-spinner\"></div>Processing...';\n            statusDiv.innerHTML = '';\n\n            const formData = new FormData();\n            formData.append('file', fileInput.files[0]);\n\n            try {\n                const response = await fetch('/upload', {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const result = await response.json();\n\n                // Hide upload progress\n                uploadProgress.classList.remove('show');\n\n                if (response.ok) {\n                    currentDatasetId = result.datasetId;\n                    currentAnalysis = result.analysis;\n                    \n                    // Show success with prominent styling\n                    statusDiv.innerHTML = '<div class=\"status success\" style=\"font-size: 1rem; padding: 1.5rem; margin: 1.5rem 0; background: var(--success-50); border: 2px solid var(--success-500);\"><i data-lucide=\"check-circle\"></i><strong>Success!</strong> Dataset uploaded and analyzed successfully! Scroll down to see your insights.</div>';\n                    lucide.createIcons();\n                    \n                    // Update button state\n                    uploadBtn.disabled = false;\n                    uploadBtn.innerHTML = '<i data-lucide=\"refresh-cw\" class=\"btn-icon\"></i>Upload New Dataset';\n                    \n                    // Show analysis results with animation\n                    setTimeout(() => {\n                        showAnalysisResults(result.analysis, result.schema, result.sampleRows);\n                        \n                        // Show auto-generated charts  \n                        if (result.analysis.autoCharts && result.analysis.autoCharts.length > 0) {\n                            setTimeout(() => showAutoCharts(result.analysis.autoCharts), 300);\n                        }\n                        \n                        // Show suggested prompts\n                        if (result.analysis.suggestedPrompts) {\n                            setTimeout(() => showSuggestedPrompts(result.analysis.suggestedPrompts), 600);\n                        }\n                        \n                        // Scroll to results\n                        setTimeout(() => {\n                            document.getElementById('analysisResults').scrollIntoView({ \n                                behavior: 'smooth', \n                                block: 'start' \n                            });\n                        }, 800);\n                    }, 500);\n                    \n                } else {\n                    statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i><strong>Upload Failed:</strong> ' + result.error + '</div>';\n                    lucide.createIcons();\n                    \n                    // Reset button\n                    uploadBtn.disabled = false;\n                    uploadBtn.innerHTML = '<i data-lucide=\"zap\" class=\"btn-icon\"></i>Analyze Dataset';\n                }\n            } catch (error) {\n                uploadProgress.classList.remove('show');\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i><strong>Network Error:</strong> ' + error.message + '</div>';\n                lucide.createIcons();\n                \n                // Reset button\n                uploadBtn.disabled = false;\n                uploadBtn.innerHTML = '<i data-lucide=\"zap\" class=\"btn-icon\"></i>Analyze Dataset';\n            }\n        }\n        \n        // Handle file selection\n        function handleFileSelect() {\n            const fileInput = document.getElementById('csvFile');\n            const uploadArea = document.getElementById('uploadArea');\n            const fileSelected = document.getElementById('fileSelected');\n            const fileName = document.getElementById('fileName');\n            const uploadBtn = document.getElementById('uploadBtn');\n            \n            if (fileInput.files && fileInput.files.length > 0) {\n                const file = fileInput.files[0];\n                uploadArea.classList.add('has-file');\n                fileSelected.style.display = 'flex';\n                fileName.textContent = file.name + ' (' + (file.size / 1024 / 1024).toFixed(2) + ' MB)';\n                uploadBtn.disabled = false;\n                lucide.createIcons();\n            }\n        }\n        \n        // Enhanced dataset clearing with complete state reset\n        function clearFile() {\n            const fileInput = document.getElementById('csvFile');\n            const uploadArea = document.getElementById('uploadArea');\n            const fileSelected = document.getElementById('fileSelected');\n            const uploadBtn = document.getElementById('uploadBtn');\n            const statusDiv = document.getElementById('uploadStatus');\n            const queryStatus = document.getElementById('queryStatus');\n            const promptInput = document.getElementById('promptInput');\n            \n            // Show confirmation dialog for better UX\n            if (currentDatasetId && (queryHistory.length > 0 || chartHistory.length > 0)) {\n                if (!confirm('This will clear all your current analysis and charts. Are you sure you want to continue?')) {\n                    return;\n                }\n            }\n            \n            // Reset file input and UI\n            fileInput.value = '';\n            uploadArea.classList.remove('has-file');\n            fileSelected.style.display = 'none';\n            uploadBtn.disabled = true;\n            uploadBtn.innerHTML = '<i data-lucide=\"zap\" class=\"btn-icon\"></i>Analyze Dataset';\n            statusDiv.innerHTML = '';\n            queryStatus.innerHTML = '';\n            promptInput.value = '';\n            promptInput.placeholder = \"Ask questions about your data...\\n\\nExamples:\\n\u2022 Show trends over time\\n\u2022 Compare performance by category\\n\u2022 Display top 10 items by value\\n\u2022 Analyze distribution by key metrics\\n\u2022 Show correlations between variables\";\n            \n            // Clear global state completely\n            currentDatasetId = null;\n            currentAnalysis = null;\n            queryHistory = [];\n            chartHistory = [];\n            \n            // Hide all results sections with fade out animation\n            const sectionsToHide = [\n                'analysisResults', 'autoChartsSection', 'suggestionsSection', \n                'reasoningSection', 'chartSection', 'queryHistorySection'\n            ];\n            \n            sectionsToHide.forEach(sectionId => {\n                const section = document.getElementById(sectionId);\n                if (section) {\n                    section.style.opacity = '0';\n                    section.style.transform = 'translateY(-10px)';\n                    setTimeout(() => {\n                        section.style.display = 'none';\n                        section.style.opacity = '';\n                        section.style.transform = '';\n                    }, 300);\n                }\n            });\n            \n            // Remove all dynamically created sections\n            const dynamicSections = document.querySelectorAll('[id$=\"Section\"]:not([id^=\"auto\"]):not([id^=\"suggestions\"]):not([id^=\"analysis\"]):not([id^=\"reasoning\"]):not([id^=\"chart\"])');\n            dynamicSections.forEach(section => {\n                if (section.id.includes('code') || section.id.includes('query') || section.id.includes('result')) {\n                    section.remove();\n                }\n            });\n            \n            // Remove dynamically created code section if exists\n            const codeSection = document.getElementById('codeSection');\n            if (codeSection) {\n                codeSection.remove();\n            }\n            \n            // Clear any stored chart containers\n            const chartContainers = document.querySelectorAll('[id*=\"Chart\"], [id*=\"chart\"]');\n            chartContainers.forEach(container => {\n                if (container.id !== 'chartSection' && container.id !== 'chartContainer') {\n                    container.innerHTML = '';\n                }\n            });\n            \n            // Reset scroll position\n            setTimeout(() => {\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            }, 400);\n            \n            // Show success message\n            statusDiv.innerHTML = '<div class=\"status success\" style=\"opacity: 0; animation: fadeIn 0.5s ease-out forwards;\"><i data-lucide=\"check-circle\"></i>Dataset cleared successfully. Upload a new file to begin analysis.</div>';\n            \n            setTimeout(() => {\n                statusDiv.innerHTML = '';\n            }, 3000);\n            \n            lucide.createIcons();\n        }\n\n        // Generate custom chart from user query\n        async function generateChart() {\n            const promptInput = document.getElementById('promptInput');\n            const statusDiv = document.getElementById('queryStatus');\n\n            if (!currentDatasetId) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"alert-circle\"></i>Please upload a CSV file first.</div>';\n                lucide.createIcons();\n                return;\n            }\n\n            if (!promptInput.value.trim()) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"alert-circle\"></i>Please enter a question about your data.</div>';\n                lucide.createIcons();\n                return;\n            }\n\n            statusDiv.innerHTML = '<div class=\"status info\"><div class=\"loading-spinner\"></div>AI is analyzing your request...</div>';\n\n            try {\n                const response = await fetch('/query', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        datasetId: currentDatasetId,\n                        prompt: promptInput.value\n                    })\n                });\n\n                const result = await response.json();\n\n                if (response.ok) {\n                    statusDiv.innerHTML = '<div class=\"status success\"><i data-lucide=\"check-circle\"></i>AI analysis complete! Results generated successfully!</div>';\n                    lucide.createIcons();\n                    \n                    // Store query in history for better UX\n                    const queryData = {\n                        query: promptInput.value,\n                        timestamp: new Date().toISOString(),\n                        result: result\n                    };\n                    queryHistory.push(queryData);\n                    \n                    // Handle NVIDIA agent workflow results\n                    if (result.thinking || result.explanation) {\n                        showNvidiaReasoning(result.thinking, result.explanation);\n                    } else if (result.reasoning) {\n                        // Fallback to traditional reasoning display\n                        showReasoning(result.reasoning);\n                    }\n                    \n                    // Show code if available\n                    if (result.code) {\n                        showGeneratedCode(result.code, result.shouldPlot);\n                    }\n                    \n                    // Show execution result or chart\n                    if (result.result) {\n                        showExecutionResult(result.result);\n                        if (result.result.type === 'plot') {\n                            chartHistory.push({\n                                title: result.result.description || 'Custom Chart',\n                                query: promptInput.value,\n                                timestamp: new Date().toISOString(),\n                                chartSpec: result.result.chartSpec\n                            });\n                        }\n                    } else if (result.chartSpec) {\n                        showChart(result.chartSpec);\n                        chartHistory.push({\n                            title: 'Custom Visualization',\n                            query: promptInput.value,\n                            timestamp: new Date().toISOString(),\n                            chartSpec: result.chartSpec\n                        });\n                    }\n                    \n                    // Show query history if multiple queries exist\n                    if (queryHistory.length > 1) {\n                        showQueryHistory();\n                    }\n                    \n                    // Clear the input after successful query\n                    promptInput.value = '';\n                    \n                    // Scroll to custom visualization section\n                    setTimeout(() => {\n                        const chartSection = document.getElementById('chartSection');\n                        if (chartSection && chartSection.style.display !== 'none') {\n                            chartSection.scrollIntoView({ \n                                behavior: 'smooth', \n                                block: 'start' \n                            });\n                        }\n                    }, 500);\n                    \n                } else {\n                    statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i>Query failed: ' + result.error + '</div>';\n                    lucide.createIcons();\n                }\n            } catch (error) {\n                statusDiv.innerHTML = '<div class=\"status error\"><i data-lucide=\"x-circle\"></i>Query error: ' + error.message + '</div>';\n                lucide.createIcons();\n            }\n        }\n\n        // Display analysis results\n        function showAnalysisResults(analysis, schema, sampleRows) {\n            const analysisSection = document.getElementById('analysisResults');\n            const analysisContent = document.getElementById('analysisContent');\n            \n            let metricsHtml = '<div class=\"metrics-grid\">';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + schema.length + '</div><div class=\"metric-label\">Total Columns</div></div>';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + sampleRows.length + '</div><div class=\"metric-label\">Sample Rows</div></div>';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + analysis.dataQuality.completeness + '%</div><div class=\"metric-label\">Data Quality</div></div>';\n            metricsHtml += '<div class=\"metric-card\"><div class=\"metric-value\">' + schema.filter(col => col.type === 'number').length + '</div><div class=\"metric-label\">Numeric Columns</div></div>';\n            metricsHtml += '</div>';\n            \n            let contentHtml = metricsHtml;\n            contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"file-text\"></i>Dataset Summary</h3>';\n            contentHtml += '<p style=\"color: var(--gray-700); line-height: 1.6; margin-bottom: 1.5rem;\">' + analysis.summary + '</p>';\n            \n            contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"eye\"></i>Key Insights</h3>';\n            contentHtml += '<ul class=\"insights-list\">';\n            analysis.insights.forEach(insight => {\n                contentHtml += '<li>' + insight + '</li>';\n            });\n            contentHtml += '</ul>';\n            \n            if (analysis.businessInsights) {\n                contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"target\"></i>Business Insights</h3>';\n                contentHtml += '<ul class=\"insights-list\">';\n                analysis.businessInsights.forEach(insight => {\n                    contentHtml += '<li>' + insight + '</li>';\n                });\n                contentHtml += '</ul>';\n            }\n            \n            if (analysis.dataQuality.issues.length > 0) {\n                contentHtml += '<h3 class=\"section-title\"><i data-lucide=\"alert-triangle\"></i>Data Quality Issues</h3>';\n                contentHtml += '<ul class=\"insights-list\">';\n                analysis.dataQuality.issues.forEach(issue => {\n                    contentHtml += '<li>' + issue + '</li>';\n                });\n                contentHtml += '</ul>';\n            }\n            \n            analysisContent.innerHTML = contentHtml;\n            analysisSection.style.display = 'block';\n            lucide.createIcons();\n        }\n\n        // Display auto-generated charts\n        function showAutoCharts(autoCharts) {\n            const autoChartsSection = document.getElementById('autoChartsSection');\n            const autoChartsContainer = document.getElementById('autoCharts');\n            \n            autoChartsContainer.innerHTML = '';\n            \n            autoCharts.forEach((chart, index) => {\n                const chartDiv = document.createElement('div');\n                chartDiv.className = 'chart-container';\n                // Handle different chart title/description formats\n                const title = chart.title || chart.metadata?.title || ('Chart ' + (index + 1));\n                const description = chart.description || chart.metadata?.businessInsight || 'Data visualization';\n                \n                chartDiv.innerHTML = '<h3 class=\\\"chart-title\\\">' + title + '</h3><p class=\\\"chart-description\\\">' + description + '</p><div id=\\\"autoChart' + index + '\\\" style=\\\"height: 400px;\\\"></div>';\n                autoChartsContainer.appendChild(chartDiv);\n                \n                // Render the chart with improved error handling\n                setTimeout(() => {\n                    try {\n                        // Handle different chart structure formats\n                        let chartData, chartLayout;\n                        \n                        if (chart.chartSpec && chart.chartSpec.data) {\n                            // Traditional format: { chartSpec: { data: [...], layout: {...} } }\n                            chartData = chart.chartSpec.data;\n                            chartLayout = chart.chartSpec.layout;\n                        } else if (chart.data) {\n                            // Direct format: { data: [...], layout: {...} }\n                            chartData = chart.data;\n                            chartLayout = chart.layout;\n                        } else {\n                            throw new Error('Invalid chart structure - no data found');\n                        }\n                        \n                        if (!chartData || !Array.isArray(chartData) || chartData.length === 0) {\n                            throw new Error('Chart data is empty or invalid');\n                        }\n                        \n                        Plotly.newPlot('autoChart' + index, chartData, {\n                            ...(chartLayout || {}),\n                            font: { family: 'Inter, sans-serif', size: 12, color: '#1e293b' },\n                            plot_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                            paper_bgcolor: 'rgba(255, 255, 255, 0.8)'\n                        }, {\n                            responsive: true,\n                            displayModeBar: true,\n                            displaylogo: false,\n                            modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d']\n                        });\n                        \n                        console.log('\u2705 Auto chart ' + index + ' rendered successfully');\n                    } catch (error) {\n                        console.error('\u274C Auto chart rendering error:', error);\n                        console.log('\uD83D\uDC1B Chart object structure:', chart);\n                        \n                        const errorDetails = {\n                            hasChartSpec: !!chart.chartSpec,\n                            hasData: !!chart.data,\n                            hasTitle: !!chart.title,\n                            chartSpecKeys: chart.chartSpec ? Object.keys(chart.chartSpec) : 'none',\n                            error: error.message\n                        };\n                        \n                        document.getElementById('autoChart' + index).innerHTML = '<div style=\"text-align: center; color: var(--error-600); padding: 40px; background: var(--error-50); border-radius: 8px; border: 1px solid var(--error-200);\"><i data-lucide=\"alert-circle\" style=\"width: 2rem; height: 2rem; margin-bottom: 1rem;\"></i><h4>Chart Rendering Failed</h4><p style=\"margin: 8px 0; font-size: 0.9rem;\">' + error.message + '</p><details style=\"margin-top: 12px; font-size: 0.8rem; text-align: left;\"><summary style=\"cursor: pointer; color: var(--primary-600);\">Debug Info</summary><pre style=\"background: white; padding: 8px; border-radius: 4px; margin-top: 8px; overflow: auto;\">' + JSON.stringify(errorDetails, null, 2) + '</pre></details></div>';\n                        lucide.createIcons();\n                    }\n                }, 100 * index);\n            });\n            \n            autoChartsSection.style.display = 'block';\n        }\n\n        // Display AI reasoning process\n        function showReasoning(reasoning) {\n            const reasoningSection = document.getElementById('reasoningSection');\n            const reasoningContent = document.getElementById('reasoningContent');\n            \n            let contentHtml = '<div class=\"reasoning-title\"><i data-lucide=\"brain\"></i>AI Analysis Process</div>';\n            contentHtml += '<div class=\"reasoning-content\">';\n            contentHtml += '<p style=\"margin-bottom: 1rem;\">' + reasoning.reasoning + '</p>';\n            contentHtml += '<h4 style=\"font-weight: 600; margin-bottom: 0.5rem; color: var(--gray-800);\">Chart Selection</h4>';\n            contentHtml += '<p style=\"margin-bottom: 0.5rem;\"><strong>Recommended Chart Type:</strong> ' + reasoning.recommendedChartType + '</p>';\n            contentHtml += '<p style=\"margin-bottom: 0.5rem;\"><strong>Primary Variables:</strong> ' + reasoning.primaryVariables.join(', ') + '</p>';\n            contentHtml += '<p style=\"margin-bottom: 1rem;\"><strong>Expected Outcome:</strong> ' + reasoning.expectedOutcome + '</p>';\n            \n            if (reasoning.considerations) {\n                contentHtml += '<h4 style=\"font-weight: 600; margin-bottom: 0.5rem; color: var(--gray-800);\">Key Considerations</h4>';\n                contentHtml += '<ul style=\"list-style: disc; margin-left: 1.5rem;\">';\n                reasoning.considerations.forEach(consideration => {\n                    contentHtml += '<li style=\"margin-bottom: 0.25rem;\">' + consideration + '</li>';\n                });\n                contentHtml += '</ul>';\n            }\n            \n            contentHtml += '</div>';\n            reasoningContent.innerHTML = contentHtml;\n            reasoningSection.style.display = 'block';\n            lucide.createIcons();\n        }\n\n        // Display NVIDIA agent reasoning with thinking\n        function showNvidiaReasoning(thinking, explanation) {\n            const reasoningSection = document.getElementById('reasoningSection');\n            const reasoningContent = document.getElementById('reasoningContent');\n            \n            let contentHtml = '<div class=\"reasoning-title\"><i data-lucide=\"brain\"></i>NVIDIA AI Agent Analysis</div>';\n            contentHtml += '<div class=\"reasoning-content\">';\n            \n            if (thinking) {\n                contentHtml += '<details class=\"thinking\" open>';\n                contentHtml += '<summary style=\"font-weight: 600; margin-bottom: 0.5rem; color: var(--primary-600); cursor: pointer;\">\uD83E\uDD14 Model Thinking Process</summary>';\n                contentHtml += '<pre style=\"background: var(--gray-50); padding: 1rem; border-radius: 0.5rem; font-size: 0.85rem; color: var(--gray-700); white-space: pre-wrap; margin: 0.5rem 0;\">' + thinking + '</pre>';\n                contentHtml += '</details>';\n            }\n            \n            if (explanation) {\n                contentHtml += '<h4 style=\"font-weight: 600; margin: 1rem 0 0.5rem 0; color: var(--gray-800);\">\uD83E\uDDE0 Analysis Explanation</h4>';\n                contentHtml += '<p style=\"margin-bottom: 1rem; line-height: 1.6; color: var(--gray-700);\">' + explanation + '</p>';\n            }\n            \n            contentHtml += '</div>';\n            reasoningContent.innerHTML = contentHtml;\n            reasoningSection.style.display = 'block';\n            lucide.createIcons();\n        }\n\n        // Display generated Python code\n        function showGeneratedCode(code, shouldPlot) {\n            // Create or update code section\n            let codeSection = document.getElementById('codeSection');\n            if (!codeSection) {\n                codeSection = document.createElement('div');\n                codeSection.id = 'codeSection';\n                codeSection.className = 'full-width';\n                codeSection.innerHTML = '<div class=\"card fade-in\"><div class=\"card-header\"><i data-lucide=\"code\" class=\"card-icon\"></i><h2 class=\"card-title\">Generated Python Code</h2></div><div id=\"codeContent\"></div></div>';\n                document.querySelector('.main-container').appendChild(codeSection);\n            }\n            \n            const codeContent = document.getElementById('codeContent');\n            let contentHtml = '<details class=\"code\" open>';\n            contentHtml += '<summary style=\"font-weight: 600; margin-bottom: 0.5rem; color: var(--primary-600); cursor: pointer;\">\uD83D\uDCDD Python Code ' + (shouldPlot ? '(with visualization)' : '(data analysis)') + '</summary>';\n            contentHtml += '<pre style=\"background: var(--gray-900); color: var(--gray-100); padding: 1rem; border-radius: 0.5rem; font-size: 0.85rem; overflow-x: auto; margin: 0.5rem 0;\"><code class=\"language-python\">' + code + '</code></pre>';\n            contentHtml += '</details>';\n            \n            codeContent.innerHTML = contentHtml;\n            codeSection.style.display = 'block';\n            lucide.createIcons();\n        }\n\n        // Simplified markdown formatting for compatibility\n        function formatMarkdownLikeText(text) {\n            if (!text || typeof text !== 'string') return text;\n            \n            // Clean up the text first\n            text = text.trim();\n            \n            // Simple formatting without complex regex\n            let formatted = text;\n            \n            // Bold formatting\n            formatted = formatted.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n            formatted = formatted.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n            \n            // Simple line breaks\n            formatted = formatted.replace(/\\n\\n/g, '</p><p style=\"margin: 1rem 0; line-height: 1.6; color: var(--gray-700);\">');\n            formatted = formatted.replace(/\\n/g, '<br>');\n            \n            // Wrap in paragraph if needed\n            if (!formatted.includes('<p>')) {\n                formatted = '<p style=\"margin: 1rem 0; line-height: 1.6; color: var(--gray-700);\">' + formatted + '</p>';\n            }\n            \n            return formatted;\n        }\n\n        // Enhanced data result formatting with improved styling\n        function formatDataResult(data) {\n            if (typeof data === 'string') {\n                // Enhanced string formatting with markdown support\n                if (data.includes('**') || data.includes('*') || data.includes('#')) {\n                    return formatMarkdownLikeText(data);\n                }\n                \n                // Handle multi-line strings nicely\n                if (data.includes('\\n')) {\n                    return '<div style=\"background: var(--gray-50); padding: 1rem; border-radius: 8px; border-left: 4px solid var(--primary-400); line-height: 1.6; color: var(--gray-700);\">' + \n                           data.replace(/\\n/g, '<br>') + '</div>';\n                }\n                \n                return '<p style=\"color: var(--gray-700); line-height: 1.6; margin: 0.5rem 0;\">' + data + '</p>';\n            }\n            \n            if (Array.isArray(data)) {\n                if (data.length === 0) {\n                    return '<div style=\"text-align: center; padding: 2rem; background: var(--gray-50); border-radius: 8px; color: var(--gray-500);\"><i data-lucide=\"search-x\" style=\"width: 2rem; height: 2rem; margin-bottom: 0.5rem;\"></i><p>No data found matching the criteria.</p></div>';\n                }\n                \n                // Enhanced list formatting for simple arrays\n                if (data.every(item => typeof item === 'string' || typeof item === 'number')) {\n                    const listItems = data.map((item, index) => \n                        '<li style=\"margin-bottom: 0.5rem; padding: 0.25rem 0; border-bottom: 1px solid var(--gray-100); color: var(--gray-700);\">' + \n                        '<span style=\"color: var(--primary-600); font-weight: 500; margin-right: 0.5rem;\">' + (index + 1) + '.</span>' + \n                        item + '</li>'\n                    ).join('');\n                    \n                    return '<ul style=\"margin: 1rem 0; padding: 0; list-style: none; background: white; border-radius: 8px; border: 1px solid var(--gray-200); overflow: hidden;\">' + \n                           listItems + '</ul>';\n                }\n                \n                // Enhanced table format for complex arrays\n                if (data.length > 0 && typeof data[0] === 'object') {\n                    return formatArrayAsTable(data);\n                }\n                \n                // Fallback to JSON with better styling\n                return '<details style=\"margin: 1rem 0; background: white; border-radius: 8px; border: 1px solid var(--gray-200); overflow: hidden;\">' +\n                       '<summary style=\"padding: 1rem; background: var(--gray-50); cursor: pointer; font-weight: 600; color: var(--primary-700);\">View Data Array (' + data.length + ' items)</summary>' +\n                       '<pre style=\"padding: 1rem; margin: 0; font-size: 0.9rem; overflow-x: auto; white-space: pre-wrap; color: var(--gray-700);\">' + \n                       JSON.stringify(data, null, 2) + '</pre></details>';\n            }\n            \n            if (typeof data === 'object' && data !== null) {\n                const keys = Object.keys(data);\n                \n                // Enhanced key-value display for simple objects\n                if (keys.length <= 10 && keys.every(key => \n                    typeof data[key] === 'string' || typeof data[key] === 'number' || typeof data[key] === 'boolean'\n                )) {\n                    const keyValuePairs = keys.map(key => \n                        '<div style=\"display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; border-bottom: 1px solid var(--gray-100); last:border-bottom: none;\">' +\n                        '<span style=\"font-weight: 600; color: var(--primary-700);\">' + key + ':</span>' +\n                        '<span style=\"color: var(--gray-700); text-align: right;\">' + data[key] + '</span>' +\n                        '</div>'\n                    ).join('');\n                    \n                    return '<div style=\"background: white; border-radius: 8px; border: 1px solid var(--gray-200); overflow: hidden; margin: 1rem 0;\">' +\n                           keyValuePairs + '</div>';\n                }\n                \n                // Complex object with collapsible JSON\n                return '<details style=\"margin: 1rem 0; background: white; border-radius: 8px; border: 1px solid var(--gray-200); overflow: hidden;\">' +\n                       '<summary style=\"padding: 1rem; background: var(--gray-50); cursor: pointer; font-weight: 600; color: var(--primary-700);\">View Object Data</summary>' +\n                       '<pre style=\"padding: 1rem; margin: 0; font-size: 0.9rem; overflow-x: auto; white-space: pre-wrap; color: var(--gray-700);\">' + \n                       JSON.stringify(data, null, 2) + '</pre></details>';\n            }\n            \n            return '<p style=\"color: var(--gray-700); line-height: 1.6; margin: 0.5rem 0;\">' + String(data) + '</p>';\n        }\n        \n        // Helper function to format arrays as tables\n        function formatArrayAsTable(data) {\n            if (!data || data.length === 0) return '<p>No data available</p>';\n            \n            const keys = Object.keys(data[0]);\n            const maxRows = Math.min(data.length, 10); // Limit to 10 rows for performance\n            \n            let html = '<div style=\"overflow-x: auto; margin: 1rem 0; border-radius: 8px; border: 1px solid var(--gray-200); background: white;\">';\n            html += '<table style=\"width: 100%; border-collapse: collapse; font-size: 0.9em;\">';\n            \n            // Header\n            html += '<thead><tr style=\"background: var(--primary-50); border-bottom: 2px solid var(--primary-200);\">';\n            keys.forEach(key => {\n                html += '<th style=\"padding: 0.75rem; text-align: left; font-weight: 600; color: var(--primary-700); border-right: 1px solid var(--gray-200);\">' + key + '</th>';\n            });\n            html += '</tr></thead>';\n            \n            // Body\n            html += '<tbody>';\n            for (let i = 0; i < maxRows; i++) {\n                const row = data[i];\n                html += '<tr style=\"border-bottom: 1px solid var(--gray-100); hover:background-color: var(--gray-50);\">';\n                keys.forEach(key => {\n                    const value = row[key];\n                    const displayValue = value !== null && value !== undefined ? String(value) : '-';\n                    html += '<td style=\"padding: 0.75rem; border-right: 1px solid var(--gray-100); color: var(--gray-700);\">' + displayValue + '</td>';\n                });\n                html += '</tr>';\n            }\n            html += '</tbody></table>';\n            \n            if (data.length > maxRows) {\n                html += '<div style=\"padding: 0.75rem; background: var(--gray-50); text-align: center; color: var(--gray-600); font-size: 0.875rem; border-top: 1px solid var(--gray-200);\">Showing first ' + maxRows + ' rows of ' + data.length + ' total rows</div>';\n            }\n            \n            html += '</div>';\n            return html;\n        }\n\n        // Display execution result\n        function showExecutionResult(result) {\n            const chartSection = document.getElementById('chartSection');\n            const chartContainer = document.getElementById('chartContainer');\n            \n            if (result.type === 'plot' && result.chartSpec) {\n                // For plot results with chart spec, render the actual Plotly chart\n                try {\n                    chartContainer.innerHTML = '<div id=\"nvidiaChart\" style=\"height: 500px;\"></div><div style=\"text-align: center; margin-top: 1rem; color: var(--gray-600); font-size: 0.875rem;\"><i data-lucide=\"zap\" style=\"width: 16px; height: 16px; margin-right: 4px;\"></i>Generated from Python code \u2022 ' + (result.dataPoints || 0) + ' data points</div>';\n                    \n                    // Render the actual Plotly chart\n                    Plotly.newPlot('nvidiaChart', result.chartSpec.data, {\n                        ...result.chartSpec.layout,\n                        font: { family: 'Inter, sans-serif', size: 12, color: '#1e293b' },\n                        plot_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                        paper_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                        margin: { l: 60, r: 40, t: 60, b: 60 }\n                    }, {\n                        responsive: true,\n                        displayModeBar: true,\n                        displaylogo: false,\n                        modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d', 'autoScale2d']\n                    });\n                    \n                    console.log('\u2705 NVIDIA chart rendered successfully');\n                } catch (error) {\n                    console.error('\u274C Error rendering NVIDIA chart:', error);\n                    chartContainer.innerHTML = '<div style=\"padding: 40px; text-align: center; color: var(--error-600); background: var(--error-50); border-radius: var(--radius-lg); border: 2px dashed var(--error-300);\"><i data-lucide=\"alert-triangle\" style=\"width: 3rem; height: 3rem; margin-bottom: 1rem;\"></i><h3>Chart Rendering Error</h3><p>Failed to render the generated visualization</p><small style=\"color: var(--gray-600);\">Error: ' + error.message + '</small></div>';\n                }\n            } else if (result.type === 'plot') {\n                // For plot results without chart spec, show placeholder\n                chartContainer.innerHTML = '<div style=\"padding: 40px; text-align: center; color: var(--primary-600); background: var(--primary-50); border-radius: var(--radius-lg); border: 2px dashed var(--primary-300);\"><i data-lucide=\"image\" style=\"width: 3rem; height: 3rem; margin-bottom: 1rem;\"></i><h3>Visualization Generated</h3><p>' + (result.description || 'Python matplotlib chart generated successfully') + '</p><small style=\"color: var(--gray-600);\">Interactive visualization ready</small></div>';\n            } else {\n                // For data results, format them nicely\n                const dataToShow = result.value || result.data || result;\n                const formattedData = formatDataResult(dataToShow);\n                \n                chartContainer.innerHTML = '<div style=\"padding: 20px; background: var(--gray-50); border-radius: var(--radius-lg);\"><h4 style=\"color: var(--gray-800); margin-bottom: 1rem; display: flex; align-items: center; gap: 0.5rem;\"><i data-lucide=\"table\" style=\"width: 20px; height: 20px;\"></i>Analysis Result</h4><div style=\"color: var(--gray-700); line-height: 1.6;\">' + formattedData + '</div></div>';\n            }\n            \n            chartSection.style.display = 'block';\n            lucide.createIcons();\n        }\n\n\n\n        // Format statistics data nicely\n        function formatStatistics(stats) {\n            let html = '<div style=\"overflow-x: auto;\"><table style=\"width: 100%; border-collapse: collapse; font-size: 0.9em;\">';\n            html += '<thead><tr style=\"background: var(--gray-100); border-bottom: 2px solid var(--gray-300);\">';\n            html += '<th style=\"padding: 8px; text-align: left; border: 1px solid var(--gray-300);\">Column</th>';\n            html += '<th style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">Count</th>';\n            html += '<th style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">Mean</th>';\n            html += '<th style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">Min</th>';\n            html += '<th style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">Max</th>';\n            html += '</tr></thead><tbody>';\n            \n            Object.entries(stats).forEach(([column, data]) => {\n                html += '<tr style=\"border-bottom: 1px solid var(--gray-200);\">';\n                html += '<td style=\"padding: 8px; border: 1px solid var(--gray-300); font-weight: 500;\">' + column + '</td>';\n                html += '<td style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">' + (data.count || '-') + '</td>';\n                html += '<td style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">' + (data.mean ? data.mean.toFixed(2) : '-') + '</td>';\n                html += '<td style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">' + (data.min !== undefined ? data.min : '-') + '</td>';\n                html += '<td style=\"padding: 8px; text-align: right; border: 1px solid var(--gray-300);\">' + (data.max !== undefined ? data.max : '-') + '</td>';\n                html += '</tr>';\n            });\n            \n            html += '</tbody></table></div>';\n            return html;\n        }\n\n        // Format table preview nicely\n        function formatTablePreview(data) {\n            if (!Array.isArray(data) || data.length === 0) return '<p>No preview data available</p>';\n            \n            const headers = Object.keys(data[0]);\n            let html = '<div style=\"overflow-x: auto;\"><table style=\"width: 100%; border-collapse: collapse; font-size: 0.9em;\">';\n            html += '<thead><tr style=\"background: var(--gray-100); border-bottom: 2px solid var(--gray-300);\">';\n            \n            headers.forEach(header => {\n                html += '<th style=\"padding: 8px; text-align: left; border: 1px solid var(--gray-300);\">' + header + '</th>';\n            });\n            \n            html += '</tr></thead><tbody>';\n            \n            data.slice(0, 5).forEach(row => {  // Show first 5 rows\n                html += '<tr style=\"border-bottom: 1px solid var(--gray-200);\">';\n                headers.forEach(header => {\n                    const value = row[header];\n                    html += '<td style=\"padding: 8px; border: 1px solid var(--gray-300);\">' + (value !== null && value !== undefined ? value : '-') + '</td>';\n                });\n                html += '</tr>';\n            });\n            \n            html += '</tbody></table></div>';\n            if (data.length > 5) {\n                html += '<p style=\"margin-top: 0.5rem; color: var(--gray-600); font-size: 0.85em;\">Showing first 5 rows of ' + data.length + ' total rows</p>';\n            }\n            return html;\n        }\n\n        // Display generated chart\n        function showChart(chartSpec) {\n            const chartSection = document.getElementById('chartSection');\n            const chartContainer = document.getElementById('chartContainer');\n            \n            try {\n                // Clear any existing chart\n                chartContainer.innerHTML = '<div id=\"customChart\" style=\"height: 500px;\"></div>';\n                \n                // Create new chart with professional styling\n                Plotly.newPlot('customChart', chartSpec.data, {\n                    ...chartSpec.layout,\n                    font: { family: 'Inter, sans-serif', size: 12, color: '#1e293b' },\n                    plot_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                    paper_bgcolor: 'rgba(255, 255, 255, 0.8)',\n                    margin: { l: 60, r: 40, t: 60, b: 60 }\n                }, {\n                    responsive: true,\n                    displayModeBar: true,\n                    displaylogo: false,\n                    modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d', 'autoScale2d']\n                });\n                \n                chartSection.style.display = 'block';\n                \n                // Scroll to chart\n                chartSection.scrollIntoView({ behavior: 'smooth' });\n                \n            } catch (plotError) {\n                console.error('Plotly error:', plotError);\n                chartContainer.innerHTML = '<div style=\"padding: 40px; text-align: center; color: var(--gray-500); background: var(--gray-50); border-radius: var(--radius-lg);\"><i data-lucide=\"alert-circle\" style=\"width: 2rem; height: 2rem; margin-bottom: 1rem;\"></i><h3>Chart Rendering Failed</h3><p>The AI generated a chart specification, but it could not be rendered properly.</p><details style=\"margin-top: 20px; text-align: left;\"><summary style=\"cursor: pointer; font-weight: 600; color: var(--primary-600);\">View Raw Chart Specification</summary><pre style=\"background: white; padding: 15px; border-radius: 8px; overflow: auto; margin-top: 10px; font-size: 12px; border: 1px solid var(--gray-200);\">' + JSON.stringify(chartSpec, null, 2) + '</pre></details></div>';\n                chartSection.style.display = 'block';\n                lucide.createIcons();\n            }\n        }\n\n        // Display suggested prompts\n        function showSuggestedPrompts(suggestedPrompts) {\n            const suggestionsSection = document.getElementById('suggestionsSection');\n            const suggestionsContainer = document.getElementById('suggestions');\n            \n            let contentHtml = '';\n            suggestedPrompts.forEach(prompt => {\n                contentHtml += '<div class=\"suggestion-card\" onclick=\"setQuery(\\'' + prompt.prompt.replace(/'/g, '&apos;') + '\\')\"><div class=\"suggestion-title\">' + prompt.prompt + '</div><div class=\"suggestion-description\">' + prompt.description + '</div><span class=\"suggestion-category\">' + prompt.category + '</span></div>';\n            });\n            \n            suggestionsContainer.innerHTML = contentHtml;\n            suggestionsSection.style.display = 'block';\n        }\n\n        // Set query in prompt input\n        function setQuery(query) {\n            document.getElementById('promptInput').value = query;\n            document.getElementById('promptInput').focus();\n        }\n\n        // Add keyboard shortcuts\n        document.getElementById('promptInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter' && e.ctrlKey) {\n                generateChart();\n            }\n        });\n\n        // Add file selection event listener\n        document.getElementById('csvFile').addEventListener('change', handleFileSelect);\n\n        // Add file drag and drop functionality\n        const fileInput = document.getElementById('csvFile');\n        const uploadArea = document.querySelector('.file-upload-area');\n\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n            uploadArea.addEventListener(eventName, preventDefaults, false);\n        });\n\n        ['dragenter', 'dragover'].forEach(eventName => {\n            uploadArea.addEventListener(eventName, highlight, false);\n        });\n\n        ['dragleave', 'drop'].forEach(eventName => {\n            uploadArea.addEventListener(eventName, unhighlight, false);\n        });\n\n        uploadArea.addEventListener('drop', handleDrop, false);\n\n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        function highlight() {\n            uploadArea.classList.add('dragover');\n        }\n\n        function unhighlight() {\n            uploadArea.classList.remove('dragover');\n        }\n\n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n\n            if (files.length > 0 && files[0].name.endsWith('.csv')) {\n                fileInput.files = files;\n                handleFileSelect(); // Show file selected state\n            } else {\n                const statusDiv = document.getElementById('uploadStatus');\n                statusDiv.innerHTML = '<div class=\"status warning\"><i data-lucide=\"alert-triangle\"></i>Please select a valid CSV file.</div>';\n                lucide.createIcons();\n            }\n        }\n        \n        // Add query history display function\n        function showQueryHistory() {\n            let historySection = document.getElementById('queryHistorySection');\n            \n            if (!historySection) {\n                historySection = document.createElement('div');\n                historySection.id = 'queryHistorySection';\n                historySection.className = 'full-width';\n                historySection.innerHTML = '<div class=\"card fade-in\"><div class=\"card-header\"><i data-lucide=\"history\" class=\"card-icon\"></i><h2 class=\"card-title\">Query History</h2></div><div id=\"queryHistoryContent\"></div></div>';\n                \n                // Insert before the chart section\n                const chartSection = document.getElementById('chartSection');\n                const container = chartSection.parentNode;\n                container.insertBefore(historySection, chartSection);\n            }\n            \n            const historyContent = document.getElementById('queryHistoryContent');\n            \n            let historyHtml = '<div style=\"margin-bottom: 1rem; color: var(--gray-600); font-size: 0.9rem;\">Your recent queries and results:</div>';\n            \n            queryHistory.slice(-5).reverse().forEach((item, index) => {\n                const timeAgo = getTimeAgo(new Date(item.timestamp));\n                const isLatest = index === 0;\n                \n                historyHtml += '<div style=\"' + (isLatest ? 'background: var(--primary-50); border: 2px solid var(--primary-200);' : 'background: white; border: 1px solid var(--gray-200);') + ' border-radius: 8px; padding: 1rem; margin-bottom: 0.75rem; position: relative;\">';\n                \n                if (isLatest) {\n                    historyHtml += '<div style=\"position: absolute; top: -8px; right: 1rem; background: var(--primary-500); color: white; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem; font-weight: 600;\">Latest</div>';\n                }\n                \n                historyHtml += '<div style=\"font-weight: 600; color: var(--gray-800); margin-bottom: 0.5rem; display: flex; align-items: center; gap: 0.5rem;\">';\n                historyHtml += '<i data-lucide=\"message-circle\" style=\"width: 16px; height: 16px; color: var(--primary-600);\"></i>';\n                historyHtml += 'Query ' + (queryHistory.length - index);\n                historyHtml += '<span style=\"margin-left: auto; font-size: 0.8rem; color: var(--gray-500); font-weight: 400;\">' + timeAgo + '</span>';\n                historyHtml += '</div>';\n                \n                historyHtml += '<div style=\"color: var(--gray-700); font-style: italic; margin-bottom: 0.75rem; padding: 0.5rem; background: var(--gray-50); border-radius: 4px; border-left: 3px solid var(--primary-400);\">';\n                historyHtml += '\"' + item.query + '\"';\n                historyHtml += '</div>';\n                \n                if (item.result) {\n                    if (item.result.result && item.result.result.type === 'plot') {\n                        historyHtml += '<div style=\"color: var(--success-700); font-size: 0.9rem;\"><i data-lucide=\"chart-bar\" style=\"width: 14px; height: 14px; margin-right: 0.25rem;\"></i>Generated interactive chart</div>';\n                    } else if (item.result.chartSpec) {\n                        historyHtml += '<div style=\"color: var(--success-700); font-size: 0.9rem;\"><i data-lucide=\"chart-line\" style=\"width: 14px; height: 14px; margin-right: 0.25rem;\"></i>Generated custom visualization</div>';\n                    } else {\n                        historyHtml += '<div style=\"color: var(--info-700); font-size: 0.9rem;\"><i data-lucide=\"table\" style=\"width: 14px; height: 14px; margin-right: 0.25rem;\"></i>Returned data analysis</div>';\n                    }\n                }\n                \n                historyHtml += '</div>';\n            });\n            \n            if (queryHistory.length > 5) {\n                historyHtml += '<div style=\"text-align: center; color: var(--gray-500); font-size: 0.875rem; margin-top: 1rem;\">Showing 5 most recent queries out of ' + queryHistory.length + ' total</div>';\n            }\n            \n            historyContent.innerHTML = historyHtml;\n            historySection.style.display = 'block';\n            lucide.createIcons();\n        }\n        \n        // Helper function to format time ago\n        function getTimeAgo(date) {\n            const now = new Date();\n            const diffMs = now - date;\n            const diffSecs = Math.floor(diffMs / 1000);\n            const diffMins = Math.floor(diffSecs / 60);\n            const diffHours = Math.floor(diffMins / 60);\n            \n            if (diffSecs < 60) return 'Just now';\n            if (diffMins < 60) return diffMins + 'm ago';\n            if (diffHours < 24) return diffHours + 'h ago';\n            return Math.floor(diffHours / 24) + 'd ago';\n        }\n    </script>\n</body>\n</html>`;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAMA,KAAC,CAAC,GAAE,MAAI;AAAC,oBAAY,OAAO,UAAQ,OAAO,MAAI,OAAO,CAAC,GAAE,CAAC,IAAE,YAAU,OAAO,UAAQ,eAAa,OAAO,UAAQ,OAAO,UAAQ,EAAE,IAAE,EAAE,OAAK,EAAE;AAAA,IAAC,GAAG,SAAK,gCAAS,IAAG;AAAC,UAAI,IAAE,eAAa,OAAO,OAAK,OAAK,eAAa,OAAO,SAAO,SAAO,WAAS,IAAE,IAAE,CAAC;AAAE,UAAI,GAAE,IAAE,CAAC,EAAE,YAAU,CAAC,CAAC,EAAE,aAAY,IAAE,EAAE,kBAAgB,OAAG,IAAE,CAAC,GAAE,IAAE,GAAE,IAAE,CAAC;AAAE,eAAS,EAAE,GAAE;AAAC,aAAK,UAAQ,MAAK,KAAK,YAAU,OAAG,KAAK,aAAW,OAAG,KAAK,UAAQ,OAAG,KAAK,SAAO,MAAK,KAAK,aAAW,GAAE,KAAK,eAAa,IAAG,KAAK,YAAU,GAAE,KAAK,SAAO,GAAE,KAAK,aAAW,MAAK,KAAK,eAAa,MAAG,KAAK,mBAAiB,EAAC,MAAK,CAAC,GAAE,QAAO,CAAC,GAAE,MAAK,CAAC,EAAC,GAAE,SAASA,IAAE;AAAC,cAAI,IAAE,EAAEA,EAAC;AAAE,YAAE,YAAU,SAAS,EAAE,SAAS,GAAEA,GAAE,QAAMA,GAAE,UAAQ,EAAE,YAAU;AAAM,eAAK,UAAQ,IAAI,EAAE,CAAC,IAAG,KAAK,QAAQ,WAAS,MAAM,UAAQ;AAAA,QAAC,EAAE,KAAK,MAAK,CAAC,GAAE,KAAK,aAAW,SAAS,GAAEA,IAAE;AAAC,cAAIC,KAAE,SAAS,KAAK,QAAQ,eAAe,KAAG;AAAE,cAAG,KAAK,gBAAc,IAAEA,IAAE;AAAC,gBAAID,KAAE,KAAK,QAAQ;AAAQ,YAAAA,OAAIE,KAAE,KAAK,QAAQ,aAAW,KAAIF,KAAE,KAAK,QAAQ,iBAAiB,GAAEE,EAAC,IAAG,IAAE,CAAC,GAAG,EAAE,MAAMF,EAAC,EAAE,MAAMC,EAAC,CAAC,EAAE,KAAKD,EAAC;AAAA,UAAC;AAAC,eAAK,gBAAc,EAAE,KAAK,QAAQ,gBAAgB,KAAG,YAAUE,KAAE,KAAK,QAAQ,iBAAiB,CAAC,OAAK,IAAEA,KAAG,KAAK,eAAa,OAAG,KAAK,UAAQ;AAAG,cAAID,KAAE,KAAK,eAAa,GAAEC,MAAG,KAAK,eAAa,IAAG,KAAK,QAAQ,MAAMD,IAAE,KAAK,YAAW,CAAC,KAAK,SAAS;AAAG,cAAG,CAAC,KAAK,QAAQ,OAAO,KAAG,CAAC,KAAK,QAAQ,QAAQ,GAAE;AAAC,gBAAEC,GAAE,KAAK,QAAOD,MAAG,KAAK,cAAY,KAAK,eAAaA,GAAE,UAAU,IAAE,KAAK,UAAU,GAAE,KAAK,aAAW,IAAGC,MAAGA,GAAE,SAAO,KAAK,aAAWA,GAAE,KAAK,SAAQ,KAAK,aAAW,KAAK,QAAQ,WAAS,KAAK,aAAW,KAAK,QAAQ;AAAS,gBAAG,EAAE,GAAE,YAAY,EAAC,SAAQA,IAAE,UAAS,EAAE,WAAU,UAASD,GAAC,CAAC;AAAA,qBAAU,EAAE,KAAK,QAAQ,KAAK,KAAG,CAACD,IAAE;AAAC,kBAAG,KAAK,QAAQ,MAAME,IAAE,KAAK,OAAO,GAAE,KAAK,QAAQ,OAAO,KAAG,KAAK,QAAQ,QAAQ,EAAE,QAAO,MAAK,KAAK,UAAQ;AAAI,mBAAK,mBAAiBA,KAAE;AAAA,YAAM;AAAC,mBAAO,KAAK,QAAQ,QAAM,KAAK,QAAQ,UAAQ,KAAK,iBAAiB,OAAK,KAAK,iBAAiB,KAAK,OAAOA,GAAE,IAAI,GAAE,KAAK,iBAAiB,SAAO,KAAK,iBAAiB,OAAO,OAAOA,GAAE,MAAM,GAAE,KAAK,iBAAiB,OAAKA,GAAE,OAAM,KAAK,cAAY,CAACD,MAAG,CAAC,EAAE,KAAK,QAAQ,QAAQ,KAAGC,MAAGA,GAAE,KAAK,YAAU,KAAK,QAAQ,SAAS,KAAK,kBAAiB,KAAK,MAAM,GAAE,KAAK,aAAW,OAAID,MAAGC,MAAGA,GAAE,KAAK,UAAQ,KAAK,WAAW,GAAEA;AAAA,UAAC;AAAC,eAAK,UAAQ;AAAA,QAAE,GAAE,KAAK,aAAW,SAASF,IAAE;AAAC,YAAE,KAAK,QAAQ,KAAK,IAAE,KAAK,QAAQ,MAAMA,EAAC,IAAE,KAAG,KAAK,QAAQ,SAAO,EAAE,YAAY,EAAC,UAAS,EAAE,WAAU,OAAMA,IAAE,UAAS,MAAE,CAAC;AAAA,QAAC;AAAA,MAAC;AAA19D;AAA29D,eAAS,EAAE,GAAE;AAAC,YAAIE;AAAE,SAAC,IAAE,KAAG,CAAC,GAAG,cAAY,EAAE,YAAU,EAAE,kBAAiB,EAAE,KAAK,MAAK,CAAC,GAAE,KAAK,aAAW,IAAE,WAAU;AAAC,eAAK,WAAW,GAAE,KAAK,aAAa;AAAA,QAAC,IAAE,WAAU;AAAC,eAAK,WAAW;AAAA,QAAC,GAAE,KAAK,SAAO,SAASF,IAAE;AAAC,eAAK,SAAOA,IAAE,KAAK,WAAW;AAAA,QAAC,GAAE,KAAK,aAAW,WAAU;AAAC,cAAG,KAAK,UAAU,MAAK,aAAa;AAAA,eAAM;AAAC,gBAAGE,KAAE,IAAI,kBAAe,KAAK,QAAQ,oBAAkBA,GAAE,kBAAgB,KAAK,QAAQ,kBAAiB,MAAIA,GAAE,SAAO,EAAE,KAAK,cAAa,IAAI,GAAEA,GAAE,UAAQ,EAAE,KAAK,aAAY,IAAI,IAAGA,GAAE,KAAK,KAAK,QAAQ,sBAAoB,SAAO,OAAM,KAAK,QAAO,CAAC,CAAC,GAAE,KAAK,QAAQ,wBAAuB;AAAC,kBAAIF,IAAE,IAAE,KAAK,QAAQ;AAAuB,mBAAIA,MAAK,EAAE,CAAAE,GAAE,iBAAiBF,IAAE,EAAEA,EAAC,CAAC;AAAA,YAAC;AAAC,gBAAIC;AAAE,iBAAK,QAAQ,cAAYA,KAAE,KAAK,SAAO,KAAK,QAAQ,YAAU,GAAEC,GAAE,iBAAiB,SAAQ,WAAS,KAAK,SAAO,MAAID,EAAC;AAAG,gBAAG;AAAC,cAAAC,GAAE,KAAK,KAAK,QAAQ,mBAAmB;AAAA,YAAC,SAAOF,IAAE;AAAC,mBAAK,YAAYA,GAAE,OAAO;AAAA,YAAC;AAAC,iBAAG,MAAIE,GAAE,UAAQ,KAAK,YAAY;AAAA,UAAC;AAAA,QAAC,GAAE,KAAK,eAAa,WAAU;AAAC,gBAAIA,GAAE,eAAaA,GAAE,SAAO,OAAK,OAAKA,GAAE,SAAO,KAAK,YAAY,KAAG,KAAK,UAAQ,KAAK,QAAQ,aAAWA,GAAE,aAAa,QAAO,KAAK,YAAU,CAAC,KAAK,QAAQ,aAAW,KAAK,WAAS,CAAAF,OAAG,UAAQA,KAAEA,GAAE,kBAAkB,eAAe,KAAG,SAASA,GAAE,UAAUA,GAAE,YAAY,GAAG,IAAE,CAAC,CAAC,IAAE,IAAIE,EAAC,GAAE,KAAK,WAAWA,GAAE,YAAY;AAAA,QAAG,GAAE,KAAK,cAAY,SAASF,IAAE;AAAC,UAAAA,KAAEE,GAAE,cAAYF;AAAE,eAAK,WAAW,IAAI,MAAMA,EAAC,CAAC;AAAA,QAAC;AAAA,MAAC;AAA3zC;AAA4zC,eAAS,EAAE,GAAE;AAAC,SAAC,IAAE,KAAG,CAAC,GAAG,cAAY,EAAE,YAAU,EAAE,iBAAgB,EAAE,KAAK,MAAK,CAAC;AAAE,YAAIC,IAAEC,IAAEC,KAAE,eAAa,OAAO;AAAW,aAAK,SAAO,SAASH,IAAE;AAAC,eAAK,SAAOA,IAAEE,KAAEF,GAAE,SAAOA,GAAE,eAAaA,GAAE,UAASG,OAAIF,KAAE,IAAI,cAAY,SAAO,EAAE,KAAK,cAAa,IAAI,GAAEA,GAAE,UAAQ,EAAE,KAAK,aAAY,IAAI,KAAGA,KAAE,IAAI,kBAAe,KAAK,WAAW;AAAA,QAAC,GAAE,KAAK,aAAW,WAAU;AAAC,eAAK,aAAW,KAAK,QAAQ,WAAS,EAAE,KAAK,YAAU,KAAK,QAAQ,YAAU,KAAK,WAAW;AAAA,QAAC,GAAE,KAAK,aAAW,WAAU;AAAC,cAAID,KAAE,KAAK,QAAO,KAAG,KAAK,QAAQ,cAAY,IAAE,KAAK,IAAI,KAAK,SAAO,KAAK,QAAQ,WAAU,KAAK,OAAO,IAAI,GAAEA,KAAEE,GAAE,KAAKF,IAAE,KAAK,QAAO,CAAC,IAAGC,GAAE,WAAWD,IAAE,KAAK,QAAQ,QAAQ;AAAG,UAAAG,MAAG,KAAK,aAAa,EAAC,QAAO,EAAC,QAAO,EAAC,EAAC,CAAC;AAAA,QAAC,GAAE,KAAK,eAAa,SAASH,IAAE;AAAC,eAAK,UAAQ,KAAK,QAAQ,WAAU,KAAK,YAAU,CAAC,KAAK,QAAQ,aAAW,KAAK,UAAQ,KAAK,OAAO,MAAK,KAAK,WAAWA,GAAE,OAAO,MAAM;AAAA,QAAC,GAAE,KAAK,cAAY,WAAU;AAAC,eAAK,WAAWC,GAAE,KAAK;AAAA,QAAC;AAAA,MAAC;AAAh5B;AAAi5B,eAAS,EAAE,GAAE;AAAC,YAAIA;AAAE,UAAE,KAAK,MAAK,IAAE,KAAG,CAAC,CAAC,GAAE,KAAK,SAAO,SAASD,IAAE;AAAC,iBAAOC,KAAED,IAAE,KAAK,WAAW;AAAA,QAAC,GAAE,KAAK,aAAW,WAAU;AAAC,cAAIA,IAAE;AAAE,cAAG,CAAC,KAAK,UAAU,QAAOA,KAAE,KAAK,QAAQ,WAAUC,KAAED,MAAG,IAAEC,GAAE,UAAU,GAAED,EAAC,GAAEC,GAAE,UAAUD,EAAC,MAAI,IAAEC,IAAE,KAAI,KAAK,YAAU,CAACA,IAAE,KAAK,WAAW,CAAC;AAAA,QAAC;AAAA,MAAC;AAAlQ;AAAmQ,eAAS,EAAE,GAAE;AAAC,UAAE,KAAK,MAAK,IAAE,KAAG,CAAC,CAAC;AAAE,YAAI,IAAE,CAAC,GAAEA,KAAE,MAAGC,KAAE;AAAG,aAAK,QAAM,WAAU;AAAC,YAAE,UAAU,MAAM,MAAM,MAAK,SAAS,GAAE,KAAK,OAAO,MAAM;AAAA,QAAC,GAAE,KAAK,SAAO,WAAU;AAAC,YAAE,UAAU,OAAO,MAAM,MAAK,SAAS,GAAE,KAAK,OAAO,OAAO;AAAA,QAAC,GAAE,KAAK,SAAO,SAASF,IAAE;AAAC,eAAK,SAAOA,IAAE,KAAK,OAAO,GAAG,QAAO,KAAK,WAAW,GAAE,KAAK,OAAO,GAAG,OAAM,KAAK,UAAU,GAAE,KAAK,OAAO,GAAG,SAAQ,KAAK,YAAY;AAAA,QAAC,GAAE,KAAK,mBAAiB,WAAU;AAAC,UAAAE,MAAG,MAAI,EAAE,WAAS,KAAK,YAAU;AAAA,QAAG,GAAE,KAAK,aAAW,WAAU;AAAC,eAAK,iBAAiB,GAAE,EAAE,SAAO,KAAK,WAAW,EAAE,MAAM,CAAC,IAAED,KAAE;AAAA,QAAE,GAAE,KAAK,cAAY,EAAE,SAASD,IAAE;AAAC,cAAG;AAAC,cAAE,KAAK,YAAU,OAAOA,KAAEA,KAAEA,GAAE,SAAS,KAAK,QAAQ,QAAQ,CAAC,GAAEC,OAAIA,KAAE,OAAG,KAAK,iBAAiB,GAAE,KAAK,WAAW,EAAE,MAAM,CAAC;AAAA,UAAE,SAAOD,IAAE;AAAC,iBAAK,aAAaA,EAAC;AAAA,UAAC;AAAA,QAAC,GAAE,IAAI,GAAE,KAAK,eAAa,EAAE,SAASA,IAAE;AAAC,eAAK,eAAe,GAAE,KAAK,WAAWA,EAAC;AAAA,QAAC,GAAE,IAAI,GAAE,KAAK,aAAW,EAAE,WAAU;AAAC,eAAK,eAAe,GAAEE,KAAE,MAAG,KAAK,YAAY,EAAE;AAAA,QAAC,GAAE,IAAI,GAAE,KAAK,iBAAe,EAAE,WAAU;AAAC,eAAK,OAAO,eAAe,QAAO,KAAK,WAAW,GAAE,KAAK,OAAO,eAAe,OAAM,KAAK,UAAU,GAAE,KAAK,OAAO,eAAe,SAAQ,KAAK,YAAY;AAAA,QAAC,GAAE,IAAI;AAAA,MAAC;AAArkC;AAAskC,eAAS,EAAEE,IAAE;AAAC,YAAID,IAAEE,IAAEC,IAAE,GAAEC,KAAE,KAAK,IAAI,GAAE,EAAE,GAAEC,KAAE,CAACD,IAAEE,KAAE,oDAAmDC,KAAE,sNAAqNT,KAAE,MAAKC,KAAE,GAAES,KAAE,GAAEC,KAAE,OAAG,IAAE,OAAGC,KAAE,CAAC,GAAEC,KAAE,EAAC,MAAK,CAAC,GAAE,QAAO,CAAC,GAAE,MAAK,CAAC,EAAC;AAAE,iBAASC,GAAEf,IAAE;AAAC,iBAAM,aAAWI,GAAE,iBAAe,OAAKJ,GAAE,KAAK,EAAE,EAAE,KAAK,IAAE,MAAIA,GAAE,UAAQ,MAAIA,GAAE,CAAC,EAAE;AAAA,QAAM;AAA3F,eAAAe,IAAA;AAA4F,iBAASC,KAAG;AAAC,cAAGF,MAAGR,OAAI,EAAE,aAAY,yBAAwB,+DAA6D,EAAE,mBAAiB,GAAG,GAAEA,KAAE,QAAIF,GAAE,mBAAiBU,GAAE,OAAKA,GAAE,KAAK,OAAO,SAASd,IAAE;AAAC,mBAAM,CAACe,GAAEf,EAAC;AAAA,UAAC,CAAC,IAAGiB,GAAE,GAAE;AAAuI,gBAASC,KAAT,SAAWlB,IAAEkB,IAAE;AAAC,gBAAEd,GAAE,eAAe,MAAIJ,KAAEI,GAAE,gBAAgBJ,IAAEkB,EAAC,IAAGL,GAAE,KAAKb,EAAC;AAAA,YAAC;AAAjE,gBAAAkB;AAAA,mBAAAA,IAAA;AAA/I,gBAAGJ,GAAE,KAAG,MAAM,QAAQA,GAAE,KAAK,CAAC,CAAC,GAAE;AAAC,uBAAQd,KAAE,GAAEiB,GAAE,KAAGjB,KAAEc,GAAE,KAAK,QAAOd,KAAI,CAAAc,GAAE,KAAKd,EAAC,EAAE,QAAQkB,EAAC;AAAE,cAAAJ,GAAE,KAAK,OAAO,GAAE,CAAC;AAAA,YAAC,MAAM,CAAAA,GAAE,KAAK,QAAQI,EAAC;AAAA,UAA6E;AAAC,mBAASjB,GAAED,IAAEkB,IAAE;AAAC,qBAAQjB,KAAEG,GAAE,SAAO,CAAC,IAAE,CAAC,GAAEF,KAAE,GAAEA,KAAEF,GAAE,QAAOE,MAAI;AAAC,kBAAIC,KAAED,IAAEG,KAAEL,GAAEE,EAAC,GAAEG,MAAG,CAACL,IAAEkB,QAAK,CAAAlB,QAAII,GAAE,yBAAuB,WAASA,GAAE,cAAcJ,EAAC,MAAII,GAAE,cAAcJ,EAAC,IAAEI,GAAE,sBAAsBJ,EAAC,IAAG,UAAMI,GAAE,cAAcJ,EAAC,KAAGI,GAAE,iBAAiBJ,EAAC,IAAE,WAASkB,MAAG,WAASA,MAAG,YAAUA,MAAG,YAAUA,QAAK,CAAAlB,OAAG;AAAC,oBAAGS,GAAE,KAAKT,EAAC,GAAE;AAAC,kBAAAA,KAAE,WAAWA,EAAC;AAAE,sBAAGQ,KAAER,MAAGA,KAAEO,GAAE,QAAO;AAAA,gBAAC;AAAA,cAAC,GAAGW,EAAC,IAAE,WAAWA,EAAC,IAAER,GAAE,KAAKQ,EAAC,IAAE,IAAI,KAAKA,EAAC,IAAE,OAAKA,KAAE,OAAKA,MAAGA,IAAGf,KAAEC,GAAE,SAAOF,MAAGW,GAAE,SAAO,mBAAiBA,GAAEX,EAAC,IAAEC,IAAEE,KAAED,GAAE,YAAUA,GAAE,UAAUC,IAAEF,EAAC,IAAEE,EAAC;AAAE,mCAAmBF,MAAGF,GAAEE,EAAC,IAAEF,GAAEE,EAAC,KAAG,CAAC,GAAEF,GAAEE,EAAC,EAAE,KAAKE,EAAC,KAAGJ,GAAEE,EAAC,IAAEE;AAAA,YAAC;AAAC,mBAAOD,GAAE,WAASF,KAAEW,GAAE,SAAO,EAAE,iBAAgB,iBAAgB,+BAA6BA,GAAE,SAAO,wBAAsBX,IAAES,KAAEO,EAAC,IAAEhB,KAAEW,GAAE,UAAQ,EAAE,iBAAgB,gBAAe,8BAA4BA,GAAE,SAAO,wBAAsBX,IAAES,KAAEO,EAAC,IAAGjB;AAAA,UAAC;AAA5wB,iBAAAA,IAAA;AAA6wB,cAAIC;AAAE,UAAAY,OAAIV,GAAE,UAAQA,GAAE,iBAAeA,GAAE,eAAaF,KAAE,GAAE,CAACY,GAAE,KAAK,UAAQ,MAAM,QAAQA,GAAE,KAAK,CAAC,CAAC,KAAGA,GAAE,OAAKA,GAAE,KAAK,IAAIb,EAAC,GAAEC,KAAEY,GAAE,KAAK,UAAQA,GAAE,OAAKb,GAAEa,GAAE,MAAK,CAAC,GAAEV,GAAE,UAAQU,GAAE,SAAOA,GAAE,KAAK,SAAOD,KAAGF,MAAGT;AAAA,QAAE;AAAn4C,eAAAc,IAAA;AAAo4C,iBAASC,KAAG;AAAC,iBAAOb,GAAE,UAAQ,MAAIS,GAAE;AAAA,QAAM;AAAjC,eAAAI,IAAA;AAAkC,iBAAS,EAAEjB,IAAEkB,IAAEjB,IAAEC,IAAE;AAAC,UAAAF,KAAE,EAAC,MAAKA,IAAE,MAAKkB,IAAE,SAAQjB,GAAC;AAAE,qBAASC,OAAIF,GAAE,MAAIE,KAAGY,GAAE,OAAO,KAAKd,EAAC;AAAA,QAAC;AAA7E;AAA8E,UAAEI,GAAE,IAAI,MAAI,IAAEA,GAAE,MAAKA,GAAE,OAAK,SAASJ,IAAE;AAAC,UAAAc,KAAEd,IAAEiB,GAAE,IAAED,GAAE,KAAGA,GAAE,GAAE,MAAIF,GAAE,KAAK,WAASZ,MAAGF,GAAE,KAAK,QAAOI,GAAE,WAASF,KAAEE,GAAE,UAAQC,GAAE,MAAM,KAAGS,GAAE,OAAKA,GAAE,KAAK,CAAC,GAAE,EAAEA,IAAEb,EAAC;AAAA,QAAI,IAAG,KAAK,QAAM,SAASD,IAAEkB,IAAEjB,IAAE;AAAC,cAAIC,KAAEE,GAAE,aAAW,KAAIF,MAAGE,GAAE,YAAUA,GAAE,UAAQ,KAAK,iBAAiBJ,IAAEE,EAAC,IAAGI,KAAE,OAAGF,GAAE,YAAU,EAAEA,GAAE,SAAS,MAAIA,GAAE,YAAUA,GAAE,UAAUJ,EAAC,GAAEc,GAAE,KAAK,YAAUV,GAAE,eAAaF,MAAG,CAACF,IAAEkB,IAAEjB,IAAEC,IAAEC,OAAI;AAAC,gBAAIE,IAAEC,IAAEC,IAAEC;AAAE,YAAAL,KAAEA,MAAG,CAAC,KAAI,KAAK,KAAI,KAAI,EAAE,YAAW,EAAE,QAAQ;AAAE,qBAAQM,KAAE,GAAEA,KAAEN,GAAE,QAAOM,MAAI;AAAC,uBAAQC,IAAEC,KAAER,GAAEM,EAAC,GAAEG,KAAE,GAAEC,KAAE,GAAEC,KAAE,GAAEE,MAAGT,KAAE,QAAO,IAAI,EAAE,EAAC,UAASL,IAAE,WAAUS,IAAE,SAAQO,IAAE,SAAQ,GAAE,CAAC,EAAE,MAAMlB,EAAC,IAAGiB,KAAE,GAAEA,KAAED,GAAE,KAAK,QAAOC,KAAI,CAAAhB,MAAGc,GAAEC,GAAE,KAAKC,EAAC,CAAC,IAAEH,QAAKJ,KAAEM,GAAE,KAAKC,EAAC,EAAE,QAAOJ,MAAGH,IAAE,WAASH,KAAEA,KAAEG,KAAE,IAAEA,OAAIE,MAAG,KAAK,IAAIF,KAAEH,EAAC,GAAEA,KAAEG;AAAI,kBAAEM,GAAE,KAAK,WAASH,MAAGG,GAAE,KAAK,SAAOF,MAAI,WAASR,MAAGM,MAAGN,QAAK,WAASE,MAAGA,KAAEK,OAAI,OAAKA,OAAIP,KAAEM,IAAEP,KAAEM,IAAEH,KAAEK;AAAA,YAAE;AAAC,mBAAM,EAAC,YAAW,CAAC,EAAET,GAAE,YAAUC,KAAG,eAAcA,GAAC;AAAA,UAAC,GAAGL,IAAEI,GAAE,SAAQA,GAAE,gBAAeA,GAAE,UAASA,GAAE,iBAAiB,GAAG,aAAWA,GAAE,YAAUF,GAAE,iBAAeI,KAAE,MAAGF,GAAE,YAAU,EAAE,mBAAkBU,GAAE,KAAK,YAAUV,GAAE,YAAW,EAAEA,EAAC;AAAG,iBAAOA,GAAE,WAASA,GAAE,UAAQF,GAAE,WAAUC,KAAEH,IAAEK,KAAE,IAAI,EAAEH,EAAC,GAAEY,KAAET,GAAE,MAAMF,IAAEe,IAAEjB,EAAC,GAAEe,GAAE,GAAEJ,KAAE,EAAC,MAAK,EAAC,QAAO,KAAE,EAAC,IAAEE,MAAG,EAAC,MAAK,EAAC,QAAO,MAAE,EAAC;AAAA,QAAC,GAAE,KAAK,SAAO,WAAU;AAAC,iBAAOF;AAAA,QAAC,GAAE,KAAK,QAAM,WAAU;AAAC,UAAAA,KAAE,MAAGP,GAAE,MAAM,GAAEF,KAAE,EAAEC,GAAE,KAAK,IAAE,KAAGD,GAAE,UAAUE,GAAE,aAAa,CAAC;AAAA,QAAC,GAAE,KAAK,SAAO,WAAU;AAAC,UAAAJ,GAAE,SAAS,WAASW,KAAE,OAAGX,GAAE,SAAS,WAAWE,IAAE,IAAE,KAAG,WAAWF,GAAE,QAAO,CAAC;AAAA,QAAC,GAAE,KAAK,UAAQ,WAAU;AAAC,iBAAO;AAAA,QAAC,GAAE,KAAK,QAAM,WAAU;AAAC,cAAE,MAAGI,GAAE,MAAM,GAAES,GAAE,KAAK,UAAQ,MAAG,EAAEV,GAAE,QAAQ,KAAGA,GAAE,SAASU,EAAC,GAAEX,KAAE;AAAA,QAAE,GAAE,KAAK,mBAAiB,SAASH,IAAEkB,IAAE;AAAC,UAAAlB,KAAEA,GAAE,UAAU,GAAE,OAAO;AAAE,cAAIkB,KAAE,IAAI,OAAO,EAAEA,EAAC,IAAE,YAAU,EAAEA,EAAC,GAAE,IAAI,GAAEjB,MAAGD,KAAEA,GAAE,QAAQkB,IAAE,EAAE,GAAG,MAAM,IAAI,GAAEA,KAAElB,GAAE,MAAM,IAAI,GAAEA,KAAE,IAAEkB,GAAE,UAAQA,GAAE,CAAC,EAAE,SAAOjB,GAAE,CAAC,EAAE;AAAO,cAAG,MAAIA,GAAE,UAAQD,GAAE,QAAM;AAAK,mBAAQE,KAAE,GAAEC,KAAE,GAAEA,KAAEF,GAAE,QAAOE,KAAI,UAAOF,GAAEE,EAAC,EAAE,CAAC,KAAGD;AAAI,iBAAOA,MAAGD,GAAE,SAAO,IAAE,SAAO;AAAA,QAAI;AAAA,MAAC;AAA/sH;AAAgtH,eAAS,EAAE,GAAE;AAAC,eAAO,EAAE,QAAQ,uBAAsB,MAAM;AAAA,MAAC;AAAnD;AAAoD,eAAS,EAAE,GAAE;AAAC,YAAI,KAAG,IAAE,KAAG,CAAC,GAAG,WAAU,IAAE,EAAE,SAAQ,IAAE,EAAE,UAAS,IAAE,EAAE,MAAK,IAAE,EAAE,SAAQ,IAAE,EAAE,UAAS,IAAE,MAAK,IAAE,OAAG,IAAE,QAAM,EAAE,YAAU,MAAI,EAAE,WAAU,IAAE;AAAE,YAAG,WAAS,EAAE,eAAa,IAAE,EAAE,cAAa,YAAU,OAAO,KAAG,KAAG,EAAE,eAAe,QAAQ,CAAC,OAAK,IAAE,MAAK,MAAI,EAAE,OAAM,IAAI,MAAM,qCAAqC;AAAE,iBAAK,IAAE,IAAE,OAAK,YAAU,OAAO,KAAG,KAAG,EAAE,eAAe,QAAQ,CAAC,OAAK,IAAE,QAAI,SAAO,KAAG,SAAO,KAAG,WAAS,MAAI,IAAE;AAAM,YAAI,IAAE,GAAE,IAAE;AAAG,aAAK,QAAM,SAASA,IAAE,GAAEC,IAAE;AAAC,cAAG,YAAU,OAAOD,GAAE,OAAM,IAAI,MAAM,wBAAwB;AAAE,cAAIE,KAAEF,GAAE,QAAO,IAAE,EAAE,QAAOI,KAAE,EAAE,QAAOC,KAAE,EAAE,QAAOC,KAAE,EAAE,CAAC,GAAEC,KAAE,CAAC,GAAEC,KAAE,CAAC,GAAEC,KAAE,CAAC,GAAEC,KAAE,IAAE;AAAE,cAAG,CAACV,GAAE,QAAO,EAAE;AAAE,cAAG,KAAG,UAAK,KAAG,OAAKA,GAAE,QAAQ,CAAC,GAAE;AAAC,qBAAQW,KAAEX,GAAE,MAAM,CAAC,GAAEY,KAAE,GAAEA,KAAED,GAAE,QAAOC,MAAI;AAAC,kBAAGH,KAAEE,GAAEC,EAAC,GAAE,KAAGH,GAAE,QAAOG,OAAID,GAAE,SAAO,EAAE,MAAG,EAAE;AAAA,uBAAeV,GAAE,QAAO,EAAE;AAAE,kBAAG,CAAC,KAAGQ,GAAE,UAAU,GAAEJ,EAAC,MAAI,GAAE;AAAC,oBAAGC,IAAE;AAAC,sBAAGC,KAAE,CAAC,GAAE,EAAEE,GAAE,MAAM,CAAC,CAAC,GAAE,EAAE,GAAE,EAAE,QAAO,EAAE;AAAA,gBAAC,MAAM,GAAEA,GAAE,MAAM,CAAC,CAAC;AAAE,oBAAG,KAAG,KAAGG,GAAE,QAAOL,KAAEA,GAAE,MAAM,GAAE,CAAC,GAAE,EAAE,IAAE;AAAA,cAAC;AAAA,YAAC;AAAC,mBAAO,EAAE;AAAA,UAAC;AAAC,mBAAQM,KAAEb,GAAE,QAAQ,GAAE,CAAC,GAAEe,KAAEf,GAAE,QAAQ,GAAE,CAAC,GAAEgB,KAAE,IAAI,OAAO,EAAE,CAAC,IAAE,EAAE,CAAC,GAAE,GAAG,GAAEb,KAAEH,GAAE,QAAQ,GAAE,CAAC,MAAI,KAAGA,GAAE,CAAC,MAAI,EAAE,MAAIG,KAAE,GAAE,SAAM;AAAC,gBAAG,QAAMA,KAAEH,GAAE,QAAQ,GAAEG,KAAE,CAAC,GAAG,QAAOF,MAAGO,GAAE,KAAK,EAAC,MAAK,UAAS,MAAK,iBAAgB,SAAQ,6BAA4B,KAAID,GAAE,QAAO,OAAM,EAAC,CAAC,GAAEW,GAAE;AAAE,gBAAGf,OAAID,KAAE,EAAE,QAAOgB,GAAElB,GAAE,UAAU,GAAEG,EAAC,EAAE,QAAQa,IAAE,CAAC,CAAC;AAAE,gBAAG,MAAI,KAAGhB,GAAEG,KAAE,CAAC,MAAI,EAAE,CAAAA;AAAA,qBAAY,MAAI,KAAG,MAAIA,MAAGH,GAAEG,KAAE,CAAC,MAAI,GAAE;AAAC,qBAAKU,MAAGA,KAAEV,KAAE,MAAIU,KAAEb,GAAE,QAAQ,GAAEG,KAAE,CAAC;AAAG,kBAAIW,KAAEK,GAAE,QAAMJ,KAAE,OAAKA,MAAGA,KAAEZ,KAAE,IAAEH,GAAE,QAAQ,GAAEG,KAAE,CAAC,IAAEY,MAAGF,KAAE,KAAK,IAAIA,IAAEE,EAAC,CAAC;AAAE,kBAAGf,GAAE,OAAOG,KAAE,IAAEW,IAAE,CAAC,MAAI,GAAE;AAAC,gBAAAL,GAAE,KAAKT,GAAE,UAAU,GAAEG,EAAC,EAAE,QAAQa,IAAE,CAAC,CAAC,GAAEhB,GAAE,IAAEG,KAAE,IAAEW,KAAE,CAAC,MAAI,MAAIX,KAAEH,GAAE,QAAQ,GAAE,CAAC,IAAGa,KAAEb,GAAE,QAAQ,GAAE,CAAC,GAAEe,KAAEf,GAAE,QAAQ,GAAE,CAAC;AAAE;AAAA,cAAK;AAAC,cAAAc,KAAEK,GAAEJ,EAAC;AAAE,kBAAGf,GAAE,UAAUG,KAAE,IAAEW,IAAEX,KAAE,IAAEW,KAAEV,EAAC,MAAI,GAAE;AAAC,oBAAGK,GAAE,KAAKT,GAAE,UAAU,GAAEG,EAAC,EAAE,QAAQa,IAAE,CAAC,CAAC,GAAEI,GAAEjB,KAAE,IAAEW,KAAEV,EAAC,GAAES,KAAEb,GAAE,QAAQ,GAAE,CAAC,GAAEG,KAAEH,GAAE,QAAQ,GAAE,CAAC,GAAEM,OAAI,EAAE,GAAE,GAAG,QAAO,EAAE;AAAE,oBAAG,KAAGC,GAAE,UAAQ,EAAE,QAAO,EAAE,IAAE;AAAE;AAAA,cAAK;AAAC,cAAAC,GAAE,KAAK,EAAC,MAAK,UAAS,MAAK,iBAAgB,SAAQ,+CAA8C,KAAID,GAAE,QAAO,OAAM,EAAC,CAAC,GAAEJ;AAAA,YAAG;AAAA,UAAC;AAAA,mBAAS,KAAG,MAAIM,GAAE,UAAQT,GAAE,UAAU,GAAE,IAAEK,EAAC,MAAI,GAAE;AAAC,gBAAG,OAAKU,GAAE,QAAO,EAAE;AAAE,gBAAEA,KAAEX,IAAEW,KAAEf,GAAE,QAAQ,GAAE,CAAC,GAAEa,KAAEb,GAAE,QAAQ,GAAE,CAAC;AAAA,UAAC,WAAS,OAAKa,OAAIA,KAAEE,MAAG,OAAKA,IAAG,CAAAN,GAAE,KAAKT,GAAE,UAAU,GAAEa,EAAC,CAAC,GAAE,IAAEA,KAAE,GAAEA,KAAEb,GAAE,QAAQ,GAAE,CAAC;AAAA,eAAM;AAAC,gBAAG,OAAKe,GAAE;AAAM,gBAAGN,GAAE,KAAKT,GAAE,UAAU,GAAEe,EAAC,CAAC,GAAEK,GAAEL,KAAEX,EAAC,GAAEE,OAAI,EAAE,GAAE,GAAG,QAAO,EAAE;AAAE,gBAAG,KAAGC,GAAE,UAAQ,EAAE,QAAO,EAAE,IAAE;AAAA,UAAC;AAAC,iBAAOW,GAAE;AAAE,mBAAS,EAAEnB,IAAE;AAAC,YAAAQ,GAAE,KAAKR,EAAC,GAAEW,KAAE;AAAA,UAAC;AAAlB;AAAmB,mBAASS,GAAEpB,IAAE;AAAC,gBAAIkB,KAAE;AAAE,mBAAOA,KAAE,OAAKlB,OAAIA,KAAEC,GAAE,UAAUG,KAAE,GAAEJ,EAAC,MAAI,OAAKA,GAAE,KAAK,IAAEA,GAAE,SAAOkB;AAAA,UAAC;AAA9E,iBAAAE,IAAA;AAA+E,mBAASD,GAAEnB,IAAE;AAAC,mBAAOE,OAAI,WAASF,OAAIA,KAAEC,GAAE,UAAU,CAAC,IAAGS,GAAE,KAAKV,EAAC,GAAE,IAAEG,IAAE,EAAEO,EAAC,GAAEH,MAAG,EAAE,IAAG,EAAE;AAAA,UAAC;AAA7E,iBAAAY,IAAA;AAA8E,mBAASE,GAAErB,IAAE;AAAC,gBAAEA,IAAE,EAAEU,EAAC,GAAEA,KAAE,CAAC,GAAEM,KAAEf,GAAE,QAAQ,GAAE,CAAC;AAAA,UAAC;AAAnC,iBAAAoB,IAAA;AAAoC,mBAAS,EAAErB,IAAE;AAAC,gBAAG,EAAE,UAAQ,CAAC,KAAGQ,GAAE,UAAQ,CAAC,GAAE;AAAC,kBAAIH,KAAEG,GAAE,CAAC,GAAEF,KAAE,uBAAO,OAAO,IAAI,GAAEC,KAAE,IAAI,IAAIF,EAAC;AAAE,kBAAIF,KAAE;AAAG,uBAAQD,KAAE,GAAEA,KAAEG,GAAE,QAAOH,MAAI;AAAC,oBAAID,KAAEI,GAAEH,EAAC;AAAE,oBAAGI,GAAEL,KAAE,EAAE,EAAE,eAAe,IAAE,EAAE,gBAAgBA,IAAEC,EAAC,IAAED,EAAC,GAAE;AAAC,sBAAID,IAAEkB,KAAEZ,GAAEL,EAAC;AAAE,yBAAKD,KAAEC,KAAE,MAAIiB,IAAEA,MAAIX,GAAE,IAAIP,EAAC,IAAG;AAAC,kBAAAO,GAAE,IAAIP,EAAC,GAAEK,GAAEH,EAAC,IAAEF,IAAEM,GAAEL,EAAC,KAAIE,KAAE,OAAI,IAAE,SAAO,IAAE,CAAC,IAAE,GAAGH,EAAC,IAAEC;AAAA,gBAAC,MAAM,CAAAK,GAAEL,EAAC,IAAE,GAAEI,GAAEH,EAAC,IAAED;AAAE,gBAAAM,GAAE,IAAIN,EAAC;AAAA,cAAC;AAAC,cAAAE,MAAG,QAAQ,KAAK,sCAAsC,GAAE,IAAE;AAAA,YAAE;AAAC,mBAAM,EAAC,MAAKK,IAAE,QAAOC,IAAE,MAAK,EAAC,WAAU,GAAE,WAAU,GAAE,SAAQ,GAAE,WAAU,CAAC,CAACT,IAAE,QAAOW,MAAG,KAAG,IAAG,gBAAe,EAAC,EAAC;AAAA,UAAC;AAA/d;AAAge,mBAAS,IAAG;AAAC,cAAE,EAAE,CAAC,GAAEH,KAAE,CAAC,GAAEC,KAAE,CAAC;AAAA,UAAC;AAApB;AAAA,QAAqB,GAAE,KAAK,QAAM,WAAU;AAAC,cAAE;AAAA,QAAE,GAAE,KAAK,eAAa,WAAU;AAAC,iBAAO;AAAA,QAAC;AAAA,MAAC;AAAl6F;AAAm6F,eAAS,EAAE,GAAE;AAAC,YAAI,IAAE,EAAE,MAAKR,KAAE,EAAE,EAAE,QAAQ,GAAEC,KAAE;AAAG,YAAG,EAAE,MAAM,CAAAD,GAAE,UAAU,EAAE,OAAM,EAAE,IAAI;AAAA,iBAAU,EAAE,WAAS,EAAE,QAAQ,MAAK;AAAC,cAAIE,KAAE,EAAC,OAAM,kCAAU;AAAC,YAAAD,KAAE,MAAG,EAAE,EAAE,UAAS,EAAC,MAAK,CAAC,GAAE,QAAO,CAAC,GAAE,MAAK,EAAC,SAAQ,KAAE,EAAC,CAAC;AAAA,UAAC,GAAnE,UAAqE,OAAM,GAAE,QAAO,EAAC;AAAE,cAAG,EAAED,GAAE,QAAQ,GAAE;AAAC,qBAAQI,KAAE,GAAEA,KAAE,EAAE,QAAQ,KAAK,WAASJ,GAAE,SAAS,EAAC,MAAK,EAAE,QAAQ,KAAKI,EAAC,GAAE,QAAO,EAAE,QAAQ,QAAO,MAAK,EAAE,QAAQ,KAAI,GAAEF,EAAC,GAAE,CAACD,KAAGG,KAAI;AAAC,mBAAO,EAAE;AAAA,UAAO,MAAM,GAAEJ,GAAE,SAAS,MAAIA,GAAE,UAAU,EAAE,SAAQE,IAAE,EAAE,IAAI,GAAE,OAAO,EAAE;AAAA,QAAQ;AAAC,UAAE,YAAU,CAACD,MAAG,EAAE,EAAE,UAAS,EAAE,OAAO;AAAA,MAAC;AAAze;AAA0e,eAAS,EAAE,GAAE,GAAE;AAAC,YAAID,KAAE,EAAE,CAAC;AAAE,UAAEA,GAAE,YAAY,KAAGA,GAAE,aAAa,CAAC,GAAEA,GAAE,UAAU,GAAE,OAAO,EAAE,CAAC;AAAA,MAAC;AAAhF;AAAiF,eAAS,IAAG;AAAC,cAAM,IAAI,MAAM,kBAAkB;AAAA,MAAC;AAAvC;AAAwC,eAAS,EAAE,GAAE;AAAC,YAAG,YAAU,OAAO,KAAG,SAAO,EAAE,QAAO;AAAE,YAAI,GAAEA,KAAE,MAAM,QAAQ,CAAC,IAAE,CAAC,IAAE,CAAC;AAAE,aAAI,KAAK,EAAE,CAAAA,GAAE,CAAC,IAAE,EAAE,EAAE,CAAC,CAAC;AAAE,eAAOA;AAAA,MAAC;AAA7G;AAA8G,eAAS,EAAE,GAAE,GAAE;AAAC,eAAO,WAAU;AAAC,YAAE,MAAM,GAAE,SAAS;AAAA,QAAC;AAAA,MAAC;AAA9C;AAA+C,eAAS,EAAE,GAAE;AAAC,eAAM,cAAY,OAAO;AAAA,MAAC;AAA/B;AAAgC,aAAO,EAAE,QAAM,SAAS,GAAE,GAAE;AAAC,YAAIA,MAAG,IAAE,KAAG,CAAC,GAAG,iBAAe;AAAG,UAAEA,EAAC,MAAI,EAAE,wBAAsBA,IAAEA,KAAE,CAAC;AAAG,YAAG,EAAE,gBAAcA,IAAE,EAAE,YAAU,CAAC,CAAC,EAAE,EAAE,SAAS,KAAG,EAAE,WAAU,CAAC,EAAE,UAAQ,CAAC,EAAE,kBAAkB,QAAOA,KAAE,MAAK,EAAE,mBAAkB,YAAU,OAAO,KAAG,KAAG,CAAAD,OAAG,UAAQA,GAAE,WAAW,CAAC,IAAEA,KAAEA,GAAE,MAAM,CAAC,GAAG,CAAC,GAAEC,KAAE,KAAI,EAAE,WAAS,IAAE,GAAG,CAAC,KAAG,SAAK,EAAE,YAAU,EAAE,EAAE,IAAI,KAAG,EAAE,EAAE,EAAE,IAAEA,KAAE,IAAI,EAAE,CAAC,KAAG,EAAE,QAAM,aAAa,QAAM,aAAa,YAAUA,KAAE,IAAI,EAAE,CAAC,IAAGA,GAAE,OAAO,CAAC;AAAE,SAACA,MAAG,MAAI;AAAC,cAAID;AAAE,iBAAM,CAAC,CAAC,EAAE,sBAAoBA,MAAG,MAAI;AAAC,gBAAIA,KAAE,EAAE,OAAK,EAAE,aAAW,MAAKkB,KAAE,EAAE,SAAS;AAAE,mBAAO,EAAE,aAAW,EAAE,WAASlB,GAAE,gBAAgB,IAAI,KAAK,CAAC,0OAAyO,KAAIkB,IAAE,MAAM,GAAE,EAAC,MAAK,kBAAiB,CAAC,CAAC;AAAA,UAAE,GAAG,IAAGlB,KAAE,IAAI,EAAE,OAAOA,EAAC,GAAG,YAAU,GAAEA,GAAE,KAAG,KAAI,EAAEA,GAAE,EAAE,IAAEA;AAAA,QAAE,GAAG,GAAG,WAAS,EAAE,MAAKC,GAAE,YAAU,EAAE,OAAMA,GAAE,eAAa,EAAE,UAASA,GAAE,YAAU,EAAE,OAAM,EAAE,OAAK,EAAE,EAAE,IAAI,GAAE,EAAE,QAAM,EAAE,EAAE,KAAK,GAAE,EAAE,WAAS,EAAE,EAAE,QAAQ,GAAE,EAAE,QAAM,EAAE,EAAE,KAAK,GAAE,OAAO,EAAE,QAAOA,GAAE,YAAY,EAAC,OAAM,GAAE,QAAO,GAAE,UAASA,GAAE,GAAE,CAAC;AAAA,MAAC,GAAE,EAAE,UAAQ,SAAS,GAAE,GAAE;AAAC,YAAIE,KAAE,OAAGc,KAAE,MAAGb,KAAE,KAAIW,KAAE,QAAOV,KAAE,KAAIC,KAAED,KAAEA,IAAEJ,KAAE,OAAGC,KAAE,MAAKK,KAAE,OAAGC,OAAI,MAAI;AAAC,cAAG,YAAU,OAAO,GAAE;AAAC,gBAAG,YAAU,OAAO,EAAE,aAAW,EAAE,eAAe,OAAO,SAASR,IAAE;AAAC,qBAAM,OAAK,EAAE,UAAU,QAAQA,EAAC;AAAA,YAAC,CAAC,EAAE,WAASI,KAAE,EAAE,YAAW,aAAW,OAAO,EAAE,UAAQ,cAAY,OAAO,EAAE,UAAQ,CAAC,MAAM,QAAQ,EAAE,MAAM,MAAID,KAAE,EAAE,SAAQ,aAAW,OAAO,EAAE,kBAAgB,YAAU,OAAO,EAAE,mBAAiBF,KAAE,EAAE,iBAAgB,YAAU,OAAO,EAAE,YAAUc,KAAE,EAAE,UAAS,YAAU,OAAO,EAAE,cAAYV,KAAE,EAAE,YAAW,aAAW,OAAO,EAAE,WAASY,KAAE,EAAE,SAAQ,MAAM,QAAQ,EAAE,OAAO,GAAE;AAAC,kBAAG,MAAI,EAAE,QAAQ,OAAO,OAAM,IAAI,MAAM,yBAAyB;AAAE,cAAAf,KAAE,EAAE;AAAA,YAAO;AAAC,uBAAS,EAAE,eAAaI,KAAE,EAAE,aAAWD,KAAG,EAAE,0BAA0B,SAAOE,KAAE,EAAE,iBAAe,aAAW,OAAO,EAAE,kBAAgB,EAAE,mBAAiBA,KAAE;AAAA,UAAkB;AAAA,QAAC,GAAG,GAAE,IAAI,OAAO,EAAEF,EAAC,GAAE,GAAG;AAAG,oBAAU,OAAO,MAAI,IAAE,KAAK,MAAM,CAAC;AAAG,YAAG,MAAM,QAAQ,CAAC,GAAE;AAAC,cAAG,CAAC,EAAE,UAAQ,MAAM,QAAQ,EAAE,CAAC,CAAC,EAAE,QAAOI,GAAE,MAAK,GAAER,EAAC;AAAE,cAAG,YAAU,OAAO,EAAE,CAAC,EAAE,QAAOQ,GAAEP,MAAG,OAAO,KAAK,EAAE,CAAC,CAAC,GAAE,GAAED,EAAC;AAAA,QAAC,WAAS,YAAU,OAAO,EAAE,QAAM,YAAU,OAAO,EAAE,SAAO,EAAE,OAAK,KAAK,MAAM,EAAE,IAAI,IAAG,MAAM,QAAQ,EAAE,IAAI,MAAI,EAAE,WAAS,EAAE,SAAO,EAAE,QAAM,EAAE,KAAK,UAAQC,KAAG,EAAE,WAAS,EAAE,SAAO,MAAM,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAE,EAAE,SAAO,YAAU,OAAO,EAAE,KAAK,CAAC,IAAE,OAAO,KAAK,EAAE,KAAK,CAAC,CAAC,IAAE,CAAC,IAAG,MAAM,QAAQ,EAAE,KAAK,CAAC,CAAC,KAAG,YAAU,OAAO,EAAE,KAAK,CAAC,MAAI,EAAE,OAAK,CAAC,EAAE,IAAI,KAAIO,GAAE,EAAE,UAAQ,CAAC,GAAE,EAAE,QAAM,CAAC,GAAER,EAAC;AAAE,cAAM,IAAI,MAAM,wCAAwC;AAAE,iBAASQ,GAAET,IAAEkB,IAAEjB,IAAE;AAAC,cAAIC,KAAE,IAAGC,MAAG,YAAU,OAAOH,OAAIA,KAAE,KAAK,MAAMA,EAAC,IAAG,YAAU,OAAOkB,OAAIA,KAAE,KAAK,MAAMA,EAAC,IAAG,MAAM,QAAQlB,EAAC,KAAG,IAAEA,GAAE,SAAQK,KAAE,CAAC,MAAM,QAAQa,GAAE,CAAC,CAAC;AAAE,cAAGf,MAAGc,IAAE;AAAC,qBAAQX,KAAE,GAAEA,KAAEN,GAAE,QAAOM,KAAI,KAAEA,OAAIJ,MAAGE,KAAGF,MAAG,EAAEF,GAAEM,EAAC,GAAEA,EAAC;AAAE,gBAAEY,GAAE,WAAShB,MAAGa;AAAA,UAAE;AAAC,mBAAQR,KAAE,GAAEA,KAAEW,GAAE,QAAOX,MAAI;AAAC,gBAAIC,MAAGL,KAAEH,KAAEkB,GAAEX,EAAC,GAAG,QAAOE,KAAE,OAAGC,KAAEP,KAAE,MAAI,OAAO,KAAKe,GAAEX,EAAC,CAAC,EAAE,SAAO,MAAIW,GAAEX,EAAC,EAAE;AAAO,gBAAGN,MAAG,CAACE,OAAIM,KAAE,aAAWR,KAAE,OAAKiB,GAAEX,EAAC,EAAE,KAAK,EAAE,EAAE,KAAK,IAAE,MAAIW,GAAEX,EAAC,EAAE,UAAQ,MAAIW,GAAEX,EAAC,EAAE,CAAC,EAAE,SAAQ,aAAWN,MAAGE,IAAE;AAAC,uBAAQQ,KAAE,CAAC,GAAEC,KAAE,GAAEA,KAAEJ,IAAEI,MAAI;AAAC,oBAAIC,KAAER,KAAEL,GAAEY,EAAC,IAAEA;AAAE,gBAAAD,GAAE,KAAKO,GAAEX,EAAC,EAAEM,EAAC,CAAC;AAAA,cAAC;AAAC,cAAAJ,KAAE,OAAKE,GAAE,KAAK,EAAE,EAAE,KAAK;AAAA,YAAC;AAAC,gBAAG,CAACF,IAAE;AAAC,uBAAQK,KAAE,GAAEA,KAAEN,IAAEM,MAAI;AAAC,oBAAEA,MAAG,CAACJ,OAAIR,MAAGE;AAAG,oBAAIY,KAAEb,MAAGE,KAAEL,GAAEc,EAAC,IAAEA;AAAE,gBAAAZ,MAAG,EAAEgB,GAAEX,EAAC,EAAES,EAAC,GAAEF,EAAC;AAAA,cAAC;AAAC,cAAAP,KAAEW,GAAE,SAAO,MAAI,CAACjB,MAAG,IAAEO,MAAG,CAACE,QAAKR,MAAGa;AAAA,YAAE;AAAA,UAAC;AAAC,iBAAOb;AAAA,QAAC;AAAvoB,eAAAO,IAAA;AAAwoB,iBAAS,EAAET,IAAEkB,IAAE;AAAC,cAAIjB,IAAEC;AAAE,iBAAO,QAAMF,KAAE,KAAGA,GAAE,gBAAc,OAAK,KAAK,UAAUA,EAAC,EAAE,MAAM,GAAE,EAAE,KAAGE,KAAE,OAAGK,MAAG,YAAU,OAAOP,MAAGO,GAAE,KAAKP,EAAC,MAAIA,KAAE,MAAIA,IAAEE,KAAE,OAAID,KAAED,GAAE,SAAS,EAAE,QAAQQ,IAAEF,EAAC,IAAGJ,KAAEA,MAAG,SAAKC,MAAG,cAAY,OAAOA,MAAGA,GAAEH,IAAEkB,EAAC,KAAG,MAAM,QAAQf,EAAC,KAAGA,GAAEe,EAAC,MAAI,CAAClB,IAAEkB,OAAI;AAAC,qBAAQjB,KAAE,GAAEA,KAAEiB,GAAE,QAAOjB,KAAI,KAAG,KAAGD,GAAE,QAAQkB,GAAEjB,EAAC,CAAC,EAAE,QAAM;AAAG,mBAAM;AAAA,UAAE,GAAGA,IAAE,EAAE,cAAc,KAAG,KAAGA,GAAE,QAAQG,EAAC,KAAG,QAAMH,GAAE,OAAO,CAAC,KAAG,QAAMA,GAAE,OAAOA,GAAE,SAAO,CAAC,KAAGI,KAAEJ,KAAEI,KAAEJ;AAAA,QAAE;AAAtZ;AAAA,MAAuZ,GAAE,EAAE,aAAW,OAAO,aAAa,EAAE,GAAE,EAAE,WAAS,OAAO,aAAa,EAAE,GAAE,EAAE,kBAAgB,UAAS,EAAE,iBAAe,CAAC,MAAK,MAAK,KAAI,EAAE,eAAe,GAAE,EAAE,oBAAkB,CAAC,KAAG,CAAC,CAAC,EAAE,QAAO,EAAE,oBAAkB,GAAE,EAAE,iBAAe,UAAS,EAAE,kBAAgB,SAAQ,EAAE,mBAAiB,KAAI,EAAE,SAAO,GAAE,EAAE,eAAa,GAAE,EAAE,kBAAgB,GAAE,EAAE,eAAa,GAAE,EAAE,iBAAe,GAAE,EAAE,yBAAuB,GAAE,EAAE,YAAU,IAAE,EAAE,QAAQ,GAAG,QAAM,SAASM,IAAE;AAAC,YAAIN,KAAEM,GAAE,UAAQ,CAAC,GAAEC,KAAE,CAAC;AAAE,eAAO,KAAK,KAAK,SAASR,IAAE;AAAC,cAAG,EAAE,YAAU,EAAE,IAAI,EAAE,KAAK,SAAS,EAAE,YAAY,KAAG,WAAS,EAAE,IAAI,EAAE,KAAK,MAAM,EAAE,YAAY,KAAG,EAAE,eAAa,CAAC,KAAK,SAAO,MAAI,KAAK,MAAM,OAAO,QAAM;AAAG,mBAAQ,IAAE,GAAE,IAAE,KAAK,MAAM,QAAO,IAAI,CAAAQ,GAAE,KAAK,EAAC,MAAK,KAAK,MAAM,CAAC,GAAE,WAAU,MAAK,gBAAe,EAAE,OAAO,CAAC,GAAEP,EAAC,EAAC,CAAC;AAAA,QAAC,CAAC,GAAE,EAAE,GAAE;AAAK,iBAAS,IAAG;AAAC,cAAG,MAAIO,GAAE,OAAO,GAAED,GAAE,QAAQ,KAAGA,GAAE,SAAS;AAAA,eAAM;AAAC,gBAAIP,IAAE,GAAEC,IAAEC,IAAEC,KAAEK,GAAE,CAAC;AAAE,gBAAG,EAAED,GAAE,MAAM,GAAE;AAAC,kBAAIF,KAAEE,GAAE,OAAOJ,GAAE,MAAKA,GAAE,SAAS;AAAE,kBAAG,YAAU,OAAOE,IAAE;AAAC,oBAAG,YAAUA,GAAE,OAAO,QAAOL,KAAE,cAAa,IAAEG,GAAE,MAAKF,KAAEE,GAAE,WAAUD,KAAEG,GAAE,QAAO,MAAK,EAAEE,GAAE,KAAK,KAAGA,GAAE,MAAM,EAAC,MAAKP,GAAC,GAAE,GAAEC,IAAEC,EAAC;AAAG,oBAAG,WAASG,GAAE,OAAO,QAAO,KAAKI,GAAE;AAAE,4BAAU,OAAOJ,GAAE,WAASF,GAAE,iBAAe,EAAE,OAAOA,GAAE,gBAAeE,GAAE,MAAM;AAAA,cAAE,WAAS,WAASA,GAAE,QAAO,KAAKI,GAAE;AAAA,YAAC;AAAC,gBAAIH,KAAEH,GAAE,eAAe;AAAS,YAAAA,GAAE,eAAe,WAAS,SAASH,IAAE;AAAC,gBAAEM,EAAC,KAAGA,GAAEN,IAAEG,GAAE,MAAKA,GAAE,SAAS,GAAEM,GAAE;AAAA,YAAC,GAAE,EAAE,MAAMN,GAAE,MAAKA,GAAE,cAAc;AAAA,UAAC;AAAA,QAAC;AAA9iB;AAA+iB,iBAASM,KAAG;AAAC,UAAAD,GAAE,OAAO,GAAE,CAAC,GAAE,EAAE;AAAA,QAAC;AAArB,eAAAC,IAAA;AAAA,MAAsB,IAAG,MAAI,EAAE,YAAU,SAAS,GAAE;AAAC,YAAE,EAAE;AAAK,mBAAS,EAAE,aAAW,MAAI,EAAE,YAAU,EAAE;AAAU,oBAAU,OAAO,EAAE,QAAM,EAAE,YAAY,EAAC,UAAS,EAAE,WAAU,SAAQ,EAAE,MAAM,EAAE,OAAM,EAAE,MAAM,GAAE,UAAS,KAAE,CAAC,KAAG,EAAE,QAAM,EAAE,iBAAiB,QAAM,EAAE,iBAAiB,YAAU,IAAE,EAAE,MAAM,EAAE,OAAM,EAAE,MAAM,MAAI,EAAE,YAAY,EAAC,UAAS,EAAE,WAAU,SAAQ,GAAE,UAAS,KAAE,CAAC;AAAA,MAAC,KAAI,EAAE,YAAU,OAAO,OAAO,EAAE,SAAS,GAAG,cAAY,IAAG,EAAE,YAAU,OAAO,OAAO,EAAE,SAAS,GAAG,cAAY,IAAG,EAAE,YAAU,OAAO,OAAO,EAAE,SAAS,GAAG,cAAY,IAAG,EAAE,YAAU,OAAO,OAAO,EAAE,SAAS,GAAG,cAAY,GAAE;AAAA,IAAC,GAAjvlB,IAAkvlB;AAAA;AAAA;;;ACNx4lB,WAAsB;;;ACAf,IAAM,iBAAiB;AAAA,EAC5B,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+Bf,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCpB,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCpB;;;ACjGO,SAAS,eAAuB;AACrC,SAAO,uCAAuC,QAAQ,SAAS,SAAS,GAAG;AACzE,UAAM,IAAI,KAAK,OAAO,IAAI,KAAK;AAC/B,UAAM,IAAI,KAAK,MAAM,IAAK,IAAI,IAAM;AACpC,WAAO,EAAE,SAAS,EAAE;AAAA,EACtB,CAAC;AACH;AANgB;AAQT,SAAS,YAAY,MAA6B;AACvD,MAAI,KAAK,WAAW,EAAG,QAAO,CAAC;AAE/B,QAAM,WAAW,KAAK,CAAC;AACvB,QAAM,SAAyB,CAAC;AAEhC,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACnD,QAAI,OAAO;AAEX,QAAI,OAAO,UAAU,YAAY,CAAC,MAAM,OAAO,KAAK,CAAC,GAAG;AACtD,aAAO;AAAA,IACT,WAAW,OAAO,UAAU,aAAa,UAAU,UAAU,UAAU,SAAS;AAC9E,aAAO;AAAA,IACT,WAAW,SAAS,OAAO,UAAU,YAAY,CAAC,MAAM,KAAK,MAAM,KAAK,CAAC,GAAG;AAC1E,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,qBAAqB,MAAM,KAAK,IAAI;AAClD,WAAO,KAAK,EAAE,MAAM,KAAK,MAAM,MAAM,CAAC;AAAA,EACxC;AAEA,SAAO;AACT;AAtBgB;AAwBT,SAAS,qBAAqB,MAAa,YAAoB,MAA2B;AAC/F,QAAM,SAAS,KAAK,IAAI,SAAO,IAAI,UAAU,CAAC,EAAE,OAAO,SAAO,QAAQ,QAAQ,QAAQ,UAAa,QAAQ,EAAE;AAC7G,QAAM,YAAY,KAAK,SAAS,OAAO;AACvC,QAAM,eAAe,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC;AAExC,QAAM,QAAqB;AAAA,IACzB,OAAO,OAAO;AAAA,IACd;AAAA,IACA,aAAa,aAAa;AAAA,EAC5B;AAEA,MAAI,SAAS,UAAU;AACrB,UAAM,YAAY,OAAO,IAAI,OAAK,OAAO,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAClE,QAAI,UAAU,SAAS,GAAG;AACxB,YAAM,MAAM,KAAK,IAAI,GAAG,SAAS;AACjC,YAAM,MAAM,KAAK,IAAI,GAAG,SAAS;AACjC,YAAM,OAAO,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,UAAU;AAE9D,YAAM,SAAS,CAAC,GAAG,SAAS,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAClD,YAAM,MAAM,KAAK,MAAM,OAAO,SAAS,CAAC;AACxC,YAAM,SAAS,OAAO,SAAS,MAAM,KAAK,OAAO,MAAM,CAAC,IAAI,OAAO,GAAG,KAAK,IAAI,OAAO,GAAG;AAEzF,YAAM,WAAW,UAAU,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,IAAI,MAAM,MAAM,MAAO,CAAC,GAAG,CAAC,IAAI,UAAU;AACrG,YAAM,SAAS,KAAK,KAAK,QAAQ;AAAA,IACnC;AAAA,EACF,OAAO;AACL,UAAM,cAAc,OAAO,OAAO,CAAC,KAAK,QAAQ;AAC9C,UAAI,GAAG,KAAK,IAAI,GAAG,KAAK,KAAK;AAC7B,aAAO;AAAA,IACT,GAAG,CAAC,CAA2B;AAE/B,UAAM,eAAe,OAAO,QAAQ,WAAW,EAAE,KAAK,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,EAAC,CAAC,MAAO,IAAgB,CAAY;AACnG,QAAI,aAAa,SAAS,GAAG;AAC3B,YAAM,OAAO,aAAa,CAAC,EAAE,CAAC;AAC9B,YAAM,eAAe,aAAa,MAAM,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC,OAAO,KAAK,OAAO,EAAE,OAAO,MAAuB,EAAE;AAAA,IAC5G;AAAA,EACF;AAEA,SAAO;AACT;AAvCgB;AAyChB,eAAsB,kBAAkB,QAAwB,YAAmB,KAAiC;AAClH,QAAM,gBAAgB,sBAAsB,QAAQ,UAAU;AAE9D,QAAM,iBAAiB,GAAG,eAAe,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtD,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA,EAG/B,KAAK,UAAU,WAAW,MAAM,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA,EAGhD,KAAK,UAAU,eAAe,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCtC,MAAI;AACF,UAAM,aAAa,MAAM,IAAI,GAAG,IAAI,oBAAoB;AAAA,MACtD,QAAQ;AAAA,MACR,YAAY;AAAA,IACd,CAAC;AAED,QAAI,eAAe,WAAW,YAAY,WAAW,UAAU,CAAC,GAAG,QAAQ;AAC3E,QAAI,OAAO,iBAAiB,UAAU;AACpC,qBAAe,aAAa,QAAQ,eAAe,EAAE,EAAE,QAAQ,WAAW,EAAE,EAAE,KAAK;AAGnF,YAAM,gBAAgB,aAAa,YAAY,UAAU;AACzD,UAAI,kBAAkB,IAAI;AACxB,uBAAe,aAAa,UAAU,gBAAgB,CAAC,EAAE,KAAK;AAAA,MAChE;AAGA,YAAM,YAAY,aAAa,QAAQ,GAAG;AAC1C,YAAM,UAAU,aAAa,YAAY,GAAG;AAC5C,UAAI,cAAc,MAAM,YAAY,MAAM,UAAU,WAAW;AAC7D,uBAAe,aAAa,UAAU,WAAW,UAAU,CAAC;AAAA,MAC9D;AAAA,IACF;AAEA,UAAM,aAAa,KAAK,MAAM,YAAY;AAG1C,UAAM,aAAa,MAAM,mBAAmB,QAAQ,YAAY,YAAY,GAAG;AAC/E,eAAW,aAAa;AAExB,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,uBAAuB,KAAK;AAC1C,WAAO,MAAM,uBAAuB,QAAQ,UAAU;AAAA,EACxD;AACF;AAnFsB;AAqFtB,SAAS,sBAAsB,QAAwB,YAAwB;AAC7E,QAAM,QAAa;AAAA,IACjB,UAAU;AAAA,MACR,WAAW,WAAW;AAAA,MACtB,cAAc,OAAO;AAAA,MACrB,gBAAgB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ,EAAE;AAAA,MAC5D,oBAAoB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ,EAAE;AAAA,MAChE,aAAa,OAAO,OAAO,SAAO,IAAI,SAAS,MAAM,EAAE;AAAA,MACvD,iBAAiB,KAAK,UAAU,UAAU,EAAE;AAAA,IAC9C;AAAA,IACA,eAAe,CAAC;AAAA,IAChB,aAAa;AAAA,MACX,qBAAqB;AAAA,MACrB,eAAe;AAAA,MACf,WAAW;AAAA,IACb;AAAA,IACA,mBAAmB;AAAA,MACjB,gBAAgB,CAAC;AAAA,MACjB,qBAAqB,CAAC;AAAA,MACtB,6BAA6B,CAAC;AAAA,MAC9B,mBAAmB,CAAC;AAAA,IACtB;AAAA,EACF;AAEA,MAAI,aAAa;AACjB,MAAI,aAAa;AAGjB,aAAW,OAAO,QAAQ;AACxB,UAAM,SAAS,WAAW,IAAI,SAAO,IAAI,IAAI,IAAI,CAAC;AAClD,UAAM,iBAAiB,OAAO,OAAO,OAAK,MAAM,QAAQ,MAAM,UAAa,MAAM,EAAE;AACnF,UAAM,aAAa,OAAO,SAAS,eAAe;AAElD,kBAAc,OAAO;AACrB,kBAAc;AAEd,UAAM,cAAc,IAAI,IAAI,IAAI;AAAA,MAC9B,MAAM,IAAI;AAAA,MACV,YAAY,eAAe;AAAA,MAC3B,cAAc,CAAC,GAAG,IAAI,IAAI,cAAc,CAAC,EAAE;AAAA,MAC3C,iBAAiB,eAAe,SAAS,IAAI,CAAC,GAAG,IAAI,IAAI,cAAc,CAAC,EAAE,SAAS,eAAe,SAAS;AAAA,MAC3G,cAAc;AAAA,MACd,mBAAoB,aAAa,OAAO,SAAU;AAAA,MAClD,GAAG,IAAI;AAAA,IACT;AAGA,QAAI,IAAI,SAAS,UAAU;AACzB,YAAM,OAAO,eAAe,IAAI,OAAK,OAAO,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AACrE,UAAI,KAAK,SAAS,GAAG;AACnB,cAAM,OAAO,KAAK,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK;AACpD,cAAM,WAAW,KAAK,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,IAAI,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,KAAK;AACpF,cAAM,WAAW,kBAAkB,MAAM,MAAM,KAAK,KAAK,QAAQ,CAAC;AAClE,cAAM,WAAW,kBAAkB,MAAM,MAAM,KAAK,KAAK,QAAQ,CAAC;AAClE,cAAM,WAAW,eAAe,IAAI;AAEpC,cAAM,cAAc,IAAI,IAAI,IAAI;AAAA,UAC9B,GAAG,MAAM,cAAc,IAAI,IAAI;AAAA,UAC/B,OAAO,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI;AAAA,UAC3C;AAAA,UACA,mBAAmB,KAAK,KAAK,QAAQ;AAAA,UACrC;AAAA,UACA;AAAA,UACA,cAAc,SAAS;AAAA,UACvB,mBAAoB,SAAS,SAAS,KAAK,SAAU;AAAA,UACrD,WAAW,mBAAmB,IAAI;AAAA,UAClC,wBAAwB,SAAS,IAAI,KAAK,KAAK,QAAQ,IAAI,OAAO;AAAA,QACpE;AAEA,YAAI,KAAK,IAAI,QAAQ,IAAI,GAAG;AAC1B,gBAAM,kBAAkB,oBAAoB,KAAK;AAAA,YAC/C,QAAQ,IAAI;AAAA,YACZ,UAAU,SAAS,QAAQ,CAAC;AAAA,YAC5B,WAAW,WAAW,IAAI,UAAU;AAAA,UACtC,CAAC;AAAA,QACH;AAEA,YAAI,SAAS,SAAS,KAAK,SAAS,MAAM;AACxC,gBAAM,kBAAkB,eAAe,KAAK;AAAA,YAC1C,QAAQ,IAAI;AAAA,YACZ,cAAc,SAAS;AAAA,YACvB,aAAc,SAAS,SAAS,KAAK,SAAU,KAAK,QAAQ,CAAC;AAAA,UAC/D,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAGA,QAAI,IAAI,SAAS,UAAU;AACzB,YAAM,cAAc,eAAe,OAAO,CAAC,KAAK,QAAQ;AACtD,YAAI,GAAG,KAAK,IAAI,GAAG,KAAK,KAAK;AAC7B,eAAO;AAAA,MACT,GAAG,CAAC,CAA2B;AAE/B,YAAM,eAAe,OAAO,QAAQ,WAAW,EAAE,KAAK,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,EAAC,CAAC,MAAO,IAAgB,CAAY;AACnG,YAAM,UAAU,iBAAiB,OAAO,OAAO,WAAW,CAAC;AAE3D,YAAM,cAAc,IAAI,IAAI,IAAI;AAAA,QAC9B,GAAG,MAAM,cAAc,IAAI,IAAI;AAAA,QAC/B,WAAW,aAAa,MAAM,GAAG,CAAC;AAAA,QAClC;AAAA,QACA,oBAAoB,aAAa,SAAS,IAAK,aAAa,CAAC,EAAE,CAAC,IAAe,eAAe,SAAS;AAAA,QACvG,eAAe,eAAe,OAAO,CAAC,KAAK,QAAQ,MAAM,IAAI,SAAS,EAAE,QAAQ,CAAC,IAAI,eAAe;AAAA,MACtG;AAGA,UAAI,eAAe,MAAM,SAAO,CAAC,MAAM,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,cAAc,CAAC,EAAE,SAAS,IAAI;AAChG,cAAM,kBAAkB,4BAA4B,KAAK;AAAA,UACvD,QAAQ,IAAI;AAAA,UACZ,cAAc,CAAC,GAAG,IAAI,IAAI,cAAc,CAAC,EAAE;AAAA,UAC3C,YAAY;AAAA,QACd,CAAC;AAAA,MACH;AAAA,IACF;AAGA,QAAI,IAAI,SAAS,QAAQ;AACvB,YAAM,QAAQ,eAAe,IAAI,OAAK,IAAI,KAAK,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAClF,UAAI,MAAM,SAAS,GAAG;AACpB,cAAM,cAAc,MAAM,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,IAAI,EAAE,QAAQ,CAAC;AAClE,cAAM,YAAY,YAAY,YAAY,SAAS,CAAC,EAAE,QAAQ,IAAI,YAAY,CAAC,EAAE,QAAQ;AACzF,cAAM,iBAAiB,aAAa,MAAO,KAAK,KAAK;AAErD,cAAM,cAAc,IAAI,IAAI,IAAI;AAAA,UAC9B,GAAG,MAAM,cAAc,IAAI,IAAI;AAAA,UAC/B,cAAc,YAAY,CAAC,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,UACvD,YAAY,YAAY,YAAY,SAAS,CAAC,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,UAC1E,WAAW,GAAG,KAAK,MAAM,cAAc,CAAC;AAAA,UACxC,WAAW,qBAAqB,KAAK;AAAA,QACvC;AAEA,cAAM,kBAAkB,kBAAkB,KAAK;AAAA,UAC7C,QAAQ,IAAI;AAAA,UACZ,OAAO,GAAG,KAAK,MAAM,cAAc,CAAC;AAAA,UACpC,WAAW,qBAAqB,KAAK;AAAA,QACvC,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAGA,QAAM,YAAY,uBAAwB,aAAa,cAAc,aAAc;AACnF,QAAM,YAAY,gBAAgB,mBAAmB,UAAU;AAC/D,QAAM,YAAY,YAAY,WAAW;AAAA,IAAO,SAC9C,OAAO,OAAO,GAAG,EAAE,MAAM,SAAO,QAAQ,QAAQ,QAAQ,UAAa,QAAQ,EAAE;AAAA,EACjF,EAAE;AAEF,SAAO;AACT;AApJS;AAsJT,SAAS,kBAAkB,SAAmB,MAAc,QAAwB;AAClF,MAAI,WAAW,EAAG,QAAO;AACzB,QAAM,IAAI,QAAQ;AAClB,QAAM,UAAU,QAAQ,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,KAAK,MAAM,QAAQ,QAAQ,CAAC,GAAG,CAAC;AACxF,SAAQ,MAAM,IAAI,MAAM,IAAI,MAAO;AACrC;AALS;AAOT,SAAS,kBAAkB,SAAmB,MAAc,QAAwB;AAClF,MAAI,WAAW,EAAG,QAAO;AACzB,QAAM,IAAI,QAAQ;AAClB,QAAM,UAAU,QAAQ,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,KAAK,MAAM,QAAQ,QAAQ,CAAC,GAAG,CAAC;AACxF,SAAQ,KAAK,IAAI,OAAO,IAAI,MAAM,IAAI,MAAM,IAAI,MAAO,UAAW,KAAK,IAAI,MAAM,IAAI,OAAQ,IAAI,MAAM,IAAI;AAC7G;AALS;AAOT,SAAS,eAAe,SAA6B;AACnD,QAAM,KAAK,oBAAoB,SAAS,EAAE;AAC1C,QAAM,KAAK,oBAAoB,SAAS,EAAE;AAC1C,QAAM,MAAM,KAAK;AACjB,QAAM,aAAa,KAAK,MAAM;AAC9B,QAAM,aAAa,KAAK,MAAM;AAE9B,SAAO,QAAQ,OAAO,SAAO,MAAM,cAAc,MAAM,UAAU;AACnE;AARS;AAUT,SAAS,mBAAmB,SAA2D;AACrF,SAAO;AAAA,IACL,IAAI,oBAAoB,SAAS,EAAE;AAAA,IACnC,IAAI,oBAAoB,SAAS,EAAE;AAAA,IACnC,IAAI,oBAAoB,SAAS,EAAE;AAAA,EACrC;AACF;AANS;AAQT,SAAS,oBAAoB,SAAmB,YAA4B;AAC1E,QAAM,SAAS,CAAC,GAAG,OAAO,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAChD,QAAM,QAAS,aAAa,OAAQ,OAAO,SAAS;AACpD,QAAM,QAAQ,KAAK,MAAM,KAAK;AAC9B,QAAM,QAAQ,KAAK,KAAK,KAAK;AAC7B,QAAM,SAAS,QAAQ;AAEvB,MAAI,SAAS,OAAO,OAAQ,QAAO,OAAO,OAAO,SAAS,CAAC;AAC3D,SAAO,OAAO,KAAK,KAAK,IAAI,UAAU,OAAO,KAAK,IAAI;AACxD;AATS;AAWT,SAAS,iBAAiB,QAA0B;AAClD,QAAM,QAAQ,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC;AAC9C,QAAM,gBAAgB,OAAO,IAAI,WAAS,QAAQ,KAAK;AACvD,SAAO,CAAC,cAAc,OAAO,CAAC,KAAK,MAAM,OAAO,IAAI,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC;AAClF;AAJS;AAMT,SAAS,qBAAqB,OAAuB;AACnD,MAAI,MAAM,SAAS,EAAG,QAAO;AAE7B,QAAM,cAAc,MAAM,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,IAAI,EAAE,QAAQ,CAAC;AAClE,QAAM,YAAY,CAAC;AAEnB,WAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,UAAM,OAAO,YAAY,CAAC,EAAE,QAAQ,IAAI,YAAY,IAAI,CAAC,EAAE,QAAQ;AACnE,cAAU,KAAK,QAAQ,MAAO,KAAK,KAAK,GAAG;AAAA,EAC7C;AAEA,QAAM,cAAc,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,UAAU;AAErE,MAAI,cAAc,EAAG,QAAO;AAC5B,MAAI,cAAc,EAAG,QAAO;AAC5B,MAAI,cAAc,GAAI,QAAO;AAC7B,MAAI,cAAc,GAAI,QAAO;AAC7B,SAAO;AACT;AAlBS;AAoBT,SAAS,mBAAmB,MAAqB;AAC/C,QAAM,cAAc,KAAK,IAAI,SAAO,KAAK,UAAU,GAAG,CAAC;AACvD,QAAM,aAAa,IAAI,IAAI,WAAW;AACtC,SAAO,KAAK,SAAS,WAAW;AAClC;AAJS;AAMT,eAAe,mBAAmB,QAAwB,YAAmB,UAAe,KAA0B;AACpH,QAAM,SAAS,CAAC;AAChB,QAAM,cAAc,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AAC9D,QAAM,kBAAkB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AAClE,QAAM,WAAW,OAAO,OAAO,SAAO,IAAI,SAAS,MAAM;AAEzD,UAAQ,IAAI,wDAAiD,EAAE,aAAa,YAAY,QAAQ,iBAAiB,gBAAgB,QAAQ,UAAU,SAAS,OAAO,CAAC;AAEpK,MAAI;AAEF,UAAM,uBAAuB,kCAAkC,QAAQ,YAAY,QAAQ;AAE3F,eAAW,kBAAkB,sBAAsB;AACjD,YAAM,QAAQ,MAAM,qBAAqB,gBAAgB,QAAQ,YAAY,QAAQ;AACrF,UAAI,OAAO;AACT,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA,IACF;AAEA,YAAQ,IAAI,oBAAe,OAAO,MAAM,+BAA+B;AAAA,EAEzE,SAAS,OAAO;AACd,YAAQ,MAAM,wCAAmC,KAAK;AAEtD,WAAO,KAAK;AAAA,MACV,OAAO;AAAA,MACP,aAAa;AAAA,MACb,WAAW,oBAAoB,QAAQ,UAAU;AAAA,MACjD,UAAU;AAAA,IACZ,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAjCe;AAmCf,SAAS,kCAAkC,QAAwB,YAAmB,UAAsB;AAC1G,QAAM,kBAAkB,CAAC;AACzB,QAAM,cAAc,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AAC9D,QAAM,kBAAkB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AAClE,QAAM,WAAW,OAAO,OAAO,SAAO,IAAI,SAAS,MAAM;AAGzD,MAAI,SAAS,SAAS,KAAK,YAAY,SAAS,GAAG;AACjD,UAAM,UAAU,SAAS,CAAC;AAC1B,UAAM,WAAW,8BAA8B,aAAa,UAAU;AACtE,QAAI,YAAY,iBAAiB,SAAS,UAAU,UAAU,GAAG;AAC/D,sBAAgB,KAAK;AAAA,QACnB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO,aAAM,SAAS,IAAI;AAAA,QAC1B,aAAa,iCAAiC,SAAS,IAAI,iBAAiB,QAAQ,IAAI;AAAA,QACxF,SAAS,CAAC,SAAS,QAAQ;AAAA,QAC3B,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF;AAGA,MAAI,gBAAgB,SAAS,KAAK,YAAY,SAAS,GAAG;AACxD,UAAM,cAAc,kCAAkC,iBAAiB,UAAU;AACjF,UAAM,YAAY,yBAAyB,aAAa,UAAU;AAClE,QAAI,eAAe,aAAa,wBAAwB,aAAa,WAAW,UAAU,GAAG;AAC3F,sBAAgB,KAAK;AAAA,QACnB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO,aAAM,UAAU,IAAI,mBAAmB,YAAY,IAAI;AAAA,QAC9D,aAAa,WAAW,UAAU,IAAI,qBAAqB,YAAY,IAAI;AAAA,QAC3E,SAAS,CAAC,aAAa,SAAS;AAAA,QAChC,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF;AAGA,MAAI,YAAY,SAAS,GAAG;AAC1B,UAAM,YAAY,oBAAoB,aAAa,UAAU;AAC7D,QAAI,aAAa,2BAA2B,WAAW,UAAU,GAAG;AAClE,sBAAgB,KAAK;AAAA,QACnB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO,aAAM,UAAU,IAAI;AAAA,QAC3B,aAAa,gEAAgE,UAAU,IAAI;AAAA,QAC3F,SAAS,CAAC,SAAS;AAAA,QACnB,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF;AAGA,MAAI,YAAY,UAAU,GAAG;AAC3B,UAAM,mBAAmB,uBAAuB,aAAa,UAAU;AACvE,QAAI,iBAAiB,SAAS,GAAG;AAC/B,YAAM,UAAU,iBAAiB,CAAC;AAClC,sBAAgB,KAAK;AAAA,QACnB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO,aAAM,QAAQ,KAAK,IAAI,OAAO,QAAQ,KAAK,IAAI;AAAA,QACtD,aAAa,4CAA4C,QAAQ,KAAK,IAAI,QAAQ,QAAQ,KAAK,IAAI;AAAA,QACnG,SAAS,CAAC,QAAQ,MAAM,QAAQ,IAAI;AAAA,QACpC,QAAQ,gCAAgC,QAAQ,YAAY,QAAQ,CAAC,CAAC;AAAA,MACxE,CAAC;AAAA,IACH;AAAA,EACF;AAGA,MAAI,gBAAgB,SAAS,GAAG;AAC9B,UAAM,qBAAqB,6BAA6B,iBAAiB,UAAU;AACnF,QAAI,sBAAsB,wBAAwB,oBAAoB,UAAU,GAAG;AACjF,sBAAgB,KAAK;AAAA,QACnB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,OAAO,aAAM,mBAAmB,IAAI;AAAA,QACpC,aAAa,4CAA4C,mBAAmB,IAAI;AAAA,QAChF,SAAS,CAAC,kBAAkB;AAAA,QAC5B,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO,gBAAgB,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,GAAG,CAAC;AAC3E;AArFS;AAwFT,SAAS,8BAA8B,aAA6B,YAAwC;AAC1G,MAAI,YAAY,WAAW,EAAG,QAAO;AAErC,SAAO,YAAY,OAAO,CAAC,MAAM,SAAS;AACxC,UAAM,gBAAgB,KAAK,OAAO,UAAU;AAC5C,UAAM,gBAAgB,KAAK,OAAO,UAAU;AAC5C,WAAO,gBAAgB,gBAAgB,OAAO;AAAA,EAChD,CAAC;AACH;AARS;AAUT,SAAS,yBAAyB,aAA6B,YAAwC;AAErG,QAAM,mBAAmB,CAAC,WAAW,SAAS,UAAU,QAAQ,SAAS,UAAU,SAAS,SAAS,OAAO;AAC5G,QAAM,cAAc,YAAY;AAAA,IAAK,SACnC,iBAAiB,KAAK,aAAW,IAAI,KAAK,YAAY,EAAE,SAAS,OAAO,CAAC;AAAA,EAC3E;AAEA,SAAO,eAAe,8BAA8B,aAAa,UAAU;AAC7E;AARS;AAUT,SAAS,kCAAkC,iBAAiC,YAAwC;AAClH,MAAI,gBAAgB,WAAW,EAAG,QAAO;AAEzC,SAAO,gBAAgB,OAAO,CAAC,MAAM,SAAS;AAC5C,UAAM,cAAc,yBAAyB,MAAM,UAAU;AAC7D,UAAM,cAAc,yBAAyB,MAAM,UAAU;AAC7D,WAAO,cAAc,cAAc,OAAO;AAAA,EAC5C,CAAC;AACH;AARS;AAUT,SAAS,yBAAyB,KAAmB,YAA2B;AAC9E,QAAM,SAAS,WAAW,IAAI,SAAO,IAAI,IAAI,IAAI,CAAC,EAAE,OAAO,OAAK,KAAK,IAAI;AACzE,QAAM,eAAe,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC;AAExC,MAAI,aAAa,SAAS,KAAK,aAAa,SAAS,EAAG,QAAO;AAE/D,QAAM,SAAS,aAAa,IAAI,SAAO,OAAO,OAAO,OAAK,MAAM,GAAG,EAAE,MAAM;AAC3E,QAAM,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AACxD,QAAM,WAAW,OAAO,OAAO,CAAC,KAAK,UAAU,MAAM,KAAK,IAAI,QAAQ,MAAM,CAAC,GAAG,CAAC,IAAI,OAAO;AAG5F,SAAO,OAAO,IAAI,KAAK,IAAI,WAAW,QAAQ;AAChD;AAZS;AAcT,SAAS,iBAAiB,SAAuB,YAA0B,YAA4B;AACrG,QAAM,aAAa,WAChB,OAAO,SAAO,IAAI,QAAQ,IAAI,KAAK,IAAI,WAAW,IAAI,CAAC,EACvD,KAAK,CAAC,GAAG,MAAM,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,CAAC;AAE3F,MAAI,WAAW,SAAS,EAAG,QAAO;AAGlC,QAAM,SAAS,WAAW,IAAI,SAAO,OAAO,IAAI,WAAW,IAAI,CAAC,CAAC;AACjE,QAAM,IAAI,OAAO;AACjB,QAAM,SAAS,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,IAClD,KAAK,IAAI,KAAK,IAAK,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,MACpD,KAAK,KAAK,IAAI,MAAM,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC;AAEhF,SAAO,KAAK,IAAI,KAAK,IAAI;AAC3B;AAfS;AAiBT,SAAS,wBAAwB,aAA2B,YAA0B,YAA4B;AAChH,QAAM,SAAS,WAAW,OAAO,CAAC,KAAK,QAAQ;AAC7C,UAAM,WAAW,IAAI,YAAY,IAAI;AACrC,UAAM,QAAQ,OAAO,IAAI,WAAW,IAAI,CAAC;AACzC,QAAI,YAAY,CAAC,MAAM,KAAK,GAAG;AAC7B,UAAI,CAAC,IAAI,QAAQ,EAAG,KAAI,QAAQ,IAAI,CAAC;AACrC,UAAI,QAAQ,EAAE,KAAK,KAAK;AAAA,IAC1B;AACA,WAAO;AAAA,EACT,GAAG,CAAC,CAA6B;AAEjC,QAAM,aAAa,OAAO,OAAO,MAAM,EAAE;AAAA,IAAI,CAAC,WAC5C,OAAO,OAAO,CAAC,GAAW,MAAc,IAAI,GAAG,CAAC,IAAI,OAAO;AAAA,EAC7D;AAEA,MAAI,WAAW,SAAS,EAAG,QAAO;AAElC,QAAM,cAAc,WAAW,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,WAAW;AACvE,QAAM,WAAW,WAAW,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,IAAI,OAAO,aAAa,CAAC,GAAG,CAAC,IAAI,WAAW;AAEzG,SAAO,WAAW,KAAK,IAAI,cAAc,KAAK,CAAC;AACjD;AArBS;AAuBT,SAAS,2BAA2B,YAA0B,YAA4B;AACxF,QAAM,SAAS,WAAW,IAAI,SAAO,OAAO,IAAI,WAAW,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AACxF,MAAI,OAAO,SAAS,EAAG,QAAO;AAE9B,QAAM,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AACxD,QAAM,WAAW,OAAO,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,IAAI,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,OAAO;AACxF,QAAM,WAAW,KAAK,IAAI,WAAW,OAAO,UAAU,CAAC,IAAI,OAAO;AAElE,SAAO,YAAY,WAAW,KAAK,IAAI,OAAO,KAAK,CAAC;AACtD;AATS;AAWT,SAAS,uBAAuB,aAA6B,YAA0B;AACrF,QAAM,eAAe,CAAC;AAEtB,WAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,aAAS,IAAI,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC/C,YAAM,OAAO,YAAY,CAAC;AAC1B,YAAM,OAAO,YAAY,CAAC;AAE1B,YAAM,UAAU,WAAW,IAAI,SAAO,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AACnF,YAAM,UAAU,WAAW,IAAI,SAAO,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAEnF,YAAM,cAAc,qBAAqB,SAAS,OAAO;AAEzD,UAAI,KAAK,IAAI,WAAW,IAAI,KAAK;AAC/B,qBAAa,KAAK,EAAE,MAAM,MAAM,YAAY,CAAC;AAAA,MAC/C;AAAA,IACF;AAAA,EACF;AAEA,SAAO,aAAa,KAAK,CAAC,GAAG,MAAM,KAAK,IAAI,EAAE,WAAW,IAAI,KAAK,IAAI,EAAE,WAAW,CAAC;AACtF;AApBS;AAsBT,SAAS,oBAAoB,aAA6B,YAAwC;AAEhG,SAAO,yBAAyB,aAAa,UAAU,KAChD,8BAA8B,aAAa,UAAU;AAC9D;AAJS;AAMT,SAAS,6BAA6B,iBAAiC,YAAwC;AAC7G,SAAO,gBAAgB,KAAK,SAAO;AACjC,UAAM,SAAS,WAAW,IAAI,SAAO,IAAI,IAAI,IAAI,CAAC,EAAE,OAAO,OAAK,KAAK,IAAI;AACzE,UAAM,eAAe,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC;AACxC,WAAO,aAAa,UAAU,KAAK,aAAa,UAAU;AAAA,EAC5D,CAAC,KAAK;AACR;AANS;AAQT,SAAS,wBAAwB,aAA2B,YAA4B;AACtF,SAAO,yBAAyB,aAAa,UAAU,IAAI;AAC7D;AAFS;AAIT,eAAe,qBAAqB,gBAAqB,QAAwB,YAAmB,UAAoC;AACtI,MAAI;AACF,YAAQ,eAAe,MAAM;AAAA,MAC3B,KAAK;AACH,eAAO;AAAA,UACL,OAAO,eAAe;AAAA,UACtB,aAAa,eAAe;AAAA,UAC5B,WAAW,gCAAgC,eAAe,QAAQ,CAAC,GAAG,eAAe,QAAQ,CAAC,GAAG,UAAU;AAAA,UAC3G,UAAU,eAAe;AAAA,QAC3B;AAAA,MAEF,KAAK;AACH,eAAO;AAAA,UACL,OAAO,eAAe;AAAA,UACtB,aAAa,eAAe;AAAA,UAC5B,WAAW,gCAAgC,eAAe,QAAQ,CAAC,GAAG,eAAe,QAAQ,CAAC,GAAG,UAAU;AAAA,UAC3G,UAAU,eAAe;AAAA,QAC3B;AAAA,MAEF,KAAK;AACH,eAAO;AAAA,UACL,OAAO,eAAe;AAAA,UACtB,aAAa,eAAe;AAAA,UAC5B,WAAW,kCAAkC,eAAe,QAAQ,CAAC,GAAG,UAAU;AAAA,UAClF,UAAU,eAAe;AAAA,QAC3B;AAAA,MAEF,KAAK;AACH,eAAO;AAAA,UACL,OAAO,eAAe;AAAA,UACtB,aAAa,eAAe;AAAA,UAC5B,WAAW,iCAAiC,eAAe,QAAQ,CAAC,GAAG,eAAe,QAAQ,CAAC,GAAG,UAAU;AAAA,UAC5G,UAAU,eAAe;AAAA,QAC3B;AAAA,MAEF,KAAK;AACH,eAAO;AAAA,UACL,OAAO,eAAe;AAAA,UACtB,aAAa,eAAe;AAAA,UAC5B,WAAW,iCAAiC,eAAe,QAAQ,CAAC,GAAG,UAAU;AAAA,UACjF,UAAU,eAAe;AAAA,QAC3B;AAAA,MAEF;AACE,eAAO;AAAA,IACX;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,sBAAsB,eAAe,IAAI,WAAW,KAAK;AACvE,WAAO;AAAA,EACT;AACF;AAlDe;AAoDf,SAAS,qBAAqB,GAAa,GAAqB;AAC9D,QAAM,IAAI,KAAK,IAAI,EAAE,QAAQ,EAAE,MAAM;AACrC,MAAI,IAAI,EAAG,QAAO;AAElB,QAAM,QAAQ,EAAE,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;AACzD,QAAM,QAAQ,EAAE,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;AAEzD,MAAI,YAAY;AAChB,MAAI,cAAc;AAClB,MAAI,cAAc;AAElB,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,UAAM,KAAK,EAAE,CAAC,IAAI;AAClB,UAAM,KAAK,EAAE,CAAC,IAAI;AAClB,iBAAa,KAAK;AAClB,mBAAe,KAAK;AACpB,mBAAe,KAAK;AAAA,EACtB;AAEA,QAAM,cAAc,KAAK,KAAK,cAAc,WAAW;AACvD,SAAO,gBAAgB,IAAI,IAAI,YAAY;AAC7C;AArBS;AA0BT,SAAS,gCAAgC,SAAuB,YAA0B,YAAwB;AAChH,QAAM,aAAa,WAChB,OAAO,SAAO,IAAI,QAAQ,IAAI,KAAK,IAAI,WAAW,IAAI,KAAK,IAAI,EAC/D,KAAK,CAAC,GAAG,MAAM,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,CAAC;AAE3F,QAAM,QAAQ,WAAW,IAAI,SAAO,IAAI,QAAQ,IAAI,CAAC;AACrD,QAAM,SAAS,WAAW,IAAI,SAAO,OAAO,IAAI,WAAW,IAAI,CAAC,CAAC;AAGjE,QAAM,YAAY,mBAAmB,OAAO,MAAM;AAElD,SAAO;AAAA,IACL,MAAM;AAAA,MACJ;AAAA,QACE,GAAG;AAAA,QACH,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,QACA,MAAM,WAAW;AAAA,QACjB,eAAe,MAAM,QAAQ,IAAI,oBAAoB,WAAW,IAAI;AAAA,MACtE;AAAA,MACA;AAAA,QACE,GAAG;AAAA,QACH,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,OAAO;AAAA,UACP,OAAO;AAAA,UACP,MAAM;AAAA,QACR;AAAA,QACA,MAAM;AAAA,QACN,eAAe;AAAA,MACjB;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,MAAM,GAAG,WAAW,IAAI;AAAA,QACxB,MAAM,EAAE,MAAM,IAAI,OAAO,WAAW,QAAQ,IAAI;AAAA,MAClD;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,QAAQ,MAAM,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QAClE,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,WAAW,MAAM,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACrE,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,MACA,cAAc;AAAA,MACd,eAAe;AAAA,MACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACrC,WAAW;AAAA,MACX,QAAQ;AAAA,QACN,aAAa;AAAA,QACb,SAAS;AAAA,QACT,GAAG;AAAA,QACH,SAAS;AAAA,QACT,GAAG;AAAA,MACL;AAAA,IACF;AAAA,EACF;AACF;AAzES;AA2ET,SAAS,gCAAgC,aAA2B,YAA0B,YAAwB;AACpH,QAAM,cAAc,WAAW,OAAO,CAAC,KAAK,QAAQ;AAClD,UAAM,WAAW,IAAI,YAAY,IAAI;AACrC,UAAM,QAAQ,OAAO,IAAI,WAAW,IAAI,CAAC;AACzC,QAAI,YAAY,CAAC,MAAM,KAAK,GAAG;AAC7B,UAAI,CAAC,IAAI,QAAQ,EAAG,KAAI,QAAQ,IAAI,CAAC;AACrC,UAAI,QAAQ,EAAE,KAAK,KAAK;AAAA,IAC1B;AACA,WAAO;AAAA,EACT,GAAG,CAAC,CAA6B;AAGjC,QAAM,YAAY,OAAO,QAAQ,WAAW,EACzC,IAAI,CAAC,CAAC,UAAU,MAAM,OAAO;AAAA,IAC5B;AAAA,IACA,MAAM,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AAAA,IACjD,OAAO,OAAO;AAAA,IACd;AAAA,EACF,EAAE,EACD,KAAK,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE,IAAI,EAC9B,MAAM,GAAG,EAAE;AAEd,SAAO;AAAA,IACL,MAAM,CAAC;AAAA,MACL,GAAG,UAAU,IAAI,OAAK,EAAE,QAAQ;AAAA,MAChC,GAAG,UAAU,IAAI,OAAK,EAAE,IAAI;AAAA,MAC5B,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO,UAAU,IAAI,CAAC,GAAG,MAAM,OAAO,MAAM,IAAI,EAAE,UAAU,KAAM,IAAI,IAAK,EAAE,IAAI;AAAA,QACjF,SAAS;AAAA,QACT,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,MACrC;AAAA,MACA,MAAM,UAAU,IAAI,OAAK,GAAG,EAAE,KAAK,eAAe,CAAC,EAAE;AAAA,MACrD,cAAc;AAAA,MACd,eAAe,kBAAkB,WAAW,IAAI;AAAA,MAChD,YAAY,UAAU,IAAI,OAAK,EAAE,KAAK;AAAA,IACxC,CAAC;AAAA,IACD,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,MAAM,GAAG,WAAW,IAAI,mBAAmB,YAAY,IAAI;AAAA,QAC3D,MAAM,EAAE,MAAM,IAAI,OAAO,WAAW,QAAQ,IAAI;AAAA,MAClD;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,YAAY,MAAM,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACtE,WAAW;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,WAAW,WAAW,IAAI,IAAI,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QAClF,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,MACA,cAAc;AAAA,MACd,eAAe;AAAA,MACf,QAAQ,EAAE,GAAG,IAAI,GAAG,KAAK,GAAG,IAAI,GAAG,GAAG;AAAA,MACtC,YAAY;AAAA,IACd;AAAA,EACF;AACF;AAzDS;AA2DT,SAAS,kCAAkC,YAA0B,YAAwB;AAC3F,QAAM,SAAS,WACZ,IAAI,SAAO,OAAO,IAAI,WAAW,IAAI,CAAC,CAAC,EACvC,OAAO,SAAO,CAAC,MAAM,GAAG,CAAC;AAE5B,MAAI,OAAO,WAAW,EAAG,QAAO,oBAAoB,CAAC,GAAG,CAAC,CAAC;AAG1D,QAAM,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AACxD,QAAM,SAAS,CAAC,GAAG,MAAM,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC/C,QAAM,KAAK,OAAO,KAAK,MAAM,OAAO,SAAS,IAAI,CAAC;AAClD,QAAM,SAAS,OAAO,KAAK,MAAM,OAAO,SAAS,GAAG,CAAC;AACrD,QAAM,KAAK,OAAO,KAAK,MAAM,OAAO,SAAS,IAAI,CAAC;AAElD,SAAO;AAAA,IACL,MAAM;AAAA,MACJ;AAAA,QACE,GAAG;AAAA,QACH,MAAM;AAAA,QACN,QAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,KAAK,OAAO,MAAM,CAAC,CAAC,CAAC;AAAA,QACvE,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,SAAS;AAAA,UACT,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,QACA,MAAM;AAAA,QACN,eAAe;AAAA,MACjB;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,MAAM,GAAG,WAAW,IAAI;AAAA,QACxB,MAAM,EAAE,MAAM,IAAI,OAAO,WAAW,QAAQ,IAAI;AAAA,MAClD;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,WAAW,MAAM,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACrE,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,aAAa,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACjE,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,MACA,cAAc;AAAA,MACd,eAAe;AAAA,MACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACrC,QAAQ;AAAA;AAAA,QAEN;AAAA,UACE,MAAM;AAAA,UACN,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,MAAM,EAAE,OAAO,WAAW,OAAO,GAAG,MAAM,OAAO;AAAA,QACnD;AAAA;AAAA,QAEA;AAAA,UACE,MAAM;AAAA,UACN,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,MAAM,EAAE,OAAO,WAAW,OAAO,GAAG,MAAM,MAAM;AAAA,QAClD;AAAA,MACF;AAAA,MACA,aAAa;AAAA,QACX;AAAA,UACE,GAAG;AAAA,UACH,GAAG;AAAA,UACH,MAAM;AAAA,UACN,MAAM,SAAS,KAAK,QAAQ,CAAC,CAAC;AAAA,UAC9B,WAAW;AAAA,UACX,WAAW;AAAA,UACX,YAAY;AAAA,UACZ,MAAM,EAAE,OAAO,WAAW,MAAM,GAAG;AAAA,QACrC;AAAA,QACA;AAAA,UACE,GAAG;AAAA,UACH,GAAG;AAAA,UACH,MAAM;AAAA,UACN,MAAM,WAAW,OAAO,QAAQ,CAAC,CAAC;AAAA,UAClC,WAAW;AAAA,UACX,WAAW;AAAA,UACX,YAAY;AAAA,UACZ,MAAM,EAAE,OAAO,WAAW,MAAM,GAAG;AAAA,QACrC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AA7FS;AA+FT,SAAS,iCAAiC,MAAoB,MAAoB,YAAwB;AACxG,QAAM,OAAO,WACV,OAAO,SAAO,IAAI,KAAK,IAAI,KAAK,QAAQ,IAAI,KAAK,IAAI,KAAK,IAAI,EAC9D,IAAI,UAAQ;AAAA,IACX,GAAG,OAAO,IAAI,KAAK,IAAI,CAAC;AAAA,IACxB,GAAG,OAAO,IAAI,KAAK,IAAI,CAAC;AAAA,EAC1B,EAAE,EACD,OAAO,WAAS,CAAC,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,CAAC;AAErD,MAAI,KAAK,WAAW,EAAG,QAAO,oBAAoB,CAAC,GAAG,CAAC,CAAC;AAGxD,QAAM,cAAc;AAAA,IAClB,KAAK,IAAI,OAAK,EAAE,CAAC;AAAA,IACjB,KAAK,IAAI,OAAK,EAAE,CAAC;AAAA,EACnB;AAGA,QAAM,UAAU,KAAK,IAAI,OAAK,EAAE,CAAC;AACjC,QAAM,UAAU,KAAK,IAAI,OAAK,EAAE,CAAC;AACjC,QAAM,YAAY,yBAAyB,SAAS,OAAO;AAE3D,SAAO;AAAA,IACL,MAAM;AAAA,MACJ;AAAA,QACE,GAAG,KAAK,IAAI,OAAK,EAAE,CAAC;AAAA,QACpB,GAAG,KAAK,IAAI,OAAK,EAAE,CAAC;AAAA,QACpB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,MAAM;AAAA,UACN,SAAS;AAAA,UACT,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,QACA,MAAM;AAAA,QACN,eAAe,MAAM,KAAK,IAAI,yBAAyB,KAAK,IAAI;AAAA,MAClE;AAAA,MACA;AAAA,QACE,GAAG,CAAC,KAAK,IAAI,GAAG,OAAO,GAAG,KAAK,IAAI,GAAG,OAAO,CAAC;AAAA,QAC9C,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACnC,MAAM,YAAY,YAAY,QAAQ,CAAC,CAAC;AAAA,QACxC,eAAe,uBAAuB,YAAY,QAAQ,CAAC,CAAC;AAAA,MAC9D;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,MAAM,GAAG,KAAK,IAAI,OAAO,KAAK,IAAI;AAAA,QAClC,MAAM,EAAE,MAAM,IAAI,OAAO,WAAW,QAAQ,IAAI;AAAA,MAClD;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,KAAK,MAAM,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QAC/D,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACL,OAAO,EAAE,MAAM,KAAK,MAAM,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QAC/D,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,MACA,cAAc;AAAA,MACd,eAAe;AAAA,MACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACrC,aAAa,CAAC;AAAA,QACZ,GAAG;AAAA,QACH,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM,gBAAgB,YAAY,QAAQ,CAAC,CAAC,iBAAiB,uBAAuB,WAAW,CAAC;AAAA,QAChG,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,aAAa;AAAA,QACb,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU;AAAA,MACrC,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAhFS;AAkFT,SAAS,iCAAiC,aAA2B,YAAwB;AAC3F,QAAM,SAAS,WAAW,OAAO,CAAC,KAAK,QAAQ;AAC7C,UAAM,QAAQ,IAAI,YAAY,IAAI;AAClC,QAAI,SAAS,MAAM;AACjB,UAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK;AAAA,IACnC;AACA,WAAO;AAAA,EACT,GAAG,CAAC,CAA2B;AAE/B,QAAM,eAAe,OAAO,QAAQ,MAAM,EACvC,KAAK,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,EAAC,CAAC,MAAM,IAAI,CAAC,EAC1B,MAAM,GAAG,CAAC;AAEb,QAAM,QAAQ,aAAa,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,MAAM,OAAO,CAAC;AACpE,QAAM,SAAS;AAAA,IACb;AAAA,IAAW;AAAA,IAAW;AAAA,IAAW;AAAA,IACjC;AAAA,IAAW;AAAA,IAAW;AAAA,IAAW;AAAA,EACnC;AAEA,SAAO;AAAA,IACL,MAAM,CAAC;AAAA,MACL,QAAQ,aAAa,IAAI,CAAC,CAAC,KAAK,MAAM,KAAK;AAAA,MAC3C,QAAQ,aAAa,IAAI,CAAC,CAAC,EAAC,KAAK,MAAM,KAAK;AAAA,MAC5C,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,QAAQ,OAAO,MAAM,GAAG,aAAa,MAAM;AAAA,QAC3C,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,MACrC;AAAA,MACA,UAAU;AAAA,MACV,cAAc;AAAA,MACd,UAAU,EAAE,MAAM,IAAI,OAAO,UAAU;AAAA,MACvC,eAAe;AAAA,MACf,MAAM,aAAa,IAAI,CAAC,GAAG,MAAM,MAAM,IAAI,MAAM,CAAC;AAAA;AAAA,IACpD,CAAC;AAAA,IACD,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,MAAM,GAAG,YAAY,IAAI;AAAA,QACzB,MAAM,EAAE,MAAM,IAAI,OAAO,WAAW,QAAQ,IAAI;AAAA,MAClD;AAAA,MACA,cAAc;AAAA,MACd,eAAe;AAAA,MACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACrC,YAAY;AAAA,MACZ,QAAQ;AAAA,QACN,aAAa;AAAA,QACb,SAAS;AAAA,QACT,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAAA,MACA,aAAa,CAAC;AAAA,QACZ,MAAM,UAAU,KAAK;AAAA,QACrB,GAAG;AAAA,QACH,GAAG;AAAA,QACH,MAAM;AAAA,QACN,MAAM;AAAA,QACN,WAAW;AAAA,QACX,MAAM,EAAE,MAAM,IAAI,OAAO,WAAW,QAAQ,IAAI;AAAA,MAClD,CAAC;AAAA,IACH;AAAA,EACF;AACF;AA5DS;AA+DT,SAAS,mBAAmB,OAAiB,QAA4B;AACvE,QAAM,IAAI,MAAM;AAChB,MAAI,IAAI,EAAG,QAAO;AAElB,QAAM,aAAa,MAAM,IAAI,UAAQ,IAAI,KAAK,IAAI,EAAE,QAAQ,CAAC;AAC7D,QAAM,WAAW,WAAW,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;AACzD,QAAM,YAAY,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;AAEtD,QAAM,YAAY,WAAW,OAAO,CAAC,KAAK,MAAM,MAAM,OAAO,OAAO,aAAa,OAAO,CAAC,IAAI,YAAY,CAAC;AAC1G,QAAM,cAAc,WAAW,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,IAAI,OAAO,UAAU,CAAC,GAAG,CAAC;AAE1F,QAAM,QAAQ,gBAAgB,IAAI,YAAY,cAAc;AAC5D,QAAM,YAAY,YAAY,QAAQ;AAEtC,SAAO,WAAW,IAAI,UAAQ,QAAQ,OAAO,SAAS;AACxD;AAfS;AAiBT,SAAS,yBAAyB,SAAmB,SAA6B;AAChF,QAAM,IAAI,QAAQ;AAClB,MAAI,IAAI,EAAG,QAAO;AAElB,QAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;AACnD,QAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;AAEnD,QAAM,YAAY,QAAQ,OAAO,CAAC,KAAK,GAAG,MAAM,OAAO,IAAI,UAAU,QAAQ,CAAC,IAAI,QAAQ,CAAC;AAC3F,QAAM,cAAc,QAAQ,OAAO,CAAC,KAAK,MAAM,MAAM,KAAK,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC;AAE9E,QAAM,QAAQ,gBAAgB,IAAI,YAAY,cAAc;AAC5D,QAAM,YAAY,QAAQ,QAAQ;AAElC,QAAM,OAAO,KAAK,IAAI,GAAG,OAAO;AAChC,QAAM,OAAO,KAAK,IAAI,GAAG,OAAO;AAEhC,SAAO,CAAC,QAAQ,OAAO,WAAW,QAAQ,OAAO,SAAS;AAC5D;AAjBS;AAmBT,SAAS,uBAAuB,aAA6B;AAC3D,QAAM,MAAM,KAAK,IAAI,WAAW;AAChC,MAAI,OAAO,IAAK,QAAO;AACvB,MAAI,OAAO,IAAK,QAAO;AACvB,MAAI,OAAO,IAAK,QAAO;AACvB,MAAI,OAAO,IAAK,QAAO;AACvB,SAAO;AACT;AAPS;AAUT,eAAsB,kBACpB,UACA,KACyB;AACzB,UAAQ,IAAI,qDAA8C;AAC1D,QAAM,QAAQ,KAAK,IAAI;AAEvB,MAAI;AACF,UAAM,SAAS,YAAY,QAAQ;AACnC,UAAM,WAAW,SAAS;AAC1B,UAAM,cAAc,OAAO;AAG3B,UAAM,UAAU,OAAO,IAAI,SAAO;AAChC,YAAM,SAAS,SAAS,IAAI,SAAO,IAAI,IAAI,IAAI,CAAC,EAAE,OAAO,OAAK,KAAK,IAAI;AACvE,YAAM,eAAe,OAAO;AAC5B,YAAM,YAAY,WAAW;AAE7B,UAAI,QAAa;AAAA,QACf,aAAa,IAAI;AAAA,QACjB,aAAa,IAAI;AAAA,QACjB,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC,EAAE;AAAA,MAC/B;AAEA,UAAI,IAAI,SAAS,UAAU;AACzB,cAAM,YAAY,OAAO,IAAI,OAAK,OAAO,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAClE,YAAI,UAAU,SAAS,GAAG;AACxB,gBAAM,SAAS,CAAC,GAAG,SAAS,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAClD,gBAAM,OAAO,UAAU,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,UAAU;AAC9D,gBAAM,WAAW,UAAU,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,IAAI,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU;AAE9F,gBAAM,MAAM,KAAK,IAAI,GAAG,SAAS;AACjC,gBAAM,MAAM,KAAK,IAAI,GAAG,SAAS;AACjC,gBAAM,OAAO;AACb,gBAAM,MAAM,KAAK,KAAK,QAAQ;AAC9B,gBAAM,MAAM,OAAO,KAAK,MAAM,OAAO,SAAS,IAAI,CAAC;AACnD,gBAAM,MAAM,OAAO,KAAK,MAAM,OAAO,SAAS,GAAG,CAAC;AAClD,gBAAM,MAAM,OAAO,KAAK,MAAM,OAAO,SAAS,IAAI,CAAC;AAAA,QACrD;AAAA,MACF,WAAW,IAAI,SAAS,UAAU;AAEhC,cAAM,cAAc,OAAO,OAAO,CAAC,KAAK,QAAQ;AAC9C,cAAI,GAAG,KAAK,IAAI,GAAG,KAAK,KAAK;AAC7B,iBAAO;AAAA,QACT,GAAG,CAAC,CAA2B;AAE/B,cAAM,gBAAgB,OAAO,QAAQ,WAAW,EAC7C,KAAK,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,EAAC,CAAC,MAAM,IAAI,CAAC,EAC1B,MAAM,GAAG,EAAE;AAEd,cAAM,iBAAiB;AACvB,cAAM,iBAAiB,OAAO,KAAK,WAAW,EAAE;AAAA,MAClD;AAEA,aAAO;AAAA,IACT,CAAC;AAGD,UAAM,iBAAiB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AACjE,UAAM,eAAoB,CAAC;AAE3B,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC9C,eAAS,IAAI,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAClD,cAAM,OAAO,eAAe,CAAC;AAC7B,cAAM,OAAO,eAAe,CAAC;AAE7B,cAAM,UAAU,SAAS,IAAI,SAAO,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AACjF,cAAM,UAAU,SAAS,IAAI,SAAO,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAEjF,cAAM,cAAc,qBAAqB,SAAS,OAAO;AACzD,YAAI,KAAK,IAAI,WAAW,IAAI,KAAK;AAC/B,uBAAa,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,EAAE,IAAI;AAAA,QAC9C;AAAA,MACF;AAAA,IACF;AAGA,UAAM,WAAW;AAAA,MACf,oBAAoB,OAAO,QAAQ,YAAY,EAAE,OAAO,CAAC,CAAC,EAAC,IAAI,MAAM,KAAK,IAAI,IAAc,IAAI,GAAG;AAAA,MACnG,iBAAiB,eACd,IAAI,UAAQ;AAAA,QACX,QAAQ,IAAI;AAAA,QACZ,KAAK,IAAI,OAAO,UAAU,MAAM,IAAI,OAAO,QAAQ;AAAA,MACrD,EAAE,EACD,OAAO,UAAQ,KAAK,KAAK,GAAG,EAC5B,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,EAAE,EAAE,EAC1B,MAAM,GAAG,CAAC;AAAA,MACb,sBAAsB,OACnB,OAAO,SAAO,IAAI,SAAS,QAAQ,EACnC,IAAI,SAAO;AACV,cAAM,SAAS,SAAS,IAAI,SAAO,IAAI,IAAI,IAAI,CAAC,EAAE,OAAO,OAAK,KAAK,IAAI;AACvE,cAAM,cAAc,OAAO,OAAO,CAAC,KAAK,QAAQ;AAC9C,cAAI,GAAG,KAAK,IAAI,GAAG,KAAK,KAAK;AAC7B,iBAAO;AAAA,QACT,GAAG,CAAC,CAA2B;AAC/B,cAAM,UAAU,KAAK,IAAI,GAAG,OAAO,OAAO,WAAW,CAAC;AACtD,eAAO;AAAA,UACL,QAAQ,IAAI;AAAA,UACZ,WAAW,UAAU,OAAO;AAAA,UAC5B,UAAU,OAAO,QAAQ,WAAW,EAAE,KAAK,CAAC,CAAC,EAAC,IAAI,MAAM,SAAS,OAAO,IAAI,CAAC;AAAA,QAC/E;AAAA,MACF,CAAC,EACA,OAAO,UAAQ,KAAK,YAAY,GAAG,EACnC,KAAK,CAAC,GAAG,MAAM,EAAE,YAAY,EAAE,SAAS;AAAA,IAC7C;AAEA,UAAM,WAAW,KAAK,IAAI,IAAI;AAC9B,YAAQ,IAAI,qDAAgD,QAAQ,IAAI;AACxE,YAAQ,IAAI,uBAAgB,QAAQ,UAAU,WAAW,UAAU;AACnE,YAAQ,IAAI,mBAAY,OAAO,KAAK,YAAY,EAAE,MAAM,kBAAkB,SAAS,gBAAgB,MAAM,2BAA2B;AAEpI,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW,OAAO,OAAO,CAAC,KAAK,QAAQ;AACrC,YAAI,IAAI,IAAI,IAAI,IAAI;AACpB,eAAO;AAAA,MACT,GAAG,CAAC,CAA2B;AAAA,MAC/B;AAAA,MACA;AAAA,MACA,gBAAgB;AAAA,IAClB;AAAA,EAEF,SAAS,OAAO;AACd,UAAM,WAAW,KAAK,IAAI,IAAI;AAC9B,YAAQ,MAAM,yCAAoC,QAAQ,OAAO,KAAK;AAEtE,WAAO;AAAA,MACL,SAAS,CAAC;AAAA,MACV,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,WAAW,CAAC;AAAA,MACZ,OAAO,MAAM;AAAA,IACf;AAAA,EACF;AACF;AA1IsB;AA4ItB,eAAe,uBAAuB,QAAwB,YAA0C;AACtG,QAAM,iBAAiB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AACjE,QAAM,qBAAqB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AACrE,QAAM,cAAc,OAAO,OAAO,SAAO,IAAI,SAAS,MAAM;AAE5D,SAAO;AAAA,IACL,SAAS,oBAAoB,OAAO,MAAM,iBAAiB,WAAW,MAAM,0BAA0B,eAAe,MAAM,aAAa,mBAAmB,MAAM,qBAAqB,YAAY,MAAM;AAAA,IACxM,UAAU;AAAA,MACR,eAAe,OAAO,MAAM;AAAA,MAC5B,GAAG,eAAe,MAAM;AAAA,MACxB,GAAG,mBAAmB,MAAM;AAAA,MAC5B,YAAY,SAAS,IAAI,GAAG,YAAY,MAAM,wCAAwC;AAAA,MACtF,mCAAmC,KAAK,OAAO,IAAI,OAAO,OAAO,CAAC,KAAK,QAAQ,OAAO,IAAI,OAAO,aAAa,IAAI,CAAC,KAAK,OAAO,SAAS,WAAW,WAAW,GAAG,CAAC;AAAA,IACpK;AAAA,IACA,cAAc,CAAC;AAAA,IACf,iBAAiB;AAAA,MACf,eAAe,SAAS,IAAI,0BAA0B,eAAe,CAAC,EAAE,IAAI,KAAK;AAAA,MACjF,mBAAmB,SAAS,IAAI,iBAAiB,mBAAmB,CAAC,EAAE,IAAI,KAAK;AAAA,MAChF,YAAY,SAAS,IAAI,oDAAoD;AAAA,IAC/E;AAAA,IACA,aAAa;AAAA,MACX,cAAc,KAAK,OAAO,IAAI,OAAO,OAAO,CAAC,KAAK,QAAQ,OAAO,IAAI,OAAO,aAAa,IAAI,CAAC,KAAK,OAAO,SAAS,WAAW,WAAW,GAAG;AAAA,MAC5I,aAAa;AAAA,MACb,QAAQ,OAAO,OAAO,UAAQ,IAAI,OAAO,aAAa,KAAK,CAAC,EAAE,IAAI,SAAO,GAAG,IAAI,IAAI,qBAAqB;AAAA,IAC3G;AAAA,IACA,UAAU;AAAA,MACR,QAAQ,eAAe,SAAS,IAAI,CAAC,4BAA4B,eAAe,CAAC,EAAE,IAAI,QAAQ,eAAe,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAA,MAC5H,UAAU,CAAC;AAAA,MACX,aAAa,YAAY,SAAS,IAAI,CAAC,gDAAgD,IAAI,CAAC;AAAA,MAC5F,eAAe,eAAe,IAAI,UAAQ;AAAA,QACxC,QAAQ,IAAI;AAAA,QACZ,MAAM;AAAA,QACN,aAAa,GAAG,IAAI,IAAI;AAAA,MAC1B,EAAE;AAAA,IACJ;AAAA,IACA,kBAAkB;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,kBAAkB;AAAA,MAChB;AAAA,QACE,QAAQ,eAAe,SAAS,IAAI,0BAA0B,eAAe,CAAC,EAAE,IAAI,KAAK;AAAA,QACzF,UAAU;AAAA,QACV,aAAa;AAAA,QACb,WAAW;AAAA,MACb;AAAA,MACA;AAAA,QACE,QAAQ,mBAAmB,SAAS,IAAI,0BAA0B,mBAAmB,CAAC,EAAE,IAAI,kBAAkB;AAAA,QAC9G,UAAU;AAAA,QACV,aAAa;AAAA,QACb,WAAW;AAAA,MACb;AAAA,MACA;AAAA,QACE,QAAQ,eAAe,SAAS,IAAI,WAAW,eAAe,CAAC,EAAE,IAAI,OAAO,eAAe,CAAC,EAAE,IAAI,KAAK;AAAA,QACvG,UAAU;AAAA,QACV,aAAa;AAAA,QACb,WAAW;AAAA,MACb;AAAA,IACF;AAAA,IACA,YAAY,MAAM,mBAAmB,QAAQ,YAAY,MAAM,IAAI;AAAA,EACrE;AACF;AA9De;AAgER,SAAS,oBAAoB,QAAwB,YAAwB;AAClF,MAAI,OAAO,WAAW,KAAK,WAAW,WAAW,GAAG;AAClD,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,QACL,GAAG,CAAC,SAAS;AAAA,QACb,GAAG,CAAC,CAAC;AAAA,QACL,MAAM;AAAA,MACR,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO;AAAA,QACP,OAAO,EAAE,OAAO,aAAa;AAAA,QAC7B,OAAO,EAAE,OAAO,SAAS;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AAGA,QAAM,gBAAgB,OAAO,KAAK,SAAO,IAAI,SAAS,QAAQ;AAE9D,QAAM,eAAe,OAAO,KAAK,SAAO,IAAI,SAAS,QAAQ;AAE7D,MAAI,CAAC,eAAe;AAElB,UAAM,aAAa,CAAC,GAAG,IAAI,IAAI,WAAW,IAAI,SAAO,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1E,UAAM,SAAS,WAAW;AAAA,MAAI,SAC5B,WAAW,OAAO,SAAO,IAAI,OAAO,CAAC,EAAE,IAAI,MAAM,GAAG,EAAE;AAAA,IACxD;AAEA,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,QACH,MAAM;AAAA,MACR,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,YAAY,OAAO,CAAC,EAAE,IAAI;AAAA,QACjC,OAAO,EAAE,OAAO,OAAO,CAAC,EAAE,KAAK;AAAA,QAC/B,OAAO,EAAE,OAAO,QAAQ;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAEA,QAAM,UAAU,gBAAgB,OAAO,CAAC;AACxC,QAAM,UAAU;AAEhB,SAAO;AAAA,IACL,MAAM,CAAC;AAAA,MACL,GAAG,WAAW,IAAI,SAAO,IAAI,QAAQ,IAAI,CAAC;AAAA,MAC1C,GAAG,WAAW,IAAI,SAAO,IAAI,QAAQ,IAAI,CAAC;AAAA,MAC1C,MAAM;AAAA,IACR,CAAC;AAAA,IACD,QAAQ;AAAA,MACN,OAAO,GAAG,QAAQ,IAAI,OAAO,QAAQ,IAAI;AAAA,MACzC,OAAO,EAAE,OAAO,QAAQ,KAAK;AAAA,MAC7B,OAAO,EAAE,OAAO,QAAQ,KAAK;AAAA,IAC/B;AAAA,EACF;AACF;AAzDgB;;;AC9zChB,IAAM,eAAe;AAGd,SAAS,mBAAmB,QAA8B;AAE/D,SAAO;AAAA,IACL,MAAM;AAAA,MACJ,aAAa;AAAA,QACX,QAAQ,8BAAO,WAAW;AACxB,gBAAM,WAAW,MAAM,MAAM,wDAAwD;AAAA,YACnF,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,iBAAiB,UAAU,MAAM;AAAA,cACjC,gBAAgB;AAAA,YAClB;AAAA,YACA,MAAM,KAAK,UAAU;AAAA,cACnB,OAAO,OAAO;AAAA,cACd,UAAU,OAAO;AAAA,cACjB,aAAa,OAAO,eAAe;AAAA,cACnC,YAAY,OAAO,cAAc;AAAA,cACjC,QAAQ,OAAO,UAAU;AAAA,YAC3B,CAAC;AAAA,UACH,CAAC;AAED,cAAI,CAAC,SAAS,IAAI;AAChB,kBAAM,IAAI,MAAM,qBAAqB,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAAA,UAC/E;AAEA,iBAAO,MAAM,SAAS,KAAK;AAAA,QAC7B,GArBQ;AAAA,MAsBV;AAAA,IACF;AAAA,EACF;AACF;AA9BgB;AAiChB,eAAsB,uBAAuB,OAAe,QAAwC;AAClG,MAAI;AACF,UAAM,WAAW;AAAA,MACf;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,OAAO,KAAK,YAAY,OAAO;AAAA,MACpD,OAAO;AAAA,MACP;AAAA,MACA,aAAa;AAAA,MACb,YAAY;AAAA,IACd,CAAC;AAED,UAAM,kBAAkB,SAAS,QAAQ,CAAC,EAAE,QAAQ,QAAQ,MAAM,EAAE,YAAY;AAChF,WAAO,oBAAoB;AAAA,EAC7B,SAAS,OAAO;AACd,YAAQ,MAAM,iCAAiC,KAAK;AAEpD,WAAO;AAAA,EACT;AACF;AA3BsB;AAgCtB,SAAS,sBAAsB,MAAgB,OAAuB;AACpE,SAAO,wCAAwC,KAAK,KAAK,IAAI,CAAC;AAAA;AAAA,GAE7D,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQR;AAXS;AAcT,SAAS,gBAAgB,MAAgB,OAAuB;AAC9D,SAAO,wCAAwC,KAAK,KAAK,IAAI,CAAC;AAAA;AAAA,GAE7D,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOR;AAVS;AAaT,eAAsB,oBACpB,OACA,QACA,QAC+B;AAC/B,MAAI;AACF,UAAM,aAAa,MAAM,uBAAuB,OAAO,MAAM;AAC7D,UAAM,OAAO,OAAO,IAAI,SAAO,IAAI,IAAI;AACvC,UAAM,SAAS,aACX,sBAAsB,MAAM,KAAK,IACjC,gBAAgB,MAAM,KAAK;AAE/B,UAAM,WAAW;AAAA,MACf;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,SAAS;AAAA,MACX;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,OAAO,KAAK,YAAY,OAAO;AAAA,MACpD,OAAO;AAAA,MACP;AAAA,MACA,aAAa;AAAA,MACb,YAAY;AAAA,IACd,CAAC;AAED,UAAM,eAAe,SAAS,QAAQ,CAAC,EAAE,QAAQ;AACjD,UAAM,OAAO,sBAAsB,YAAY;AAE/C,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,OAAO,OAAO,SAAY;AAAA,IAC5B;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAO;AAAA,MACL,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,OAAO,MAAM;AAAA,IACf;AAAA,EACF;AACF;AA9CsB;AAiDf,SAAS,eAAe,MAAc,MAAa,YAAsC;AAC9F,MAAI;AACF,YAAQ,IAAI,mBAAmB,IAAI;AACnC,YAAQ,IAAI,cAAc,KAAK,MAAM;AACrC,YAAQ,IAAI,gBAAgB,UAAU;AAEtC,QAAI,cAAc,KAAK,SAAS,MAAM,GAAG;AAEvC,YAAM,aAAa,0BAA0B,MAAM,IAAI;AAEvD,UAAI,YAAY;AACd,eAAO;AAAA,UACL,QAAQ;AAAA,YACN,MAAM;AAAA,YACN,WAAW;AAAA,YACX,aAAa;AAAA,YACb;AAAA,YACA,YAAY,KAAK;AAAA,UACnB;AAAA,QACF;AAAA,MACF,OAAO;AAEL,cAAM,gBAAgB,iCAAiC,MAAM,IAAI;AACjE,eAAO;AAAA,UACL,QAAQ;AAAA,YACN,MAAM;AAAA,YACN,WAAW;AAAA,YACX,aAAa;AAAA,YACb;AAAA,YACA,YAAY,KAAK;AAAA,UACnB;AAAA,QACF;AAAA,MACF;AAAA,IACF,OAAO;AAEL,YAAM,aAAa,sBAAsB,MAAM,IAAI;AACnD,aAAO;AAAA,QACL,QAAQ;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,aAAa;AAAA,UACb;AAAA,UACA,YAAY,KAAK;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,OAAO,yBAAyB,MAAM,OAAO;AAAA,IAC/C;AAAA,EACF;AACF;AApDgB;AAuDhB,SAAS,0BAA0B,MAAc,MAAyB;AACxE,MAAI;AAEF,UAAM,eAAe,kBAAkB,IAAI;AAE3C,QAAI,aAAa,cAAc,OAAO;AACpC,aAAO,yBAAyB,cAAc,IAAI;AAAA,IACpD,WAAW,aAAa,cAAc,UAAU,aAAa,cAAc,QAAQ;AACjF,aAAO,0BAA0B,cAAc,IAAI;AAAA,IACrD,WAAW,aAAa,cAAc,WAAW;AAC/C,aAAO,6BAA6B,cAAc,IAAI;AAAA,IACxD,WAAW,aAAa,cAAc,UAAU,aAAa,cAAc,aAAa;AACtF,aAAO,0BAA0B,cAAc,IAAI;AAAA,IACrD,WAAW,aAAa,cAAc,OAAO;AAC3C,aAAO,yBAAyB,cAAc,IAAI;AAAA,IACpD,WAAW,aAAa,cAAc,aAAa;AACjD,aAAO,8BAA8B,cAAc,IAAI;AAAA,IACzD;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,0CAA0C,KAAK;AAC7D,WAAO;AAAA,EACT;AACF;AAxBS;AA2BT,SAAS,kBAAkB,MAAmB;AAC5C,QAAM,WAAgB;AAAA,IACpB,WAAW;AAAA,IACX,SAAS,CAAC;AAAA,IACV,YAAY,CAAC;AAAA,IACb,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,aAAa;AAAA,EACf;AAGA,MAAI,KAAK,SAAS,mBAAqB,KAAK,KAAK,SAAS,YAAY,KAAK,KAAK,SAAS,UAAU,KAAK,KAAK,SAAS,kCAAoC,GAAG;AAC3J,aAAS,YAAY;AAAA,EACvB,WAAW,KAAK,SAAS,oBAAsB,KAAK,KAAK,SAAS,QAAQ,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,SAAS,aAAc,GAAG;AAC1I,aAAS,YAAY;AAAA,EACvB,WAAW,KAAK,SAAS,cAAc,KAAK,KAAK,SAAS,gBAAkB,KAAK,KAAK,SAAS,gBAAkB,GAAG;AAClH,aAAS,YAAY;AAAA,EACvB,WAAW,KAAK,SAAS,WAAW,KAAK,KAAK,SAAS,aAAe,KAAK,KAAK,SAAS,QAAQ,GAAG;AAClG,aAAS,YAAY;AAAA,EACvB,WAAW,KAAK,SAAS,UAAU,KAAK,KAAK,SAAS,YAAc,GAAG;AACrE,aAAS,YAAY;AAAA,EACvB,WAAW,KAAK,SAAS,KAAK,KAAK,KAAK,SAAS,SAAS,GAAG;AAC3D,aAAS,YAAY;AAAA,EACvB;AAGA,QAAM,eAAe;AAAA,IACnB,KAAK,MAAM,wBAAwB;AAAA,IACnC,KAAK,MAAM,gCAAgC;AAAA,IAC3C,KAAK,MAAM,iCAAiC;AAAA,EAC9C;AACA,QAAM,aAAa,aAAa,KAAK,WAAS,UAAU,IAAI;AAC5D,MAAI,WAAY,UAAS,QAAQ,WAAW,CAAC;AAG7C,QAAM,gBAAgB;AAAA,IACpB,KAAK,MAAM,yBAAyB;AAAA,IACpC,KAAK,MAAM,iCAAiC;AAAA,IAC5C,KAAK,MAAM,kCAAkC;AAAA,EAC/C;AACA,QAAM,cAAc,cAAc,KAAK,WAAS,UAAU,IAAI;AAC9D,MAAI,YAAa,UAAS,SAAS,YAAY,CAAC;AAEhD,QAAM,gBAAgB;AAAA,IACpB,KAAK,MAAM,yBAAyB;AAAA,IACpC,KAAK,MAAM,iCAAiC;AAAA,IAC5C,KAAK,MAAM,kCAAkC;AAAA,EAC/C;AACA,QAAM,cAAc,cAAc,KAAK,WAAS,UAAU,IAAI;AAC9D,MAAI,YAAa,UAAS,SAAS,YAAY,CAAC;AAGhD,QAAM,gBAAgB,KAAK,MAAM,yBAAyB;AAC1D,MAAI,eAAe;AACjB,aAAS,UAAU,CAAC,GAAG,IAAI,IAAI,cAAc,IAAI,WAAS,MAAM,MAAM,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC;AAAA,EAChG;AAGA,QAAM,wBAAwB,KAAK,MAAM,sFAAsF;AAC/H,MAAI,uBAAuB;AACzB,QAAI,sBAAsB,CAAC,EAAG,UAAS,QAAQ,KAAK,sBAAsB,CAAC,CAAC;AAC5E,QAAI,sBAAsB,CAAC,EAAG,UAAS,QAAQ,KAAK,sBAAsB,CAAC,CAAC;AAAA,EAC9E;AAGA,WAAS,UAAU,CAAC,GAAG,IAAI,IAAI,SAAS,OAAO,CAAC;AAGhD,QAAM,eAAe,KAAK,MAAM,+BAA+B;AAC/D,MAAI,aAAc,UAAS,UAAU,aAAa,CAAC;AAGnD,MAAI,KAAK,SAAS,SAAS,EAAG,UAAS,cAAc;AAAA,WAC5C,KAAK,SAAS,QAAQ,EAAG,UAAS,cAAc;AAAA,WAChD,KAAK,SAAS,UAAU,EAAG,UAAS,cAAc;AAAA,WAClD,KAAK,SAAS,iBAAiB,EAAG,UAAS,cAAc;AAAA,WACzD,KAAK,SAAS,WAAW,EAAG,UAAS,cAAc;AAAA,WACnD,KAAK,SAAS,QAAQ,EAAG,UAAS,cAAc;AAEzD,UAAQ,IAAI,mCAA4B,QAAQ;AAEhD,SAAO;AACT;AApFS;AAuFT,SAAS,yBAAyB,UAAe,MAAkB;AACjE,MAAI;AACF,QAAI;AAEJ,QAAI,SAAS,WAAW,SAAS,eAAe,SAAS,QAAQ,UAAU,GAAG;AAE5E,YAAM,SAAS,KAAK,OAAO,CAAC,KAAK,QAAQ;AACvC,cAAM,MAAM,IAAI,SAAS,OAAO;AAChC,YAAI,CAAC,IAAI,GAAG,EAAG,KAAI,GAAG,IAAI,CAAC;AAC3B,YAAI,GAAG,EAAE,KAAK,GAAG;AACjB,eAAO;AAAA,MACT,GAAG,CAAC,CAAC;AAEL,YAAM,UAAU,OAAO,KAAK,MAAM;AAClC,YAAM,UAAU,QAAQ,IAAI,SAAO;AACjC,cAAM,YAAY,OAAO,GAAG;AAC5B,cAAM,SAAS,UAAU,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAC3F,YAAI,SAAS,gBAAgB,OAAQ,QAAO,OAAO,OAAO,CAAC,GAAE,MAAM,IAAE,GAAG,CAAC,IAAI,OAAO;AACpF,YAAI,SAAS,gBAAgB,MAAO,QAAO,OAAO,OAAO,CAAC,GAAE,MAAM,IAAE,GAAG,CAAC;AACxE,eAAO,OAAO;AAAA,MAChB,CAAC;AAED,kBAAY,CAAC;AAAA,QACX,GAAG;AAAA,QACH,GAAG;AAAA,QACH,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,QACA,MAAM,QAAQ,IAAI,OAAK,EAAE,eAAe,CAAC;AAAA,QACzC,cAAc;AAAA,MAChB,CAAC;AAAA,IACH,WAAW,SAAS,QAAQ,UAAU,GAAG;AAEvC,kBAAY,CAAC;AAAA,QACX,GAAG,KAAK,IAAI,SAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC;AAAA,QAC3C,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC;AAAA,QACnD,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO,EAAE,MAAM,SAAS,SAAS,aAAa,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACnF,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,WAAW,SAAS,QAAQ,CAAC,EAAE;AAAA,QAC3E,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,QAAQ,CAAC,KAAK,SAAS;AAAA,QACnE,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAO;AAAA,EACT;AACF;AA/DS;AAkET,SAAS,0BAA0B,UAAe,MAAkB;AAClE,MAAI;AACF,QAAI,SAAS,QAAQ,SAAS,EAAG,QAAO;AAExC,UAAM,YAAY,CAAC;AAAA,MACjB,GAAG,KAAK,IAAI,SAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC;AAAA,MAC3C,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC;AAAA,MACnD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,MACnC,QAAQ,EAAE,OAAO,WAAW,MAAM,EAAE;AAAA,IACtC,CAAC;AAED,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO,EAAE,MAAM,SAAS,SAAS,cAAc,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACpF,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,QAAQ,CAAC,EAAE;AAAA,QACvD,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,QAAQ,CAAC,EAAE;AAAA,QACvD,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,gCAAgC,KAAK;AACnD,WAAO;AAAA,EACT;AACF;AA5BS;AA+BT,SAAS,6BAA6B,UAAe,MAAkB;AACrE,MAAI;AACF,QAAI,SAAS,QAAQ,SAAS,EAAG,QAAO;AAExC,UAAM,YAAY,CAAC;AAAA,MACjB,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC;AAAA,MACnD,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC;AAAA,MACnD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,MACrC;AAAA,IACF,CAAC;AAED,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO,EAAE,MAAM,SAAS,SAAS,gBAAgB,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACtF,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,QAAQ,CAAC,EAAE;AAAA,QACvD,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,QAAQ,CAAC,EAAE;AAAA,QACvD,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AACtD,WAAO;AAAA,EACT;AACF;AA/BS;AAkCT,SAAS,0BAA0B,UAAe,MAAkB;AAClE,MAAI;AACF,QAAI,SAAS,QAAQ,SAAS,EAAG,QAAO;AAExC,UAAM,SAAS,KAAK,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAEtF,UAAM,YAAY,CAAC;AAAA,MACjB,GAAG;AAAA,MACH,MAAM;AAAA,MACN,QAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,KAAK,OAAO,MAAM,CAAC,CAAC,CAAC;AAAA,MACvE,QAAQ;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,QACT,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,MACrC;AAAA,IACF,CAAC;AAED,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO,EAAE,MAAM,SAAS,SAAS,gBAAgB,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACtF,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,QAAQ,CAAC,EAAE;AAAA,QACvD,OAAO,EAAE,OAAO,YAAY;AAAA,QAC5B,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAO;AAAA,EACT;AACF;AAhCS;AAmCT,SAAS,yBAAyB,UAAe,MAAkB;AACjE,MAAI;AACF,QAAI,SAAS,QAAQ,SAAS,EAAG,QAAO;AAGxC,UAAM,SAAS,KAAK,OAAO,CAAC,KAAK,QAAQ;AACvC,YAAM,QAAQ,IAAI,SAAS,QAAQ,CAAC,CAAC;AACrC,UAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK;AACjC,aAAO;AAAA,IACT,GAAG,CAAC,CAAC;AAEL,UAAM,SAAS,OAAO,KAAK,MAAM;AACjC,UAAM,SAAS,OAAO,OAAO,MAAM;AAEnC,UAAM,YAAY,CAAC;AAAA,MACjB;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,QAAQ,CAAC,WAAW,WAAW,WAAW,WAAW,WAAW,SAAS;AAAA,QACzE,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,MACrC;AAAA,MACA,UAAU;AAAA,MACV,cAAc;AAAA,IAChB,CAAC;AAED,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO,EAAE,MAAM,SAAS,SAAS,gBAAgB,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACtF,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAClD,WAAO;AAAA,EACT;AACF;AAvCS;AA0CT,SAAS,8BAA8B,UAAe,MAAkB;AACtE,MAAI;AACF,QAAI,SAAS,QAAQ,SAAS,EAAG,QAAO;AAExC,UAAM,YAAY;AAAA,MAChB;AAAA,QACE,GAAG,KAAK,IAAI,SAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC;AAAA,QAC3C,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM,SAAS,QAAQ,CAAC;AAAA,QACxB,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACnC,OAAO;AAAA,MACT;AAAA,MACA;AAAA,QACE,GAAG,KAAK,IAAI,SAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC;AAAA,QAC3C,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,SAAS,QAAQ,CAAC,CAAC,CAAC,CAAC;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM,SAAS,QAAQ,CAAC;AAAA,QACxB,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACnC,OAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,OAAO,EAAE,MAAM,SAAS,SAAS,mBAAmB,MAAM,EAAE,MAAM,IAAI,OAAO,UAAU,EAAE;AAAA,QACzF,OAAO,EAAE,OAAO,SAAS,UAAU,SAAS,QAAQ,CAAC,EAAE;AAAA,QACvD,OAAO;AAAA,UACL,OAAO,SAAS,QAAQ,CAAC;AAAA,UACzB,MAAM;AAAA,UACN,OAAO;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACN,OAAO,SAAS,QAAQ,CAAC;AAAA,UACzB,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,OAAO;AAAA,QACT;AAAA,QACA,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AACxD,WAAO;AAAA,EACT;AACF;AAlDS;AAqDT,SAAS,iCAAiC,MAAc,MAAkB;AAExE,MAAI,KAAK,WAAW,GAAG;AACrB,WAAO;AAAA,MACL,MAAM,CAAC,EAAE,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,MAAM,MAAM,CAAC;AAAA,MAC9C,QAAQ,EAAE,OAAO,oBAAoB;AAAA,IACvC;AAAA,EACF;AAEA,QAAM,OAAO,OAAO,KAAK,KAAK,CAAC,CAAC;AAChC,QAAM,iBAAiB,KAAK;AAAA,IAAO,SACjC,CAAC,MAAM,OAAO,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE,GAAG,MAAM,QAAQ,KAAK,CAAC,EAAE,GAAG,MAAM;AAAA,EAC5E;AACA,QAAM,gBAAgB,KAAK;AAAA,IAAO,SAChC,MAAM,OAAO,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE,GAAG,MAAM,QAAQ,KAAK,CAAC,EAAE,GAAG,MAAM;AAAA,EAC3E;AAEA,MAAI,eAAe,UAAU,GAAG;AAE9B,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,QACL,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC;AAAA,QACjD,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC;AAAA,QACjD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,EAAE,OAAO,WAAW,MAAM,EAAE;AAAA,MACtC,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,eAAe,CAAC,CAAC,OAAO,eAAe,CAAC,CAAC;AAAA,QACnD,OAAO,EAAE,OAAO,eAAe,CAAC,EAAE;AAAA,QAClC,OAAO,EAAE,OAAO,eAAe,CAAC,EAAE;AAAA,QAClC,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF,WAAW,eAAe,UAAU,KAAK,cAAc,UAAU,GAAG;AAElE,WAAO;AAAA,MACL,MAAM,CAAC;AAAA,QACL,GAAG,KAAK,IAAI,SAAO,IAAI,cAAc,CAAC,CAAC,CAAC;AAAA,QACxC,GAAG,KAAK,IAAI,SAAO,OAAO,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC;AAAA,QACjD,MAAM;AAAA,QACN,QAAQ,EAAE,OAAO,UAAU;AAAA,MAC7B,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,eAAe,CAAC,CAAC,OAAO,cAAc,CAAC,CAAC;AAAA,QAClD,OAAO,EAAE,OAAO,cAAc,CAAC,EAAE;AAAA,QACjC,OAAO,EAAE,OAAO,eAAe,CAAC,EAAE;AAAA,QAClC,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAGA,SAAO;AAAA,IACL,MAAM,CAAC,EAAE,GAAG,MAAM,GAAG,KAAK,IAAI,MAAM,CAAC,GAAG,MAAM,MAAM,CAAC;AAAA,IACrD,QAAQ,EAAE,OAAO,gBAAgB;AAAA,EACnC;AACF;AA7DS;AAgET,SAAS,sBAAsB,MAAc,MAAkB;AAE7D,MAAI,KAAK,SAAS,aAAa,GAAG;AAChC,UAAM,iBAAiB,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE;AAAA,MAAO,SACjD,CAAC,MAAM,OAAO,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AAAA,IAC7B;AAEA,UAAM,QAAQ,CAAC;AACf,mBAAe,QAAQ,SAAO;AAC5B,YAAM,SAAS,KAAK,IAAI,SAAO,OAAO,IAAI,GAAG,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AACtE,UAAI,OAAO,SAAS,GAAG;AACrB,cAAM,GAAG,IAAI;AAAA,UACX,OAAO,OAAO;AAAA,UACd,MAAM,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AAAA,UACjD,KAAK,KAAK,IAAI,GAAG,MAAM;AAAA,UACvB,KAAK,KAAK,IAAI,GAAG,MAAM;AAAA,QACzB;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO,EAAE,MAAM,cAAc,MAAM,MAAM;AAAA,EAC3C,WAAW,KAAK,SAAS,SAAS,GAAG;AACnC,WAAO,EAAE,MAAM,WAAW,MAAM,KAAK,MAAM,GAAG,CAAC,EAAE;AAAA,EACnD,WAAW,KAAK,SAAS,QAAQ,GAAG;AAClC,WAAO,EAAE,MAAM,SAAS,MAAM,CAAC,KAAK,QAAQ,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE;AAAA,EAC3E,WAAW,KAAK,SAAS,SAAS,GAAG;AACnC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,QACJ,MAAM,KAAK;AAAA,QACX,SAAS,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE;AAAA,QAC9B,cAAc,OAAO,KAAK,KAAK,CAAC,CAAC;AAAA,MACnC;AAAA,IACF;AAAA,EACF;AAEA,SAAO,EAAE,MAAM,UAAU,MAAM,oBAAoB;AACrD;AArCS;AAwCT,SAAS,iBAAiB,OAAe,QAAqB;AAC5D,QAAM,UAAU,QAAQ;AACxB,QAAM,SAAS,QAAQ,SAAS;AAEhC,MAAI,SAAS;AACX,WAAO,oBAAoB,KAAK;AAAA,sBACd,OAAO,KAAK;AAAA;AAAA,EAEhC,WAAW,QAAQ;AACjB,WAAO,oBAAoB,KAAK;AAAA;AAAA,EAElC,OAAO,eAAe,eAAe;AAAA;AAAA,EAErC,OAAO;AACL,WAAO,oBAAoB,KAAK;AAAA,uBACb,QAAQ,SAAS,QAAQ,eAAe,mBAAmB;AAAA;AAAA,EAEhF;AACF;AAlBS;AAqBT,eAAsB,eACpB,OACA,QACA,QAC0B;AAC1B,MAAI;AACF,UAAM,SAAS,iBAAiB,OAAO,MAAM;AAE7C,UAAM,WAAW,MAAM,OAAO,KAAK,YAAY,OAAO;AAAA,MACpD,OAAO;AAAA,MACP,UAAU;AAAA,QACR;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,aAAa;AAAA,MACb,YAAY;AAAA,IACd,CAAC;AAED,UAAM,eAAe,SAAS,QAAQ,CAAC,EAAE,QAAQ;AAGjD,UAAM,EAAE,UAAU,YAAY,IAAI,8BAA8B,YAAY;AAE5E,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAC5C,WAAO;AAAA,MACL,UAAU;AAAA,MACV,aAAa;AAAA,MACb,OAAO,MAAM;AAAA,IACf;AAAA,EACF;AACF;AAzCsB;AA4CtB,eAAsB,iBAAiB,QAAwB,MAAa,QAAuC;AACjH,MAAI;AACF,UAAM,SAAS,wBAAwB,KAAK,MAAM,aAAa,OAAO,MAAM;AAAA,WACrE,OAAO,IAAI,SAAO,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC;AAAA,cACnC,OAAO,IAAI,SAAO,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlE,UAAM,WAAW,MAAM,OAAO,KAAK,YAAY,OAAO;AAAA,MACpD,OAAO;AAAA,MACP,UAAU;AAAA,QACR;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,aAAa;AAAA,MACb,YAAY;AAAA,IACd,CAAC;AAED,WAAO,SAAS,QAAQ,CAAC,EAAE,QAAQ;AAAA,EACrC,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,WAAO,sCAAsC,MAAM,OAAO;AAAA,EAC5D;AACF;AAhCsB;AAoCtB,SAAS,sBAAsB,MAAsB;AACnD,QAAM,QAAQ,KAAK,QAAQ,WAAW;AACtC,MAAI,UAAU,IAAI;AAChB,WAAO;AAAA,EACT;AACA,QAAM,YAAY,QAAQ,YAAY;AACtC,QAAM,MAAM,KAAK,QAAQ,OAAO,SAAS;AACzC,MAAI,QAAQ,IAAI;AACd,WAAO;AAAA,EACT;AACA,SAAO,KAAK,UAAU,WAAW,GAAG,EAAE,KAAK;AAC7C;AAXS;AAaT,SAAS,8BAA8B,MAAyD;AAE9F,QAAM,aAAa,KAAK,QAAQ,SAAS;AACzC,QAAM,WAAW,KAAK,QAAQ,UAAU;AAExC,MAAI,WAAW;AACf,MAAI,cAAc;AAElB,MAAI,eAAe,MAAM,aAAa,IAAI;AACxC,eAAW,KAAK,UAAU,aAAa,GAAG,QAAQ,EAAE,KAAK;AACzD,kBAAc,KAAK,QAAQ,wBAAwB,EAAE,EAAE,KAAK;AAAA,EAC9D;AAEA,SAAO,EAAE,UAAU,YAAY;AACjC;AAdS;AAuBT,OAAO,UAAU,QAAQ,WAAW;AAClC,SAAO,KAAK,KAAK;AACnB;AAGA,eAAsB,yBACpB,QACA,MACA,UACA,QACgB;AAChB,MAAI;AACF,YAAQ,IAAI,uEAAgE;AAG5E,UAAM,kBAAkB,sBAAsB,QAAQ,MAAM,QAAQ;AAEpE,UAAM,WAAW,MAAM,OAAO,KAAK,YAAY,OAAO;AAAA,MACpD,OAAO;AAAA,MACP,UAAU;AAAA,QACR;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,QACA;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QACX;AAAA,MACF;AAAA,MACA,aAAa;AAAA,MACb,YAAY;AAAA,IACd,CAAC;AAED,QAAI;AACJ,QAAI;AACF,YAAM,eAAe,SAAS,QAAQ,CAAC,EAAE,QAAQ;AAGjD,YAAM,YAAY,aAAa,MAAM,aAAa;AAClD,YAAM,WAAW,YAAY,UAAU,CAAC,IAAI;AAE5C,iCAA2B,KAAK,MAAM,QAAQ;AAAA,IAChD,SAAS,WAAW;AAClB,cAAQ,MAAM,4CAA4C,SAAS;AACnE,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AAGA,UAAM,SAAS,CAAC;AAEhB,QAAI,0BAA0B,UAAU,MAAM,QAAQ,yBAAyB,MAAM,GAAG;AACtF,iBAAW,kBAAkB,yBAAyB,OAAO,MAAM,GAAG,CAAC,GAAG;AACxE,cAAM,QAAQ,MAAM,uBAAuB,gBAAgB,QAAQ,MAAM,MAAM;AAC/E,YAAI,OAAO;AAET,gBAAM,iBAAiB;AAAA,YACrB,OAAO,MAAM,UAAU,SAAS,eAAe;AAAA,YAC/C,aAAa,MAAM,UAAU,mBAAmB,eAAe,oBAAoB;AAAA,YACnF,WAAW;AAAA,cACT,MAAM,MAAM;AAAA,cACZ,QAAQ,MAAM;AAAA,YAChB;AAAA,YACA,UAAU,MAAM,UAAU,YAAY,eAAe,YAAY;AAAA,UACnE;AACA,iBAAO,KAAK,cAAc;AAAA,QAC5B;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,IAAI,oBAAe,OAAO,MAAM,+BAA+B;AACvE,WAAO,OAAO,SAAS,IAAI,SAAS,2BAA2B,QAAQ,MAAM,QAAQ;AAAA,EAEvF,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AAEtD,WAAO,2BAA2B,QAAQ,MAAM,QAAQ;AAAA,EAC1D;AACF;AAxEsB;AA0EtB,SAAS,sBAAsB,QAAwB,MAAa,UAAuB;AACzF,QAAM,cAAc,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ,EAAE,IAAI,SAAO,IAAI,IAAI;AACnF,QAAM,kBAAkB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ,EAAE,IAAI,SAAO,IAAI,IAAI;AACvF,QAAM,WAAW,OAAO,OAAO,SAAO,IAAI,SAAS,MAAM,EAAE,IAAI,SAAO,IAAI,IAAI;AAE9E,SAAO;AAAA;AAAA;AAAA,UAGC,KAAK,MAAM;AAAA,qBACA,YAAY,KAAK,IAAI,CAAC;AAAA,yBAClB,gBAAgB,KAAK,IAAI,CAAC;AAAA,kBACjC,SAAS,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA,EAGnC,KAAK,UAAU,UAAU,oBAAoB,UAAU,YAAY,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA,EAG/E,KAAK,UAAU,UAAU,gBAAgB,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA,EAGrD,KAAK,UAAU,UAAU,YAAY,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BnD;AA9CS;AAgDT,eAAe,uBACb,gBACA,QACA,MACA,QACqB;AACrB,MAAI;AAEF,UAAM,YAAY,kBAAkB,gBAAgB,MAAM;AAG1D,UAAM,aAAa,0BAA0B,WAAW,IAAI;AAE5D,QAAI,YAAY;AACd,aAAO;AAAA,QACL,GAAG;AAAA,QACH,UAAU;AAAA,UACR,OAAO,eAAe;AAAA,UACtB,MAAM,eAAe;AAAA,UACrB,iBAAiB,eAAe;AAAA,UAChC,UAAU,eAAe;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AACxD,WAAO;AAAA,EACT;AACF;AA9Be;AAgCf,SAAS,kBAAkB,gBAAqB,QAAgC;AAC9E,QAAM,EAAE,MAAM,gBAAgB,kBAAkB,gBAAgB,YAAY,IAAI;AAEhF,MAAI,OAAO;AAEX,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,UAAI,kBAAkB,eAAe,gBAAgB,QAAQ;AAC3D,gBAAQ,wBAAwB,cAAc,OAAO,cAAc,MAAM,WAAW;AAAA;AACpF,gBAAQ;AAAA;AACR,gBAAQ,cAAc,eAAe,KAAK;AAAA;AAC1C,gBAAQ,eAAe,cAAc;AAAA;AACrC,gBAAQ,eAAe,cAAc,KAAK,WAAW;AAAA;AAAA,MACvD,WAAW,kBAAkB,kBAAkB;AAC7C,gBAAQ,eAAe,cAAc,WAAW,gBAAgB;AAAA;AAChE,gBAAQ,cAAc,eAAe,KAAK;AAAA;AAC1C,gBAAQ,eAAe,cAAc;AAAA;AACrC,gBAAQ,eAAe,gBAAgB;AAAA;AAAA,MACzC;AACA;AAAA,IAEF,KAAK;AACH,UAAI,kBAAkB,kBAAkB;AACtC,gBAAQ,gBAAgB,cAAc,WAAW,gBAAgB;AAAA;AACjE,gBAAQ,cAAc,eAAe,KAAK;AAAA;AAC1C,gBAAQ,eAAe,cAAc;AAAA;AACrC,gBAAQ,eAAe,gBAAgB;AAAA;AAAA,MACzC;AACA;AAAA,IAEF,KAAK;AACH,UAAI,kBAAkB,kBAAkB;AACtC,gBAAQ,mBAAmB,cAAc,WAAW,gBAAgB;AAAA;AACpE,gBAAQ,cAAc,eAAe,KAAK;AAAA;AAC1C,gBAAQ,eAAe,cAAc;AAAA;AACrC,gBAAQ,eAAe,gBAAgB;AAAA;AAAA,MACzC;AACA;AAAA,IAEF,KAAK;AACH,cAAQ,gBAAgB,cAAc;AAAA;AACtC,cAAQ,cAAc,eAAe,KAAK;AAAA;AAC1C,cAAQ,eAAe,cAAc;AAAA;AACrC,cAAQ;AAAA;AACR;AAAA,IAEF,KAAK;AACH,cAAQ,gBAAgB,cAAc;AAAA;AACtC,cAAQ;AAAA;AACR,cAAQ,cAAc,eAAe,KAAK;AAAA;AAC1C;AAAA,IAEF,KAAK;AACH,UAAI,kBAAkB,kBAAkB;AACtC,gBAAQ;AAAA;AACR,gBAAQ,0BAA0B,cAAc;AAAA;AAChD,gBAAQ,mBAAmB,cAAc;AAAA;AACzC,gBAAQ;AAAA;AACR,gBAAQ,0BAA0B,gBAAgB;AAAA;AAClD,gBAAQ,mBAAmB,gBAAgB;AAAA;AAC3C,gBAAQ,cAAc,eAAe,KAAK;AAAA;AAAA,MAC5C;AACA;AAAA,EACJ;AAEA,UAAQ;AACR,SAAO;AACT;AAnES;AAsET,SAAS,2BAA2B,QAAwB,MAAa,UAAsB;AAC7F,QAAM,SAAS,CAAC;AAChB,QAAM,cAAc,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AAC9D,QAAM,kBAAkB,OAAO,OAAO,SAAO,IAAI,SAAS,QAAQ;AAClE,QAAM,WAAW,OAAO,OAAO,SAAO,IAAI,SAAS,MAAM;AAEzD,UAAQ,IAAI,wDAAiD;AAAA,IAC3D,aAAa,YAAY;AAAA,IACzB,iBAAiB,gBAAgB;AAAA,IACjC,UAAU,SAAS;AAAA,EACrB,CAAC;AAKD,MAAI,SAAS,SAAS,KAAK,YAAY,SAAS,KAAK,KAAK,SAAS,GAAG;AACpE,QAAI;AACF,YAAM,gBAAgB,cAAc,aAAa,IAAI,KAAK,YAAY,CAAC;AACvE,YAAM,QAAQ,wBAAwB,SAAS,CAAC,GAAG,eAAe,IAAI;AACtE,UAAI,MAAO,QAAO,KAAK,KAAK;AAAA,IAC9B,SAAS,OAAO;AACd,cAAQ,KAAK,yCAAyC,KAAK;AAAA,IAC7D;AAAA,EACF;AAGA,MAAI,gBAAgB,SAAS,KAAK,YAAY,SAAS,KAAK,KAAK,SAAS,GAAG;AAC3E,QAAI;AACF,YAAM,mBAAmB,qBAAqB,iBAAiB,IAAI;AACnE,YAAM,YAAY,cAAc,aAAa,IAAI;AAEjD,UAAI,oBAAoB,WAAW;AACjC,cAAM,QAAQ,iBAAiB,WAAW,kBAAkB,IAAI;AAChE,YAAI,MAAO,QAAO,KAAK,KAAK;AAAA,MAC9B,WAAW,gBAAgB,SAAS,KAAK,YAAY,SAAS,GAAG;AAE/D,cAAM,QAAQ,iBAAiB,YAAY,CAAC,GAAG,gBAAgB,CAAC,GAAG,IAAI;AACvE,YAAI,MAAO,QAAO,KAAK,KAAK;AAAA,MAC9B;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,iCAAiC,KAAK;AAAA,IACrD;AAAA,EACF;AAGA,MAAI,YAAY,SAAS,KAAK,KAAK,SAAS,GAAG;AAC7C,QAAI;AACF,YAAM,cAAc,uBAAuB,aAAa,IAAI;AAC5D,UAAI,aAAa;AACf,cAAM,QAAQ,0BAA0B,aAAa,IAAI;AACzD,YAAI,MAAO,QAAO,KAAK,KAAK;AAAA,MAC9B;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,0CAA0C,KAAK;AAAA,IAC9D;AAAA,EACF;AAGA,MAAI,YAAY,UAAU,KAAK,KAAK,SAAS,GAAG;AAC9C,QAAI;AACF,YAAM,oBAAoB,yBAAyB,aAAa,IAAI;AACpE,UAAI,mBAAmB;AACrB,cAAM,QAAQ,yBAAyB,kBAAkB,MAAM,kBAAkB,MAAM,IAAI;AAC3F,YAAI,MAAO,QAAO,KAAK,KAAK;AAAA,MAC9B,OAAO;AAEL,cAAM,QAAQ,yBAAyB,YAAY,CAAC,GAAG,YAAY,CAAC,GAAG,IAAI;AAC3E,YAAI,MAAO,QAAO,KAAK,KAAK;AAAA,MAC9B;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,yCAAyC,KAAK;AAAA,IAC7D;AAAA,EACF;AAGA,MAAI,gBAAgB,SAAS,KAAK,KAAK,SAAS,GAAG;AACjD,QAAI;AACF,YAAM,cAAc,qBAAqB,iBAAiB,IAAI;AAC9D,UAAI,aAAa;AACf,cAAM,QAAQ,sBAAsB,aAAa,IAAI;AACrD,YAAI,MAAO,QAAO,KAAK,KAAK;AAAA,MAC9B;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,KAAK,sCAAsC,KAAK;AAAA,IAC1D;AAAA,EACF;AAGA,MAAI,YAAY,UAAU,KAAK,gBAAgB,UAAU,KAAK,KAAK,SAAS,GAAG;AAC7E,QAAI;AAEF,YAAM,aAAa,YAAY,MAAM,GAAG,CAAC;AACzC,YAAM,cAAc,gBAAgB,CAAC;AACrC,YAAM,QAAQ,yBAAyB,YAAY,aAAa,IAAI;AACpE,UAAI,MAAO,QAAO,KAAK,KAAK;AAAA,IAC9B,SAAS,OAAO;AACd,cAAQ,KAAK,0CAA0C,KAAK;AAAA,IAC9D;AAAA,EACF;AAEA,QAAM,cAAc,OAAO,OAAO,WAAS,UAAU,IAAI;AACzD,UAAQ,IAAI,oBAAe,YAAY,MAAM,+BAA+B;AAE5E,SAAO;AACT;AAxGS;AA2GT,SAAS,cAAc,aAA6B,MAAkC;AAEpF,QAAM,mBAAmB,CAAC,WAAW,UAAU,SAAS,UAAU,UAAU,SAAS,OAAO;AAE5F,aAAW,WAAW,kBAAkB;AACtC,UAAM,QAAQ,YAAY;AAAA,MAAK,SAC7B,IAAI,KAAK,YAAY,EAAE,SAAS,OAAO;AAAA,IACzC;AACA,QAAI,MAAO,QAAO;AAAA,EACpB;AAGA,SAAO,uBAAuB,aAAa,IAAI;AACjD;AAbS;AAeT,SAAS,uBAAuB,aAA6B,MAAkC;AAC7F,MAAI,eAAe;AACnB,MAAI,eAAe;AAEnB,cAAY,QAAQ,SAAO;AACzB,UAAM,SAAS,KAAK,IAAI,SAAO,OAAO,IAAI,IAAI,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAC3E,QAAI,OAAO,SAAS,GAAG;AACrB,YAAM,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AACxD,YAAM,WAAW,OAAO,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,IAAI,MAAM,MAAM,CAAC,GAAG,CAAC,IAAI,OAAO;AACxF,YAAM,KAAK,KAAK,KAAK,QAAQ,IAAI;AAEjC,UAAI,KAAK,cAAc;AACrB,uBAAe;AACf,uBAAe;AAAA,MACjB;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAnBS;AAqBT,SAAS,yBAAyB,aAA6B,MAAqF;AAClJ,MAAI,YAAY;AAChB,MAAI,iBAAiB;AAErB,WAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,aAAS,IAAI,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC/C,YAAM,OAAO,YAAY,CAAC;AAC1B,YAAM,OAAO,YAAY,CAAC;AAE1B,YAAM,UAAU,KAAK,IAAI,SAAO,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAC7E,YAAM,UAAU,KAAK,IAAI,SAAO,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAE7E,UAAI,QAAQ,WAAW,QAAQ,UAAU,QAAQ,SAAS,GAAG;AAC3D,cAAM,cAAc,KAAK,IAAI,qBAAqB,SAAS,OAAO,CAAC;AACnE,YAAI,cAAc,kBAAkB,cAAc,KAAK;AACrD,2BAAiB;AACjB,sBAAY,EAAE,MAAM,MAAM,YAAY;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAvBS;AAyBT,SAAS,qBAAqB,iBAAiC,MAAkC;AAC/F,aAAW,OAAO,iBAAiB;AACjC,UAAM,SAAS,KAAK,OAAO,CAAC,KAAK,QAAQ;AACvC,YAAM,QAAQ,IAAI,IAAI,IAAI;AAC1B,UAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK;AACjC,aAAO;AAAA,IACT,GAAG,CAAC,CAAC;AAEL,UAAM,cAAc,OAAO,KAAK,MAAM,EAAE;AACxC,QAAI,eAAe,KAAK,eAAe,IAAI;AACzC,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,gBAAgB,CAAC,KAAK;AAC/B;AAdS;AAiBT,SAAS,iBAAiB,YAA0B,aAA2B,MAAyB;AACtG,MAAI,CAAC,QAAQ,KAAK,WAAW,KAAK,CAAC,cAAc,CAAC,aAAa;AAC7D,WAAO;AAAA,EACT;AACA,QAAM,SAAS,KAAK,OAAO,CAAC,KAAK,QAAQ;AACvC,UAAM,MAAM,IAAI,YAAY,IAAI;AAChC,UAAM,QAAQ,OAAO,IAAI,WAAW,IAAI,CAAC;AACzC,QAAI,OAAO,CAAC,MAAM,KAAK,GAAG;AACxB,UAAI,CAAC,IAAI,GAAG,EAAG,KAAI,GAAG,IAAI,CAAC;AAC3B,UAAI,GAAG,EAAE,KAAK,KAAK;AAAA,IACrB;AACA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,MAAI,OAAO,KAAK,MAAM,EAAE,WAAW,GAAG;AACpC,WAAO;AAAA,EACT;AAEA,QAAM,YAAY,OAAO,QAAQ,MAAM,EACpC,IAAI,CAAC,CAAC,KAAK,MAAM,OAA2B;AAAA,IAC3C,UAAU;AAAA,IACV,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AAAA,EACpD,EAAE,EACD,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK,EAChC,MAAM,GAAG,EAAE;AAGd,SAAO;AAAA,IACL,OAAO,GAAG,WAAW,IAAI,mBAAmB,YAAY,IAAI;AAAA,IAC5D,aAAa,mDAAmD,YAAY,IAAI;AAAA,IAChF,WAAW;AAAA,MACT,MAAM,CAAC;AAAA,QACL,GAAG,UAAU,IAAI,OAAK,EAAE,QAAQ;AAAA,QAChC,GAAG,UAAU,IAAI,OAAK,EAAE,KAAK;AAAA,QAC7B,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,WAAW,IAAI,mBAAmB,YAAY,IAAI;AAAA,QAC5D,OAAO,EAAE,OAAO,YAAY,KAAK;AAAA,QACjC,OAAO,EAAE,OAAO,WAAW,WAAW,IAAI,GAAG;AAAA,QAC7C,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AAnDS;AAqDT,SAAS,0BAA0B,YAA0B,MAAyB;AACpF,MAAI,CAAC,QAAQ,KAAK,WAAW,KAAK,CAAC,YAAY;AAC7C,WAAO;AAAA,EACT;AACA,QAAM,SAAS,KAAK,IAAI,SAAO,OAAO,IAAI,WAAW,IAAI,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,MAAM,CAAC,CAAC;AAElF,SAAO;AAAA,IACL,OAAO,GAAG,WAAW,IAAI;AAAA,IACzB,aAAa,8DAA8D,WAAW,IAAI;AAAA,IAC1F,WAAW;AAAA,MACT,MAAM,CAAC;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,QACN,QAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,KAAK,MAAM,KAAK,KAAK,OAAO,MAAM,CAAC,CAAC,CAAC;AAAA,QACtE,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,SAAS;AAAA,UACT,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,WAAW,IAAI;AAAA,QACzB,OAAO,EAAE,OAAO,WAAW,KAAK;AAAA,QAChC,OAAO,EAAE,OAAO,YAAY;AAAA,QAC5B,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AA/BS;AAiCT,SAAS,yBAAyB,MAAoB,MAAoB,MAAyB;AACjG,MAAI,CAAC,QAAQ,KAAK,WAAW,KAAK,CAAC,QAAQ,CAAC,MAAM;AAChD,WAAO;AAAA,EACT;AACA,QAAM,SAAS,KACZ,IAAI,UAAQ;AAAA,IACX,GAAG,OAAO,IAAI,KAAK,IAAI,CAAC;AAAA,IACxB,GAAG,OAAO,IAAI,KAAK,IAAI,CAAC;AAAA,EAC1B,EAAE,EACD,OAAO,WAAS,CAAC,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,CAAC;AAErD,SAAO;AAAA,IACL,OAAO,GAAG,KAAK,IAAI,OAAO,KAAK,IAAI;AAAA,IACnC,aAAa,2CAA2C,KAAK,IAAI,QAAQ,KAAK,IAAI;AAAA,IAClF,WAAW;AAAA,MACT,MAAM,CAAC;AAAA,QACL,GAAG,OAAO,IAAI,OAAK,EAAE,CAAC;AAAA,QACtB,GAAG,OAAO,IAAI,OAAK,EAAE,CAAC;AAAA,QACtB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,MAAM;AAAA,UACN,SAAS;AAAA,UACT,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,KAAK,IAAI,OAAO,KAAK,IAAI;AAAA,QACnC,OAAO,EAAE,OAAO,KAAK,KAAK;AAAA,QAC1B,OAAO,EAAE,OAAO,KAAK,KAAK;AAAA,QAC1B,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AAtCS;AAwCT,SAAS,wBAAwB,SAAuB,YAA0B,MAAyB;AACzG,MAAI,CAAC,QAAQ,KAAK,WAAW,KAAK,CAAC,WAAW,CAAC,YAAY;AACzD,WAAO;AAAA,EACT;AACA,QAAM,WAAW,KACd,OAAO,SAAO,IAAI,QAAQ,IAAI,KAAK,CAAC,MAAM,OAAO,IAAI,WAAW,IAAI,CAAC,CAAC,CAAC,EACvE,KAAK,CAAC,GAAG,MAAM,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,IAAI,IAAI,KAAK,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ,CAAC;AAE3F,SAAO;AAAA,IACL,OAAO,GAAG,WAAW,IAAI;AAAA,IACzB,aAAa,2CAA2C,WAAW,IAAI;AAAA,IACvE,WAAW;AAAA,MACT,MAAM,CAAC;AAAA,QACL,GAAG,SAAS,IAAI,SAAO,IAAI,QAAQ,IAAI,CAAC;AAAA,QACxC,GAAG,SAAS,IAAI,SAAO,OAAO,IAAI,WAAW,IAAI,CAAC,CAAC;AAAA,QACnD,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACnC,QAAQ,EAAE,OAAO,WAAW,MAAM,EAAE;AAAA,MACtC,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,WAAW,IAAI;AAAA,QACzB,OAAO,EAAE,OAAO,QAAQ,KAAK;AAAA,QAC7B,OAAO,EAAE,OAAO,WAAW,KAAK;AAAA,QAChC,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AA/BS;AAiCT,SAAS,sBAAsB,aAA2B,MAAyB;AACjF,MAAI,CAAC,QAAQ,KAAK,WAAW,KAAK,CAAC,aAAa;AAC9C,WAAO;AAAA,EACT;AACA,QAAM,SAAS,KAAK,OAAO,CAAC,KAAK,QAAQ;AACvC,UAAM,QAAQ,IAAI,YAAY,IAAI;AAClC,QAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK;AACjC,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,QAAM,eAAe,OAAO,QAAQ,MAAM,EACvC,KAAK,CAAC,CAAC,EAAC,CAAC,GAAG,CAAC,EAAC,CAAC,MAAO,IAAgB,CAAY,EAClD,MAAM,GAAG,CAAC;AAEb,SAAO;AAAA,IACL,OAAO,GAAG,YAAY,IAAI;AAAA,IAC1B,aAAa,6CAA6C,YAAY,IAAI;AAAA,IAC1E,WAAW;AAAA,MACT,MAAM,CAAC;AAAA,QACL,QAAQ,aAAa,IAAI,CAAC,CAAC,KAAK,MAAM,KAAK;AAAA,QAC3C,QAAQ,aAAa,IAAI,CAAC,CAAC,EAAC,KAAK,MAAM,KAAK;AAAA,QAC5C,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,QAAQ,CAAC,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,SAAS;AAAA,UAC/F,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,QACA,UAAU;AAAA,QACV,cAAc;AAAA,MAChB,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,YAAY,IAAI;AAAA,QAC1B,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AAtCS;AAwCT,SAAS,yBAAyB,YAA4B,aAA2B,MAAyB;AAChH,MAAI,CAAC,QAAQ,KAAK,WAAW,KAAK,CAAC,cAAc,WAAW,SAAS,KAAK,CAAC,aAAa;AACtF,WAAO;AAAA,EACT;AACA,QAAM,SAAS,KAAK,OAAO,CAAC,KAAK,QAAQ;AACvC,UAAM,MAAM,IAAI,YAAY,IAAI;AAChC,QAAI,CAAC,IAAI,GAAG,EAAG,KAAI,GAAG,IAAI,CAAC;AAC3B,QAAI,GAAG,EAAE,KAAK,OAAO,IAAI,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;AAC7C,QAAI,GAAG,EAAE,KAAK,OAAO,IAAI,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;AAC7C,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AAEL,QAAM,YAAY,OAAO,QAAQ,MAAM,EACpC,IAAI,CAAC,CAAC,KAAK,MAAM,OAA2B;AAAA,IAC3C,UAAU;AAAA,IACV,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI,OAAO;AAAA,EACpD,EAAE,EACD,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK,EAChC,MAAM,GAAG,EAAE;AAEd,SAAO;AAAA,IACL,OAAO,GAAG,WAAW,IAAI,SAAO,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,mBAAmB,YAAY,IAAI;AAAA,IACxF,aAAa,sDAAsD,YAAY,IAAI;AAAA,IACnF,WAAW;AAAA,MACT,MAAM,CAAC;AAAA,QACL,GAAG,UAAU,IAAI,OAAK,EAAE,QAAQ;AAAA,QAChC,GAAG,UAAU,IAAI,OAAK,EAAE,KAAK;AAAA,QAC7B,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,MAAM,EAAE,OAAO,WAAW,OAAO,EAAE;AAAA,QACrC;AAAA,MACF,CAAC;AAAA,MACD,QAAQ;AAAA,QACN,OAAO,GAAG,WAAW,IAAI,SAAO,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,mBAAmB,YAAY,IAAI;AAAA,QACxF,OAAO,EAAE,OAAO,YAAY,KAAK;AAAA,QACjC,OAAO,EAAE,OAAO,sBAAsB;AAAA,QACtC,cAAc;AAAA,QACd,eAAe;AAAA,QACf,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG;AAAA,MACvC;AAAA,IACF;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AA5CS;;;AH34CT,eAAsB,iBAAiB,SAAkB,KAA6B;AACpF,UAAQ,IAAI,2EAAoE;AAEhF,MAAI;AACF,UAAM,WAAW,MAAM,QAAQ,SAAS;AACxC,UAAM,OAAO,SAAS,IAAI,MAAM;AAEhC,QAAI,CAAC,MAAM;AACT,cAAQ,MAAM,oCAA+B;AAC7C,aAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,mBAAmB,CAAC,GAAG;AAAA,QACjE,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAGA,YAAQ,IAAI,uCAAgC,KAAK,MAAM,SAAS,KAAK,MAAM,OAAO;AAClF,UAAM,aAAa,MAAM,KAAK,YAAY;AAC1C,UAAM,UAAU,IAAI,YAAY,EAAE,OAAO,UAAU;AACnD,YAAQ,IAAI,8BAAuB,QAAQ,QAAQ,YAAY;AAG/D,YAAQ,IAAI,+BAAwB;AACpC,UAAM,cAAmB,WAAM,SAAS;AAAA,MACtC,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,eAAe;AAAA,IACjB,CAAC;AAED,QAAI,YAAY,OAAO,SAAS,GAAG;AACjC,cAAQ,MAAM,8BAAyB,YAAY,MAAM;AACzD,aAAO,IAAI,SAAS,KAAK,UAAU;AAAA,QACjC,OAAO;AAAA,QACP,SAAS,YAAY,OAAO,MAAM,GAAG,CAAC;AAAA;AAAA,MACxC,CAAC,GAAG;AAAA,QACF,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAEA,UAAM,OAAO,YAAY;AACzB,UAAM,SAAS,YAAY,IAAI;AAC/B,UAAM,aAAa,KAAK,MAAM,GAAG,EAAE;AACnC,UAAM,YAAY,aAAa;AAE/B,YAAQ,IAAI,0BAAmB,KAAK,MAAM,UAAU,OAAO,MAAM,UAAU;AAC3E,YAAQ,IAAI,mCAA4B,SAAS,EAAE;AAGnD,YAAQ,IAAI,4CAAqC;AACjD,UAAM,aAAa,IAAI,YAAY,EAAE,OAAO,KAAK,UAAU,IAAI,CAAC;AAChE,YAAQ,IAAI,wCAAiC,WAAW,UAAU,QAAQ;AAG1E,YAAQ,IAAI,mDAAyC,SAAS,EAAE;AAChE,UAAM,IAAI,UAAU,IAAI,WAAW,YAAY;AAAA,MAC7C,cAAc;AAAA,QACZ,aAAa;AAAA,MACf;AAAA,MACA,gBAAgB;AAAA,QACd,kBAAkB,KAAK;AAAA,QACvB,UAAU,KAAK,OAAO,SAAS;AAAA,QAC/B,aAAa,OAAO,OAAO,SAAS;AAAA,QACpC,kBAAiB,oBAAI,KAAK,GAAE,YAAY;AAAA,QACxC,mBAAmB,QAAQ,SAAS,WAAW,YAAY,QAAQ,CAAC;AAAA,MACtE;AAAA,IACF,CAAC;AACD,YAAQ,IAAI,uCAAkC;AAG9C,YAAQ,IAAI,qEAA8D;AAC1E,UAAM,iBAAiB,MAAM,kBAAkB,MAAM,GAAG;AACxD,YAAQ,IAAI,gDAA2C;AAGvD,YAAQ,IAAI,4EAAqE;AACjF,QAAI;AAEJ,QAAI,IAAI,gBAAgB;AACtB,UAAI;AACF,gBAAQ,IAAI,0DAAmD;AAC/D,cAAM,eAAe,mBAAmB,IAAI,cAAc;AAG1D,cAAM,WAAW,MAAM,iBAAiB,QAAQ,YAAY,YAAY;AAGxE,mBAAW,MAAM,kBAAkB,QAAQ,YAAY,GAAG;AAC1D,iBAAS,UAAU;AACnB,iBAAS,iBAAiB;AAG1B,gBAAQ,IAAI,8DAAuD;AACnE,cAAM,oBAAoB,MAAM,yBAAyB,QAAQ,MAAM,UAAU,YAAY;AAC7F,iBAAS,aAAa;AAEtB,gBAAQ,IAAI,8CAAyC;AAAA,MACvD,SAAS,OAAO;AACd,gBAAQ,MAAM,kEAAwD,KAAK;AAC3E,mBAAW,MAAM,kBAAkB,QAAQ,YAAY,GAAG;AAC1D,iBAAS,iBAAiB;AAG1B,YAAI,SAAS,cAAc,SAAS,WAAW,SAAS,GAAG;AACzD,mBAAS,aAAa,SAAS,WAAW,IAAI,WAAS;AACrD,gBAAI,CAAC,MAAM,SAAS,MAAM,WAAW;AACnC,qBAAO;AAAA,gBACL,OAAO;AAAA,gBACP,aAAa;AAAA,gBACb,WAAW,MAAM;AAAA,gBACjB,UAAU,MAAM,YAAY;AAAA,cAC9B;AAAA,YACF;AACA,mBAAO;AAAA,UACT,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,OAAO;AACL,cAAQ,IAAI,2DAAiD;AAC7D,iBAAW,MAAM,kBAAkB,QAAQ,YAAY,GAAG;AAC1D,eAAS,iBAAiB;AAG1B,UAAI,SAAS,cAAc,SAAS,WAAW,SAAS,GAAG;AACzD,iBAAS,aAAa,SAAS,WAAW,IAAI,WAAS;AACrD,cAAI,CAAC,MAAM,SAAS,MAAM,WAAW;AACnC,mBAAO;AAAA,cACL,OAAO;AAAA,cACP,aAAa;AAAA,cACb,WAAW,MAAM;AAAA,cACjB,UAAU,MAAM,YAAY;AAAA,YAC9B;AAAA,UACF;AACA,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAGA,YAAQ,IAAI,qCAA8B;AAC1C,UAAM,QAAQ,IAAI;AAAA,MAChB,IAAI,GAAG,IAAI,GAAG,SAAS,WAAW,KAAK,UAAU,MAAM,CAAC;AAAA,MACxD,IAAI,GAAG,IAAI,GAAG,SAAS,WAAW,KAAK,UAAU,UAAU,CAAC;AAAA,MAC5D,IAAI,GAAG,IAAI,GAAG,SAAS,aAAa,KAAK,UAAU,QAAQ,CAAC;AAAA;AAAA,IAE9D,CAAC;AACD,YAAQ,IAAI,iDAA4C,SAAS,EAAE;AAGnE,UAAM,WAA2B;AAAA,MAC/B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,YAAQ,IAAI,+DAAwD,SAAS,EAAE;AAC/E,YAAQ,IAAI,2BAAoB,eAAe,QAAQ,MAAM,wBAAwB;AAErF,WAAO,IAAI,SAAS,KAAK,UAAU,QAAQ,GAAG;AAAA,MAC5C,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,MACjC;AAAA,IACF,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,wBAAmB,KAAK;AACtC,YAAQ,MAAM,uBAAkB,iBAAiB,QAAQ,MAAM,QAAQ,0BAA0B;AAEjG,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAClD,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,IACpC,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AApLsB;AAyLtB,eAAsB,aAAa,SAAkB,KAA6B;AAChF,UAAQ,IAAI,uDAAgD;AAE5D,MAAI;AACF,UAAM,cAAc,MAAM,QAAQ,KAAK;AACvC,UAAM,EAAE,WAAW,OAAO,IAAI;AAC9B,YAAQ,IAAI,kBAAkB,WAAW,WAAW,MAAM;AAE1D,UAAM,CAAC,WAAW,eAAe,OAAO,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC5D,IAAI,GAAG,IAAI,GAAG,SAAS,SAAS;AAAA,MAChC,IAAI,GAAG,IAAI,GAAG,SAAS,SAAS;AAAA,MAChC,IAAI,UAAU,IAAI,SAAS;AAAA,IAC7B,CAAC;AAED,QAAI,CAAC,aAAa,CAAC,eAAe;AAChC,aAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,oBAAoB,CAAC,GAAG;AAAA,QAClE,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAChD,CAAC;AAAA,IACH;AAEA,UAAM,SAAS,KAAK,MAAM,SAAS;AACnC,UAAM,aAAa,KAAK,MAAM,aAAa;AAC3C,QAAI,WAAW;AAEf,QAAI,SAAS;AACX,UAAI;AACF,cAAM,WAAW,MAAM,QAAQ,KAAK;AACpC,mBAAW,KAAK,MAAM,QAAQ;AAC9B,gBAAQ,IAAI,kCAA2B,SAAS,MAAM,OAAO;AAAA,MAC/D,SAAS,OAAO;AACd,gBAAQ,KAAK,6DAAmD;AAAA,MAClE;AAAA,IACF;AAGA,QAAI,IAAI,gBAAgB;AACtB,UAAI;AACF,gBAAQ,IAAI,6CAAsC;AAClD,gBAAQ,IAAI,kDAA2C;AACvD,cAAM,eAAe,mBAAmB,IAAI,cAAc;AAG1D,gBAAQ,IAAI,mDAA4C;AACxD,cAAM,aAAa,MAAM,oBAAoB,QAAQ,QAAQ,YAAY;AAEzE,YAAI,WAAW,OAAO;AACpB,gBAAM,IAAI,MAAM,2BAA2B,WAAW,KAAK,EAAE;AAAA,QAC/D;AAGA,gBAAQ,IAAI,0CAAqC;AACjD,cAAM,kBAAkB,eAAe,WAAW,MAAM,UAAU,WAAW,UAAU;AAEvF,YAAI,gBAAgB,OAAO;AACzB,gBAAM,IAAI,MAAM,0BAA0B,gBAAgB,KAAK,EAAE;AAAA,QACnE;AAGA,gBAAQ,IAAI,kDAA2C;AACvD,cAAM,kBAAkB,MAAM,eAAe,QAAQ,gBAAgB,QAAQ,YAAY;AAEzF,cAAMa,YAA0B;AAAA,UAC9B,MAAM,WAAW;AAAA,UACjB,QAAQ,gBAAgB;AAAA,UACxB,YAAY,WAAW;AAAA,UACvB,UAAU,gBAAgB;AAAA,UAC1B,aAAa,gBAAgB;AAAA,UAC7B,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAEA,gBAAQ,IAAI,qDAAgD;AAE5D,eAAO,IAAI,SAAS,KAAK,UAAUA,SAAQ,GAAG;AAAA,UAC5C,SAAS;AAAA,YACP,gBAAgB;AAAA,YAChB,+BAA+B;AAAA,UACjC;AAAA,QACF,CAAC;AAAA,MAEH,SAAS,aAAa;AACpB,gBAAQ,MAAM,wCAAmC,WAAW;AAC5D,gBAAQ,IAAI,2DAAoD;AAAA,MAClE;AAAA,IACF;AAGA,YAAQ,IAAI,6DAAsD;AAClE,UAAM,YAAY,oBAAoB,QAAQ,UAAU;AAExD,UAAM,WAA0B;AAAA,MAC9B;AAAA,MACA,MAAM,CAAC,iEAAiE;AAAA,IAC1E;AAEA,WAAO,IAAI,SAAS,KAAK,UAAU,QAAQ,GAAG;AAAA,MAC5C,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,+BAA+B;AAAA,MACjC;AAAA,IACF,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,gBAAgB,KAAK;AACnC,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AAAA,MACP,MAAM,CAAC,yBAAyB;AAAA,IAClC,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AApHsB;;;AInMtB,IAAO,gBAAQ;AAAA,EACb,MAAM,MAAM,SAAkB,KAAU,KAA6B;AACnE,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,OAAO,IAAI;AAEjB,QAAI,QAAQ,WAAW,WAAW;AAChC,aAAO,IAAI,SAAS,MAAM;AAAA,QACxB,SAAS;AAAA,UACP,+BAA+B;AAAA,UAC/B,gCAAgC;AAAA,UAChC,gCAAgC;AAAA,QAClC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,QAAI,SAAS,aAAa,QAAQ,WAAW,QAAQ;AACnD,aAAO,iBAAiB,SAAS,GAAG;AAAA,IACtC;AAEA,QAAI,SAAS,YAAY,QAAQ,WAAW,QAAQ;AAClD,aAAO,aAAa,SAAS,GAAG;AAAA,IAClC;AAEA,QAAI,SAAS,OAAO,QAAQ,WAAW,OAAO;AAC5C,aAAO,IAAI,SAAS,aAAa,GAAG;AAAA,QAClC,SAAS,EAAE,gBAAgB,YAAY;AAAA,MACzC,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,EAClD;AACF;AAEA,SAAS,eAAuu7DT;AAx7DS;",
  "names": ["e", "i", "r", "n", "m", "s", "a", "o", "h", "u", "d", "f", "l", "c", "p", "y", "g", "_", "t", "E", "v", "b", "response"]
}
